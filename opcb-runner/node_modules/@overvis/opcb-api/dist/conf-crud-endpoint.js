"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUpdateHandler = exports.createConfCrudEndpoints = exports.EMPTY_RESPONSE_SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("./auth");
exports.EMPTY_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
function createConfCrudEndpoints(model, keyParamsSchema, keyFromParams, listItemSchema, createItemSchema, updateItemSchema) {
    return {
        list: makeListHandler(model.list),
        LIST_SCHEMA: { response: (0, server_tools_1.apiResponse)(typebox_1.Type.Array(listItemSchema)) },
        create: makeCreateHandler(model.create),
        CREATE_SCHEMA: { body: createItemSchema, response: (0, server_tools_1.apiResponse)(exports.EMPTY_RESPONSE_SCHEMA) },
        update: makeUpdateHandler(model.update, keyFromParams),
        UPDATE_SCHEMA: {
            body: updateItemSchema,
            params: keyParamsSchema,
            response: (0, server_tools_1.apiResponse)(exports.EMPTY_RESPONSE_SCHEMA),
        },
        remove: makeRemoveHandler(model.remove, keyFromParams),
        REMOVE_SCHEMA: {
            params: keyParamsSchema,
            response: (0, server_tools_1.apiResponse)(exports.EMPTY_RESPONSE_SCHEMA),
        },
    };
}
exports.createConfCrudEndpoints = createConfCrudEndpoints;
function makeListHandler(list) {
    async function handler() {
        return list(this.bus);
    }
    return (0, auth_1.auth)("readConfs", handler);
}
function makeCreateHandler(create) {
    async function handler(req) {
        const res = await create(this.bus, req.body);
        if (res === "exists") {
            throw new server_tools_1.ApiUserError(400, "ObjectExists", "Object already exists.");
        }
        if (res.status !== "ok") {
            throw new server_tools_1.ApiUserError(400, "IncorrectValue", `Config validation errror. Key: ${res.status.key}, code: ${res.status.code}`);
        }
        return {};
    }
    return (0, auth_1.auth)("writeConfs", handler);
}
function makeUpdateHandler(update, keyFromParams) {
    async function handler(req) {
        const res = await update(this.bus, keyFromParams(req.params), req.body);
        if (res === "notfound") {
            throw new server_tools_1.ApiUserError(404, "ObjectNotFound", "Object not found.");
        }
        if (res.status !== "ok") {
            throw new server_tools_1.ApiUserError(400, "IncorrectValue", `Config validation errror. Key: ${res.status.key}, code: ${res.status.code}`);
        }
        return {};
    }
    return (0, auth_1.auth)("writeConfs", handler);
}
exports.makeUpdateHandler = makeUpdateHandler;
function makeRemoveHandler(remove, keyFromParams) {
    async function handler(req) {
        const res = await remove(this.bus, keyFromParams(req.params));
        if (res === "notfound") {
            throw new server_tools_1.ApiUserError(404, "ObjectNotFound", "Object not found.");
        }
        if (res.status !== "ok") {
            throw new server_tools_1.ApiUserError(400, "IncorrectValue", `Config validation errror. Key: ${res.status.key}, code: ${res.status.code}`);
        }
        return {};
    }
    return (0, auth_1.auth)("writeConfs", handler);
}
//# sourceMappingURL=conf-crud-endpoint.js.map