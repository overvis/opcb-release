"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const __1 = require("..");
function msgToStr(msg) {
    const pairs = msg.reduce((acc, val, i) => {
        if (i % 2 === 0) {
            acc.push([]);
        }
        acc[acc.length - 1].push(val);
        return acc;
    }, []);
    const strPairs = [];
    for (const pair of pairs) {
        const name = pair[0].toString();
        let value = pair[1].toString();
        if (name === "DATA") {
            value = pair[1].toString("hex");
        }
        strPairs.push([name, value]);
    }
    const time = new Date().toISOString();
    const msgStr = strPairs.map(([k, v]) => `${k} ${v}`).join(" ");
    return `${time} > ${msgStr}`;
}
function handler(conn, _req) {
    const onStreamMsg = (msg) => {
        conn.socket.send(msgToStr(msg));
    };
    const onStreamErr = (err) => {
        conn.socket.send("Stream error: " + err.message);
        __1.logger.error(err, `Error while logging control stream: ${err.message}`);
        conn.socket.close();
    };
    __1.logger.info("Starting control stream log WebSocket.");
    const interruptLog = this.bus.logStream("bus", onStreamMsg, onStreamErr);
    conn.socket.on("close", () => {
        __1.logger.info("Control stream log WebSocket closed.");
        interruptLog();
    });
    conn.socket.on("error", (err) => {
        __1.logger.error(err, `Control stream log WebSocket error: ${err.message}`);
    });
}
exports.handler = handler;
//# sourceMappingURL=bus-log-ws.js.map