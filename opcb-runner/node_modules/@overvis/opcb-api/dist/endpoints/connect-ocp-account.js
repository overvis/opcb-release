"use strict";
/*
curl -s -H "Content-Type: application/json" \
        -d '{"serverName": "staging.overvis.com", "userEmail": "admin@overvis.com" }' \
        "http://10.42.1.24/api/connect-ocp-account/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const BODY_SCHEMA = typebox_1.Type.Object({
    serverName: typebox_1.Type.String({ minLength: 1, maxLength: 100 }),
    userEmail: typebox_1.Type.String({ format: "email", maxLength: 250 }),
}, { additionalProperties: false });
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function handler(req) {
    const res = await this.bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
        "overvisVpn:boundToOcpServer": req.body.serverName,
        "overvisVpn:boundToOcpAccountEmail": req.body.userEmail,
    }));
    if (res.status !== "ok") {
        throw new server_tools_1.ApiUserError(400, "IncorrectValue", `Config validation errror. Key: ${res.status.key}, code: ${res.status.code}`);
    }
    return {};
}
exports.handler = handler;
//# sourceMappingURL=connect-ocp-account.js.map