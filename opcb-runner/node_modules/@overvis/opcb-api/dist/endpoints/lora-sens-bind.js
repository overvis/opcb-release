"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const bind_1 = require("../model/lora-sens/bind");
const device_1 = require("../model/lora-sens/device");
const BODY_SCHEMA = typebox_1.Type.Object({
    did: typebox_1.Type.Number(),
    devKindCode: typebox_1.Type.Union([typebox_1.Type.Literal(43), typebox_1.Type.Literal(44)]),
    firmwareVersion: typebox_1.Type.Number(),
    frequencyDeviceKhz: typebox_1.Type.Number({
        minimum: 864025,
        maximum: 869175,
    }),
    frequencyGatewayKhz: typebox_1.Type.Number({
        minimum: 864025,
        maximum: 869175,
    }),
    bandwidthKhz: typebox_1.Type.Number({
        minimum: 7.8,
        maximum: 500,
    }),
    spreadFactor: typebox_1.Type.Number({
        minimum: 6,
        maximum: 12,
    }),
    codingRateBits: typebox_1.Type.Number({
        minimum: 5,
        maximum: 8,
    }),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({});
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(req) {
    const deviceId = (0, bind_1.bindDevice)(this.queries, req.body.did, req.body.devKindCode, req.body.firmwareVersion, req.body.frequencyDeviceKhz, req.body.frequencyGatewayKhz, req.body.bandwidthKhz, req.body.spreadFactor, req.body.codingRateBits);
    await this.bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncDevices());
    (0, device_1.setDeviceActive)(this.queries, deviceId);
    return {};
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=lora-sens-bind.js.map