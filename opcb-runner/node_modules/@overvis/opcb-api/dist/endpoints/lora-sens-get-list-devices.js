"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.openHandler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const sku_1 = require("../model/lora-sens/sku");
const device_1 = require("../model/lora-sens/device");
const auth_1 = require("../auth");
const OK_RESPONSE_SCHEMA = typebox_1.Type.Array(typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    did: typebox_1.Type.Number(),
    name: typebox_1.Type.String(),
    updatePeriodSec: typebox_1.Type.Number(),
    sku: typebox_1.Type.Enum(sku_1.LoraSensSku),
    isConnected: typebox_1.Type.Boolean(),
    isActive: typebox_1.Type.Boolean(),
    lastConnectionOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    nextConnectionOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    connectionParameters: typebox_1.Type.Object({
        frequencyDeviceKhz: typebox_1.Type.Number(),
        frequencyGatewayKhz: typebox_1.Type.Number(),
        bandwidthKhz: typebox_1.Type.Number(),
        spreadFactor: typebox_1.Type.Number(),
        codingRateBits: typebox_1.Type.Number(),
    }),
    batteryLevelPrecent: typebox_1.Type.Optional(typebox_1.Type.Number()),
    logFillLevelPrecent: typebox_1.Type.Optional(typebox_1.Type.Number()),
    signalLevelRxDbm: typebox_1.Type.Optional(typebox_1.Type.Number()),
    signalLevelTxDbm: typebox_1.Type.Optional(typebox_1.Type.Number()),
    rxBytes: typebox_1.Type.Number(),
    rxSpeedBps: typebox_1.Type.Number(),
    rxLastOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    txBytes: typebox_1.Type.Number(),
    txSpeedBps: typebox_1.Type.Number(),
    txLastOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    commands: typebox_1.Type.Array(typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        command: typebox_1.Type.String(),
        errorCode: typebox_1.Type.Optional(typebox_1.Type.Number()),
    })),
}));
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function openHandler(_req) {
    return (0, device_1.getBindedDevicesList)(this.queries);
}
exports.openHandler = openHandler;
exports.handler = (0, auth_1.auth)("readConfs", openHandler);
//# sourceMappingURL=lora-sens-get-list-devices.js.map