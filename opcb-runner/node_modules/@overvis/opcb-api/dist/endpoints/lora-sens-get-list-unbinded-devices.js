"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const device_1 = require("../model/lora-sens/device");
const sku_1 = require("../model/lora-sens/sku");
const OK_RESPONSE_SCHEMA = typebox_1.Type.Array(typebox_1.Type.Object({
    did: typebox_1.Type.String(),
    sku: typebox_1.Type.Optional(typebox_1.Type.Enum(sku_1.LoraSensSku)),
    lastConnectionOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    acceptedOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    connectionParameters: typebox_1.Type.Object({
        frequencyDeviceKhz: typebox_1.Type.Number(),
        frequencyGatewayKhz: typebox_1.Type.Number(),
        bandwidthKhz: typebox_1.Type.Number(),
        spreadFactor: typebox_1.Type.Number(),
        codingRateBits: typebox_1.Type.Number(),
    }),
    signalLevelRxdBm: typebox_1.Type.Optional(typebox_1.Type.Number()),
    rxLastOn: typebox_1.Type.Optional(typebox_1.Type.Number()),
    deviceKindCode: typebox_1.Type.Number(),
    firmwareVersion: typebox_1.Type.Number(),
    alreadyBindedDeviceTitle: typebox_1.Type.Optional(typebox_1.Type.String()),
}));
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function handler(_req) {
    return (0, device_1.getLoraSensUnbindedDevicesList)(this.queries);
}
exports.handler = handler;
//# sourceMappingURL=lora-sens-get-list-unbinded-devices.js.map