"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.openHandler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const device_1 = require("../model/lora-sens/device");
const settings_1 = require("../model/lora-sens/settings");
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    deviceId: typebox_1.Type.String(),
    did: typebox_1.Type.Number(),
    params: typebox_1.Type.Array(typebox_1.Type.Union([
        typebox_1.Type.Literal("temperatureOffset"),
        typebox_1.Type.Literal("humidityOffset"),
        typebox_1.Type.Literal("scanPeriod"),
        typebox_1.Type.Literal("tresholdToSend"),
        typebox_1.Type.Literal("commands"),
        typebox_1.Type.Literal("systemStatus"),
        typebox_1.Type.Literal("maxWeightSensor1"),
        typebox_1.Type.Literal("maxWeightSensor2"),
        typebox_1.Type.Literal("maxWeightSensor3"),
        typebox_1.Type.Literal("maxWeightSensor4"),
        typebox_1.Type.Literal("maxWeightSensor5"),
        typebox_1.Type.Literal("maxWeightSensor6"),
        typebox_1.Type.Literal("maxWeightSensor7"),
        typebox_1.Type.Literal("maxWeightSensor8"),
        typebox_1.Type.Literal("weightModuleState"),
    ])),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Partial(typebox_1.Type.Record(typebox_1.Type.KeyOf(typebox_1.Type.Object({
    temperatureOffset: typebox_1.Type.String(),
    humidityOffset: typebox_1.Type.String(),
    scanPeriod: typebox_1.Type.String(),
    tresholdToSend: typebox_1.Type.String(),
    commands: typebox_1.Type.String(),
    systemStatus: typebox_1.Type.String(),
    maxWeightSensor1: typebox_1.Type.String(),
    maxWeightSensor2: typebox_1.Type.String(),
    maxWeightSensor3: typebox_1.Type.String(),
    maxWeightSensor4: typebox_1.Type.String(),
    maxWeightSensor5: typebox_1.Type.String(),
    maxWeightSensor6: typebox_1.Type.String(),
    maxWeightSensor7: typebox_1.Type.String(),
    maxWeightSensor8: typebox_1.Type.String(),
    weightModuleState: typebox_1.Type.String(),
})), typebox_1.Type.Object({
    value: typebox_1.Type.Optional(typebox_1.Type.Number()),
    setValue: typebox_1.Type.Optional(typebox_1.Type.Number()),
    lastUpdatedSec: typebox_1.Type.Optional(typebox_1.Type.Number()),
    lastCmdError: typebox_1.Type.Optional(typebox_1.Type.Number()),
})));
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function openHandler(req) {
    (0, device_1.setDeviceActive)(this.queries, req.body.deviceId);
    const res = (0, settings_1.readSettings)(this.queries, req.body.did, req.body.params);
    return res;
}
exports.openHandler = openHandler;
exports.handler = (0, auth_1.auth)("readConfs", openHandler);
//# sourceMappingURL=lora-sens-read-settings.js.map