"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const calibration_1 = require("../model/lora-sens/calibration");
const BODY_SCHEMA = typebox_1.Type.Union([
    typebox_1.Type.Object({
        did: typebox_1.Type.Number(),
        moduleNumber: typebox_1.Type.Number(),
        status: typebox_1.Type.Union([
            typebox_1.Type.Literal(calibration_1.CALIBRATION_STATUS.Idle),
            typebox_1.Type.Literal(calibration_1.CALIBRATION_STATUS.Zero),
            typebox_1.Type.Literal(calibration_1.CALIBRATION_STATUS.MaxWeight),
        ]),
    }),
    typebox_1.Type.Object({
        did: typebox_1.Type.Number(),
        moduleNumber: typebox_1.Type.Number(),
        status: typebox_1.Type.Literal(calibration_1.CALIBRATION_STATUS.Complete),
        maxWeightKg: typebox_1.Type.Optional(typebox_1.Type.Number({
            minimum: 0.001,
            maximum: 5000,
        })),
    }),
]);
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function handler(req) {
    (0, calibration_1.setLoraSensWeightCalibrationStatus)(this.queries, req.body.did, req.body.moduleNumber, req.body.status, req.body.status === calibration_1.CALIBRATION_STATUS.Complete ? req.body.maxWeightKg : undefined);
    return {};
}
exports.handler = handler;
//# sourceMappingURL=lora-sens-set-weight-calibration-status.js.map