"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const weight_sensor_1 = require("../model/lora-sens/weight-sensor");
const BODY_SCHEMA = typebox_1.Type.Object({
    did: typebox_1.Type.Number(),
    deviceId: typebox_1.Type.String(),
    scanPeriod: typebox_1.Type.Optional(typebox_1.Type.Number({
        minimum: 5,
        maximum: 43200,
    })),
    tresholdToSendKg: typebox_1.Type.Optional(typebox_1.Type.Number({
        minimum: 0.01,
        maximum: 100,
    })),
    title: typebox_1.Type.Optional(typebox_1.Type.String({ minLength: 1, maxLength: 200 })),
    updatePeriodSec: typebox_1.Type.Optional(typebox_1.Type.Integer({
        minimum: 1,
        maximum: 36686400,
    })),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function handler(req) {
    (0, weight_sensor_1.setLoraSensWeightSettings)(this.queries, req.body.did, req.body.deviceId, req.body.scanPeriod, req.body.tresholdToSendKg, req.body.title, req.body.updatePeriodSec);
    await this.bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncDevices());
    return {};
}
exports.handler = handler;
//# sourceMappingURL=lora-sens-set-weight-settings.js.map