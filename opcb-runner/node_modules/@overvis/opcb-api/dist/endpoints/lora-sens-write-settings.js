"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.openHandler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const settings_1 = require("../model/lora-sens/settings");
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    did: typebox_1.Type.Number(),
    params: typebox_1.Type.Partial(typebox_1.Type.Record(typebox_1.Type.KeyOf(typebox_1.Type.Object({
        temperatureOffset: typebox_1.Type.String(),
        humidityOffset: typebox_1.Type.String(),
        scanPeriod: typebox_1.Type.String(),
        tresholdToSend: typebox_1.Type.String(),
        commands: typebox_1.Type.String(),
        systemStatus: typebox_1.Type.String(),
        maxWeightSensor1: typebox_1.Type.String(),
        maxWeightSensor2: typebox_1.Type.String(),
        maxWeightSensor3: typebox_1.Type.String(),
        maxWeightSensor4: typebox_1.Type.String(),
        maxWeightSensor5: typebox_1.Type.String(),
        maxWeightSensor6: typebox_1.Type.String(),
        maxWeightSensor7: typebox_1.Type.String(),
        maxWeightSensor8: typebox_1.Type.String(),
        weightModuleState: typebox_1.Type.String(),
    })), typebox_1.Type.Number())),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(req) {
    (0, settings_1.writeSettings)(this.queries, req.body.did, req.body.params);
    await this.bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncDevices());
    return {};
}
exports.openHandler = openHandler;
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=lora-sens-write-settings.js.map