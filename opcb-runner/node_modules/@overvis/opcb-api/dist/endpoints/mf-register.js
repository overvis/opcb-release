"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.MOTHERLAND_REGISTRATION_INFO_SCHEMA = exports.SCHEMA = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const value_1 = require("@sinclair/typebox/value");
const axios_1 = tslib_1.__importDefault(require("axios"));
const __1 = require("..");
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    licenseUuid: typebox_1.Type.String(),
    licensePassword: typebox_1.Type.String(),
    privateKey: typebox_1.Type.String(),
    batchDescription: typebox_1.Type.String(),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
/*
curl -d '{"licenseUuid": "a7a52b03-d487-466d-9b7a-c675a19bb2a9", "licensePassword": "dev", "privateKey": "IHIP51hQdamhHj4hoasc5NLWDlfjdPfk0mtgllg8iFo=", "batchDescription": "Mitskevich test new OPCB runtime."}'  -H "Content-Type: application/json" http://localhost/api/manufacture/register/
*/
async function openHandler(req) {
    // get public key
    const privateKey = req.body.privateKey;
    const resp = await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.GenPubKey(privateKey));
    if ("error" in resp.result) {
        throw new server_tools_1.ApiUserError(400, "IncorrectPrivateKey", "Failed to generate public key.");
    }
    const publicKey = resp.result.publicKey;
    const { "elan:mac": macAddress } = await this.bus.getConfs(["elan:mac"]);
    if (!macAddress) {
        throw new Error("Failed to get mac address.");
    }
    // invoke motherland api to register the device
    const result = await registerOnMotherland(req.body.licenseUuid, req.body.licensePassword, publicKey, macAddress, req.body.batchDescription);
    // update config from motherland api response
    const allowedIps = result.motherlandVpnIpAddress.split(".").slice(0, 2).join(".") + ".0.0/16";
    const confRes = await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({
        "overvisVpn:wireguard:privateKey": privateKey,
        "overvisVpn:wireguard:endpointPublicKey": result.motherlandWgPublicKey,
        "overvisVpn:wireguard:vpnMotherlandServerIp": result.motherlandVpnIpAddress,
        "overvisVpn:wireguard:ipAddressCidr": result.vpnIpAddress + "/16",
        "overvisVpn:wireguard:endpointAllowedIpsCidr": allowedIps,
        "overvisVpn:addRootSshKey": result.motherlandSshPublicKey,
        "overvisVpn:pinCode": result.pinCode,
        "global:model": result.sku,
        "global:manufacturerName": result.manufacturerName,
        "global:modelName": result.labelName,
        "global:labelLink": result.labelLink,
        "elan:mac": result.macAddress,
    }, false, true));
    if (confRes.status !== "ok") {
        throw new Error("Failed to set config.");
    }
    // request re-rendering of the label image
    await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.RerenderLabelImage());
    return {};
}
exports.MOTHERLAND_REGISTRATION_INFO_SCHEMA = typebox_1.Type.Object({
    motherlandWgPublicKey: typebox_1.Type.String(),
    motherlandVpnIpAddress: typebox_1.Type.String(),
    motherlandSshPublicKey: typebox_1.Type.String(),
    vpnIpAddress: typebox_1.Type.String(),
    pinCode: typebox_1.Type.String(),
    sku: typebox_1.Type.String(),
    manufacturerName: typebox_1.Type.String(),
    labelName: typebox_1.Type.String(),
    labelLink: typebox_1.Type.String(),
    macAddress: typebox_1.Type.String(),
});
async function registerOnMotherland(licenseUuid, licensePassword, wgPublicKey, macAddress, description) {
    const data = {
        licenseId: licenseUuid,
        licensePassword,
        deviceWgPublicKey: wgPublicKey,
        macAddress,
        description,
        passwords: [],
    };
    __1.logger.info(data, "Registering on Motherland...");
    const res = await axios_1.default.post("https://motherland.overvis.com/api/register-vpn-device/", data, {
        headers: { "Content-Type": "application/json" },
    });
    __1.logger.info(res.data, "Got registration data from Motherland.");
    if (!value_1.Value.Check(exports.MOTHERLAND_REGISTRATION_INFO_SCHEMA, res.data)) {
        throw new Error("Invalid response from motherland.");
    }
    return res.data;
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=mf-register.js.map