"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.MOTHERLAND_REGISTRATION_INFO_SCHEMA = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const __1 = require("..");
const auth_1 = require("../auth");
const motherland_1 = require("../model/motherland");
const BODY_SCHEMA = typebox_1.Type.Object({
    licenseUuid: typebox_1.Type.String(),
    licensePassword: typebox_1.Type.String(),
    privateKey: typebox_1.Type.String(),
    batchDescription: typebox_1.Type.String(),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
/*
curl -d '{"licenseUuid": "a7a52b03-d487-466d-9b7a-c675a19bb2a9", "licensePassword": "dev", "privateKey": "IHIP51hQdamhHj4hoasc5NLWDlfjdPfk0mtgllg8iFo=", "batchDescription": "Mitskevich test new OPCB runtime."}'  -H "Content-Type: application/json" http://localhost/api/manufacture/register/
*/
async function openHandler(req) {
    // get public key
    const privateKey = req.body.privateKey;
    const defaultUserName = "admin";
    const resp = await this.bus.sendRequest(new opcb_ts_shared_1.redisCmd.GenPubKey(privateKey));
    if ("error" in resp.result) {
        throw new server_tools_1.ApiUserError(400, "IncorrectPrivateKey", "Failed to generate public key.");
    }
    const publicKey = resp.result.publicKey;
    const { "elan:mac": macAddress, "overvisVpn:publicMotherlandApiUrl": motherlandApiUrl } = await this.bus.getConfs(["elan:mac", "overvisVpn:publicMotherlandApiUrl"]);
    if (!macAddress) {
        throw new Error("Failed to get mac address.");
    }
    else if (!motherlandApiUrl) {
        throw new Error("Failed to get motherland api url.");
    }
    // invoke motherland api to register the device
    const result = await registerOnMotherland(motherlandApiUrl, req.body.licenseUuid, req.body.licensePassword, publicKey, macAddress, req.body.batchDescription);
    if (!result.defaultPassword || result.defaultPassword.length < 8) {
        throw new Error(`Motherland returned incorrect default password: ${result.defaultPassword || "null"}`);
    }
    // update config and factory config from motherland api response
    const allowedIps = result.motherlandVpnIpAddress.split(".").slice(0, 2).join(".") + ".0.0/16";
    let confRes = await this.bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
        "overvisVpn:wireguard:privateKey": privateKey,
        "overvisVpn:wireguard:endpointPublicKey": result.motherlandWgPublicKey,
        "overvisVpn:wireguard:vpnMotherlandServerIp": result.motherlandVpnIpAddress,
        "overvisVpn:wireguard:ipAddressCidr": result.vpnIpAddress + "/16",
        "overvisVpn:wireguard:endpointAllowedIpsCidr": allowedIps,
        "overvisVpn:addRootSshKey": result.motherlandSshPublicKey,
        "overvisVpn:pinCode": result.pinCode,
        "global:model": result.sku,
        "global:manufacturerName": result.manufacturerName,
        "global:modelName": result.labelName,
        "global:labelLink": result.labelLink,
        "elan:mac": result.macAddress,
    }, false, "both"));
    if (confRes.status !== "ok") {
        throw new Error("Failed to set config.");
    }
    confRes = await this.bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
        "auth:users:0:username": defaultUserName,
        "auth:users:0:password": null,
        "auth:users:0:encryptedPassword": (0, opcb_ts_shared_1.encryptPassword)(result.defaultPassword),
        "auth:users:0:modbusDevicesAccess": "readWrite",
        "auth:users:0:configurationAccess": "readWrite",
        "auth:users:0:allowAuthThroughApi": "true",
        "auth:users:0:allowAuthThroughModbus": "false",
        "wlan:apSettings:password": (0, opcb_ts_shared_1.encryptWifiPassword)(result.defaultPassword),
    }, false, "factory"));
    if (confRes.status !== "ok") {
        throw new Error("Failed to set factory config.");
    }
    // request re-rendering of the label image
    await this.bus.sendRequest(new opcb_ts_shared_1.redisCmd.RerenderLabelImage(defaultUserName, result.defaultPassword));
    return {};
}
exports.MOTHERLAND_REGISTRATION_INFO_SCHEMA = typebox_1.Type.Object({
    motherlandWgPublicKey: typebox_1.Type.String(),
    motherlandVpnIpAddress: typebox_1.Type.String(),
    motherlandSshPublicKey: typebox_1.Type.String(),
    vpnIpAddress: typebox_1.Type.String(),
    pinCode: typebox_1.Type.String(),
    sku: typebox_1.Type.String(),
    manufacturerName: typebox_1.Type.String(),
    labelName: typebox_1.Type.String(),
    labelLink: typebox_1.Type.String(),
    macAddress: typebox_1.Type.String(),
    defaultPassword: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
});
async function registerOnMotherland(motherlandApiUrl, licenseUuid, licensePassword, wgPublicKey, macAddress, description) {
    const data = {
        licenseId: licenseUuid,
        licensePassword,
        deviceWgPublicKey: wgPublicKey,
        macAddress,
        description,
        passwords: [],
    };
    __1.logger.info(data, "Registering on Motherland...");
    return (0, motherland_1.motherlandRequest)(`${motherlandApiUrl}/register-vpn-device/`, { method: "POST", data }, exports.MOTHERLAND_REGISTRATION_INFO_SCHEMA);
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=mf-register.js.map