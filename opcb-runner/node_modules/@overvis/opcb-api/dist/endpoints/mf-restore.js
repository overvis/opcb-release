"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.getVpnDeviceInfo = exports.getDeviceIpFromMotherland = exports.SCHEMA = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const value_1 = require("@sinclair/typebox/value");
const axios_1 = tslib_1.__importDefault(require("axios"));
const __1 = require("..");
const auth_1 = require("../auth");
const mf_register_1 = require("./mf-register");
const BODY_SCHEMA = typebox_1.Type.Object({
    privateKey: typebox_1.Type.String(),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({}, { additionalProperties: false });
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
/*
curl -d '{"privateKey": "IHIP51hQdamhHj4hoasc5NLWDlfjdPfk0mtgllg8iFo="}'  -H "Content-Type: application/json" http://localhost/api/manufacture/restore/
*/
async function openHandler(req) {
    // get public key
    const privateKey = req.body.privateKey;
    const resp = await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.GenPubKey(privateKey));
    if ("error" in resp.result) {
        throw new server_tools_1.ApiUserError(400, "IncorrectPrivateKey", "Failed to generate public key.");
    }
    const publicKey = resp.result.publicKey;
    // getting ip and setting up vpn
    const ipResult = await getDeviceIpFromMotherland(publicKey);
    const allowedIps = ipResult.motherlandVpnIpAddress.split(".").slice(0, 2).join(".") + ".0.0/16";
    let confRes = await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({
        "overvisVpn:wireguard:privateKey": privateKey,
        "overvisVpn:wireguard:endpointPublicKey": ipResult.motherlandWgPublicKey,
        "overvisVpn:wireguard:vpnMotherlandServerIp": ipResult.motherlandVpnIpAddress,
        "overvisVpn:wireguard:ipAddressCidr": ipResult.vpnIpAddress + "/16",
        "overvisVpn:wireguard:endpointAllowedIpsCidr": allowedIps,
    }, false, true));
    if (confRes.status !== "ok") {
        throw new Error("Failed to set config.");
    }
    await (0, server_tools_1.timeout)(10000, this.bus.waitForMsg("dev-state"));
    // getting registration info
    const infoResult = await getVpnDeviceInfo(ipResult.motherlandVpnIpAddress);
    confRes = await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({
        "overvisVpn:wireguard:privateKey": privateKey,
        "overvisVpn:wireguard:endpointPublicKey": infoResult.motherlandWgPublicKey,
        "overvisVpn:wireguard:vpnMotherlandServerIp": infoResult.motherlandVpnIpAddress,
        "overvisVpn:wireguard:ipAddressCidr": infoResult.vpnIpAddress + "/16",
        "overvisVpn:wireguard:endpointAllowedIpsCidr": allowedIps,
        "overvisVpn:addRootSshKey": infoResult.motherlandSshPublicKey,
        "overvisVpn:pinCode": infoResult.pinCode,
        "global:model": infoResult.sku,
        "global:manufacturerName": infoResult.manufacturerName,
        "global:modelName": infoResult.labelName,
        "global:labelLink": infoResult.labelLink,
        "elan:mac": infoResult.macAddress,
    }, false, true));
    if (confRes.status !== "ok") {
        throw new Error("Failed to set config.");
    }
    // request re-rendering of the label image
    await this.bus.sendRequest(new opcb_ts_shared_1.redisBus.RerenderLabelImage());
    return {};
}
const MOTHERLAND_DEVICE_IP_SCHEMA = typebox_1.Type.Object({
    motherlandWgPublicKey: typebox_1.Type.String(),
    motherlandVpnIpAddress: typebox_1.Type.String(),
    vpnIpAddress: typebox_1.Type.String(),
});
async function getDeviceIpFromMotherland(deviceWgPublicKey) {
    __1.logger.info("Getting device VPN IP from Motherland...");
    const res = await axios_1.default.get(`https://motherland.overvis.com/api/vpn-device-ip/`, {
        params: { deviceWgPublicKey },
        headers: { "Content-Type": "application/json" },
    });
    __1.logger.info(res.data, "Got VPN data from Motherland.");
    if (!value_1.Value.Check(MOTHERLAND_DEVICE_IP_SCHEMA, res.data)) {
        throw new Error("Invalid response from motherland.");
    }
    return res.data;
}
exports.getDeviceIpFromMotherland = getDeviceIpFromMotherland;
async function getVpnDeviceInfo(motherlandVpnIp) {
    __1.logger.info("Getting device registration info from Motherland...");
    const res = await axios_1.default.get(`http://${motherlandVpnIp}/api/vpn-device-info/`, {
        headers: { "Content-Type": "application/json" },
    });
    __1.logger.info(res.data, "Got registration data from Motherland.");
    if (!value_1.Value.Check(mf_register_1.MOTHERLAND_REGISTRATION_INFO_SCHEMA, res.data)) {
        throw new Error("Invalid response from motherland.");
    }
    return res.data;
}
exports.getVpnDeviceInfo = getVpnDeviceInfo;
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=mf-restore.js.map