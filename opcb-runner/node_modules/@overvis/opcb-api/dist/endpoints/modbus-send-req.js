"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://localhost:3000/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -H "Content-Type: application/json" -H "Authorization: bearer $TOKEN" \
    -d '{"dataB64": "asdf", "asIs": true, "dst": "rs485:0" }' \
    "http://localhost:3000/modbus/send-request/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    dataB64: typebox_1.Type.String(),
    asIs: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    dst: typebox_1.Type.Optional(typebox_1.Type.String()),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Union([
    typebox_1.Type.Object({
        dataB64: typebox_1.Type.String(),
    }),
    typebox_1.Type.Object({
        modbusErrorCode: typebox_1.Type.String(),
    }),
]);
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(req) {
    const data = Buffer.from(req.body.dataB64, "base64");
    const resp = await this.bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest(data, req.body.asIs ? "as-is" : "rtu-no-crc"), req.body.dst);
    if (resp.errorCode) {
        return { modbusErrorCode: resp.errorCode };
    }
    return { dataB64: resp.data.toString("base64") };
}
exports.handler = (0, auth_1.auth)("modbus", openHandler);
//# sourceMappingURL=modbus-send-req.js.map