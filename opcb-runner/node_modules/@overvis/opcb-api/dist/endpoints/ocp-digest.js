"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({
    modbusTcpPort: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 0, maximum: 65535 })),
    modbusUid: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 0, maximum: 255 })),
    ocpServerName: typebox_1.Type.String(),
}, { additionalProperties: false });
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function handler() {
    const data = await this.bus.getState([
        "mbtcpServer:enabled",
        "mbtcpServer:listenPort",
        "virtualDevice:isEnabled",
        "virtualDevice:uid",
        "boundToOcpServer",
    ]);
    return {
        modbusTcpPort: data["mbtcpServer:enabled"] && data["mbtcpServer:listenPort"]
            ? parseInt(data["mbtcpServer:listenPort"])
            : undefined,
        modbusUid: data["virtualDevice:isEnabled"] && data["virtualDevice:uid"]
            ? parseInt(data["virtualDevice:uid"])
            : undefined,
        ocpServerName: data.boundToOcpServer || "",
    };
}
exports.handler = handler;
//# sourceMappingURL=ocp-digest.js.map