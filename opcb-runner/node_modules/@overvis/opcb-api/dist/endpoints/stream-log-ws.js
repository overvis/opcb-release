"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const typebox_1 = require("@sinclair/typebox");
const __1 = require("..");
const PARAMS_SCHEMA = typebox_1.Type.Object({
    streamName: typebox_1.Type.String(),
}, { additionalProperties: false });
function msgToStr(id, msg) {
    const pairs = msg.reduce((acc, val, i) => {
        if (i % 2 === 0) {
            acc.push([]);
        }
        acc[acc.length - 1].push(val);
        return acc;
    }, []);
    let date = new Date().toISOString();
    let kind = "#";
    let payload = "";
    for (const pair of pairs) {
        const name = pair[0].toString();
        if (name === "DATE") {
            date = new Date(Number(pair[1])).toISOString();
        }
        else if (name === "KIND") {
            const kindStr = pair[1].toString();
            if (kindStr === "TX") {
                kind = ">";
            }
            else if (kindStr === "RX") {
                kind = "<";
            }
            else {
                kind = "#";
            }
        }
        else if (name === "PAYLOAD") {
            if (kind === "#") {
                payload = pair[1].toString();
            }
            else {
                payload = pair[1].toString("hex");
            }
        }
    }
    return `${id.toString()} ${date} ${kind} ${payload}`;
}
function handler(conn, req) {
    const onStreamMsg = (id, msg) => {
        conn.socket.send(msgToStr(id, msg));
    };
    const onStreamErr = (err) => {
        conn.socket.send("Stream error: " + err.message);
        __1.logger.error(err, `Error while processing log stream (${req.params.streamName}): ${err.message}`);
        conn.socket.close();
    };
    __1.logger.info(`Starting log stream (${req.params.streamName}) WebSocket.`);
    const interruptLog = this.bus.listenLogStream(`log:${req.params.streamName}`, onStreamMsg, onStreamErr);
    conn.socket.on("close", () => {
        __1.logger.info(`Log stream (${req.params.streamName}) WebSocket closed.`);
        interruptLog();
    });
    conn.socket.on("error", (err) => {
        __1.logger.error(err, `Log stream (${req.params.streamName}) WebSocket error: ${err.message}`);
    });
}
exports.handler = handler;
//# sourceMappingURL=stream-log-ws.js.map