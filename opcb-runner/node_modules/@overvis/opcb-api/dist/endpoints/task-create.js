"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://localhost:4004/api/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -d '{"filepath": "/opcb/user/tasks/dist/tasks/example-task.js", "name": "example task", "description": "some example task", "autorunOnStartup": false, "restart": "on-success", "restartDelayMs": 60, "logToStdout": true, "userJson": "{\"successChance\":0.7}"}' -H "Content-Type: application/json" \
    -H "Authorization: bearer $TOKEN" \
    "http://localhost:4004/api/tasks/create/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    filepath: typebox_1.Type.String({ minLength: 2, maxLength: 200 }),
    userJson: typebox_1.Type.Optional(typebox_1.Type.String()),
    name: typebox_1.Type.String({ maxLength: 200 }),
    description: typebox_1.Type.String(),
    autorunOnStartup: typebox_1.Type.Boolean(),
    restart: typebox_1.Type.Union([
        typebox_1.Type.Literal("never"),
        typebox_1.Type.Literal("on-success"),
        typebox_1.Type.Literal("always"),
    ]),
    restartDelayMs: typebox_1.Type.Integer({ minimum: 0 }),
    logToStdout: typebox_1.Type.Boolean(),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({});
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(req) {
    var _a;
    const lastInsertRowid = this.queries.task.insert({
        ...req.body,
        userJson: (_a = req.body.userJson) !== null && _a !== void 0 ? _a : null,
        autorunOnStartup: req.body.autorunOnStartup ? 1 : 0,
        logToStdout: req.body.logToStdout ? 1 : 0,
    });
    if (lastInsertRowid === 0)
        throw Error("Failed to insert a row into tasks table.");
    await this.bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncTasks());
    return {};
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=task-create.js.map