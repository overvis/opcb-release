"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://10.42.1.24/api/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -d '{"fileBasePath": "test-task.js", "name": "test task", "description": "", "autorun": true, "autorunPeriodSec": 5, "restartOnError": true, "logLevel": "debug", "reportLevel": "full-log"}' -H "Content-Type: application/json" \
    -H "Authorization: bearer $TOKEN" \
    "http://10.42.1.24/api/tasks/create/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    fileBasePath: typebox_1.Type.String({ minLength: 2, maxLength: 200 }),
    userJson: typebox_1.Type.Optional(typebox_1.Type.String()),
    name: typebox_1.Type.String({ maxLength: 200 }),
    description: typebox_1.Type.String(),
    autorun: typebox_1.Type.Boolean(),
    autorunPeriodSec: typebox_1.Type.Integer({ minimum: 0 }),
    restartOnError: typebox_1.Type.Boolean(),
    logLevel: typebox_1.Type.Union([
        typebox_1.Type.Literal("silent"),
        typebox_1.Type.Literal("error"),
        typebox_1.Type.Literal("warn"),
        typebox_1.Type.Literal("info"),
        typebox_1.Type.Literal("debug"),
        typebox_1.Type.Literal("trace"),
    ]),
    reportLevel: typebox_1.Type.Union([typebox_1.Type.Literal("stat-only"), typebox_1.Type.Literal("full-log")]),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({});
exports.SCHEMA = {
    body: BODY_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(req) {
    var _a;
    const res = this.db
        .prepare(`insert into tasks (
                file_basepath,
                user_json,
                task_name,
                task_description,
                autorun_mode,
                autorun_period_sec,
                restart_on_error,
                log_level,
                report_level
            ) values (
                @fileBasePath,
                @userJson,
                @name,
                @description,
                @autorun,
                @autorunPeriodSec,
                @restartOnError,
                @logLevel,
                @reportLevel
            );`)
        .run({
        ...req.body,
        userJson: (_a = req.body.userJson) !== null && _a !== void 0 ? _a : null,
        autorun: req.body.autorun ? 1 : 0,
        restartOnError: req.body.restartOnError ? 1 : 0,
    });
    if (res.lastInsertRowid === 0)
        throw Error("Failed to insert a row into tasks table.");
    await this.bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncTasks());
    return {};
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=task-create.js.map