"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const typebox_1 = require("@sinclair/typebox");
const task_get_runs_1 = require("./task-get-runs");
const __1 = require("..");
const VOID_RESPONSE_SCHEMA = typebox_1.Type.Void();
exports.SCHEMA = {
    params: task_get_runs_1.PARAMS_SCHEMA,
    // response: VOID_RESPONSE_SCHEMA,
};
function msgToStr(id, msg) {
    const pairs = msg.reduce((acc, val, i) => {
        if (i % 2 === 0) {
            acc.push([]);
        }
        acc[acc.length - 1].push(val);
        return acc;
    }, []);
    let date = new Date().toISOString();
    let level = "";
    let payload = "";
    for (const pair of pairs) {
        const name = pair[0].toString();
        if (name === "DATE") {
            date = new Date(Number(pair[1])).toISOString();
        }
        else if (name === "LEVEL") {
            level = pair[1].toString();
        }
        else if (name === "PAYLOAD") {
            payload = pair[1].toString();
        }
    }
    return `${id.toString()} ${date} ${level} ${payload}`;
}
function handler(conn, req) {
    const onStreamMsg = (id, msg) => {
        conn.socket.send(msgToStr(id, msg));
    };
    const onStreamErr = (err) => {
        conn.socket.send("Stream error: " + err.message);
        __1.logger.error(err, `Error while processing task log stream (${req.params.id}): ${err.message}`);
        conn.socket.close();
    };
    __1.logger.info(`Starting log stream (${req.params.id}) WebSocket.`);
    const interruptLog = this.bus.listenLogStream(`taskLog:${req.params.id}`, onStreamMsg, onStreamErr);
    conn.socket.on("close", () => {
        __1.logger.info(`Log stream (${req.params.id}) WebSocket closed.`);
        interruptLog();
    });
    conn.socket.on("error", (err) => {
        __1.logger.error(err, `Log stream (${req.params.id}) WebSocket error: ${err.message}`);
    });
}
exports.handler = handler;
//# sourceMappingURL=task-log.js.map