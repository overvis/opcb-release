"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import { SocketStream } from "@fastify/websocket";
// import { Type } from "@sinclair/typebox";
// import { FastifyInstance, FastifyRequest, FastifySchema } from "fastify";
// import { Params, PARAMS_SCHEMA } from "./task-get-runs";
// import { logger } from "..";
// const VOID_RESPONSE_SCHEMA = Type.Void();
// export const SCHEMA: FastifySchema = {
//     params: PARAMS_SCHEMA,
//     // response: VOID_RESPONSE_SCHEMA,
// };
// function msgToStr(id: Buffer, msg: Buffer[]): string {
//     const pairs = msg.reduce<Buffer[][]>((acc, val, i) => {
//         if (i % 2 === 0) {
//             acc.push([]);
//         }
//         acc[acc.length - 1].push(val);
//         return acc;
//     }, []) as [Buffer, Buffer][];
//     let date = new Date().toISOString();
//     let level = "";
//     let payload = "";
//     for (const pair of pairs) {
//         const name = pair[0].toString();
//         if (name === "DATE") {
//             date = new Date(Number(pair[1])).toISOString();
//         } else if (name === "LEVEL") {
//             level = pair[1].toString();
//         } else if (name === "PAYLOAD") {
//             payload = pair[1].toString();
//         }
//     }
//     return `${id.toString()} ${date} ${level} ${payload}`;
// }
// export function handler(
//     this: FastifyInstance,
//     conn: SocketStream,
//     req: FastifyRequest<{ Params: Params }>,
// ): void {
//     const onStreamMsg = (id: Buffer, msg: Buffer[]): void => {
//         conn.socket.send(msgToStr(id, msg));
//     };
//     const onStreamErr = (err: Error): void => {
//         conn.socket.send("Stream error: " + err.message);
//         logger.error(
//             err,
//             `Error while processing task log stream (${req.params.id}): ${err.message}`,
//         );
//         conn.socket.close();
//     };
//     logger.info(`Starting log stream (${req.params.id}) WebSocket.`);
//     const interruptLog = this.bus.listenLogStream(
//         `taskLog:${req.params.id}`,
//         onStreamMsg,
//         onStreamErr,
//     );
//     conn.socket.on("close", () => {
//         logger.info(`Log stream (${req.params.id}) WebSocket closed.`);
//         interruptLog();
//     });
//     conn.socket.on("error", (err) => {
//         logger.error(err, `Log stream (${req.params.id}) WebSocket error: ${err.message}`);
//     });
// }
//# sourceMappingURL=task-log.js.map