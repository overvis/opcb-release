"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://10.42.1.24/api/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -d '{"name": "test task", "description": "", "autorun": true, "autorunPeriodSec": 1, "restartOnError": true, "logLevel": "debug", "reportLevel": "full-log"}' -H "Content-Type: application/json" \
    -H "Authorization: bearer $TOKEN" \
    "http://10.42.1.24/api/tasks/create/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const task_get_runs_1 = require("./task-get-runs");
const BODY_SCHEMA = typebox_1.Type.Object({
    filepath: typebox_1.Type.String({ minLength: 2, maxLength: 200 }),
    userJson: typebox_1.Type.Optional(typebox_1.Type.String()),
    name: typebox_1.Type.String({ maxLength: 200 }),
    description: typebox_1.Type.String(),
    autorunOnStartup: typebox_1.Type.Boolean(),
    restart: typebox_1.Type.Union([
        typebox_1.Type.Literal("never"),
        typebox_1.Type.Literal("on-success"),
        typebox_1.Type.Literal("always"),
    ]),
    restartDelayMs: typebox_1.Type.Integer({ minimum: 0 }),
    logToStdout: typebox_1.Type.Boolean(),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({});
exports.SCHEMA = {
    body: BODY_SCHEMA,
    params: task_get_runs_1.PARAMS_SCHEMA,
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(req) {
    const _res = this.db
        .prepare(`update tasks
            set
                name=@name,
                description=@description,
                user_json=@userJson,
                autorun_on_startup=@autorunOnStartup,
                restart=@restart,
                restart_delay_ms=@restartDelayMs,
                log_to_stdout=@logToStdout
            where id = @taskId;`)
        .run({
        taskId: req.params.id,
        name: req.body.name,
        description: req.body.description,
        userJson: req.body.userJson || null,
        autorunOnStartup: req.body.autorunOnStartup ? 1 : 0,
        restart: req.body.restart,
        restartDelayMs: req.body.restartDelayMs,
        logToStdout: req.body.logToStdout ? 1 : 0,
    });
    await this.bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncTasks());
    return {};
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=task-update.js.map