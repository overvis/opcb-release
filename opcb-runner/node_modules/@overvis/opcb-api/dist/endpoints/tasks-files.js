"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://10.42.1.24/api/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -H "Content-Type: application/json" -H "Authorization: bearer $TOKEN" \
    "http://10.42.1.24/api/tasks/files/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const OK_RESPONSE_SCHEMA = typebox_1.Type.Array(typebox_1.Type.Object({
    basePath: typebox_1.Type.String(),
    lastUpdatedOn: typebox_1.Type.String({ format: "date-time" }),
    defaults: typebox_1.Type.Object({
        name: typebox_1.Type.Optional(typebox_1.Type.String()),
        description: typebox_1.Type.Optional(typebox_1.Type.String()),
        autorunPeriodSec: typebox_1.Type.Optional(typebox_1.Type.Integer()),
    }),
}));
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function openHandler() {
    const records = this.memdb.prepare("select * from task_files;").all().map(opcb_ts_shared_1.nullToUndefined);
    return records.map(({ file_basepath: basePath, last_updated_on: lastUpdatedOn, task_name: name, task_description: description, default_run_period_sec: autorunPeriodSec, }) => ({
        basePath,
        lastUpdatedOn: (0, server_tools_1.dateToIsoString)(new Date(lastUpdatedOn * 1000)),
        defaults: {
            name,
            description,
            autorunPeriodSec,
        },
    }));
}
exports.handler = (0, auth_1.auth)("readConfs", openHandler);
//# sourceMappingURL=tasks-files.js.map