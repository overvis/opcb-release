"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://10.42.1.24/api/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -H "Content-Type: application/json" -H "Authorization: bearer $TOKEN" \
    "http://10.42.1.24/api/tasks/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const OK_RESPONSE_SCHEMA = typebox_1.Type.Array(typebox_1.Type.Object({
    id: typebox_1.Type.String({ format: "uuid" }),
    fileBasePath: typebox_1.Type.String(),
    createdOn: typebox_1.Type.String({ format: "date-time" }),
    name: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    autorun: typebox_1.Type.Boolean(),
    autorunPeriodSec: typebox_1.Type.Integer({ minimum: 0 }),
    restartOnError: typebox_1.Type.Boolean(),
    logLevel: typebox_1.Type.Union([
        typebox_1.Type.Literal("silent"),
        typebox_1.Type.Literal("error"),
        typebox_1.Type.Literal("warn"),
        typebox_1.Type.Literal("info"),
        typebox_1.Type.Literal("debug"),
        typebox_1.Type.Literal("trace"),
    ]),
    reportLevel: typebox_1.Type.Union([typebox_1.Type.Literal("stat-only"), typebox_1.Type.Literal("full-log")]),
    userJson: typebox_1.Type.Optional(typebox_1.Type.String()),
    prepareError: typebox_1.Type.Optional(typebox_1.Type.String()),
    runsNum: typebox_1.Type.Integer(),
    totalTimeMs: typebox_1.Type.Integer(),
    errorsNum: typebox_1.Type.Integer(),
    lastRun: typebox_1.Type.Optional(typebox_1.Type.Object({
        startOn: typebox_1.Type.String({ format: "date-time" }),
        finishOn: typebox_1.Type.Optional(typebox_1.Type.String({ format: "date-time" })),
        error: typebox_1.Type.Optional(typebox_1.Type.String()),
    })),
}));
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function openHandler() {
    const records = this.db
        .prepare(`select *
                from tasks t
                left join tasks_stats s on s.task_id = t.id;`)
        .all().map(opcb_ts_shared_1.nullToUndefined);
    return records.map(({ id, file_basepath: fileBasePath, created_on: createdOn, task_name: name, task_description: description, autorun_mode: autorun, autorun_period_sec: autorunPeriodSec, restart_on_error: restartOnError, log_level: logLevel, report_level: reportLevel, user_json: userJson, prepare_error: prepareError, runs_num: runsNum, total_time_ms: totalTimeMs, errors_num: errorsNum, last_run_start_on: lastRunStartOn, last_run_finish_on: lastRunFinishOn, last_run_error: lastRunError, }) => ({
        id,
        fileBasePath,
        createdOn: (0, server_tools_1.dateToIsoString)(new Date(createdOn * 1000)),
        name,
        description,
        autorun,
        autorunPeriodSec,
        restartOnError,
        logLevel,
        reportLevel,
        userJson,
        prepareError,
        runsNum: runsNum !== null && runsNum !== void 0 ? runsNum : 0,
        totalTimeMs: totalTimeMs !== null && totalTimeMs !== void 0 ? totalTimeMs : 0,
        errorsNum: errorsNum !== null && errorsNum !== void 0 ? errorsNum : 0,
        lastRun: lastRunStartOn
            ? {
                startOn: (0, server_tools_1.dateToIsoString)(new Date(lastRunStartOn * 1000)),
                finishOn: lastRunFinishOn
                    ? (0, server_tools_1.dateToIsoString)(new Date(lastRunFinishOn * 1000))
                    : undefined,
                error: lastRunError,
            }
            : undefined,
    }));
}
exports.handler = (0, auth_1.auth)("readConfs", openHandler);
//# sourceMappingURL=tasks-get.js.map