"use strict";
/*
TOKEN=`curl -s -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "admin" }' \
        "http://localhost:4004/api/login/" | \
    jq -r ".token"` \
&& \
curl -s -S -H "Content-Type: application/json" -H "Authorization: bearer $TOKEN" \
    "http://localhost:4004/api/tasks/" | \
    jq -C
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const auth_1 = require("../auth");
const tasks_1 = require("../model/tasks");
const ITEM_SCHEMA = typebox_1.Type.Object({
    id: typebox_1.Type.String({ format: "uuid" }),
    filepath: typebox_1.Type.String(),
    createdOn: typebox_1.Type.String({ format: "date-time" }),
    name: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    autorunOnStartup: typebox_1.Type.Boolean(),
    restart: typebox_1.Type.Union([
        typebox_1.Type.Literal("never"),
        typebox_1.Type.Literal("on-success"),
        typebox_1.Type.Literal("always"),
    ]),
    restartDelayMs: typebox_1.Type.Integer(),
    logToStdout: typebox_1.Type.Boolean(),
    userJson: typebox_1.Type.Optional(typebox_1.Type.String()),
    runsNum: typebox_1.Type.Integer(),
    errorsNum: typebox_1.Type.Integer(),
    lastRun: typebox_1.Type.Optional(typebox_1.Type.Object({
        startOn: typebox_1.Type.String({ format: "date-time" }),
        finishOn: typebox_1.Type.Optional(typebox_1.Type.String({ format: "date-time" })),
        error: typebox_1.Type.Optional(typebox_1.Type.String()),
    })),
    currentlyRunning: typebox_1.Type.Boolean(),
});
const OK_RESPONSE_SCHEMA = typebox_1.Type.Array(ITEM_SCHEMA);
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
function openHandler() {
    const records = this.queries.task.getAllWithStats();
    const currentlyRunningIds = (0, tasks_1.getRunningTaskIds)(this.queries);
    return records.map((v) => {
        var _a, _b;
        return ({
            id: v.id,
            filepath: v.filepath,
            createdOn: (0, server_tools_1.dateToIsoString)(new Date(v.created_on * 1000)),
            name: v.name,
            description: v.description,
            autorunOnStartup: v.autorun_on_startup === 1,
            restart: v.restart,
            restartDelayMs: v.restart_delay_ms,
            logToStdout: v.log_to_stdout === 1,
            userJson: v.user_json,
            runsNum: (_a = v.runs_num) !== null && _a !== void 0 ? _a : 0,
            errorsNum: (_b = v.errors_num) !== null && _b !== void 0 ? _b : 0,
            lastRun: v.last_run_start_on
                ? {
                    startOn: (0, server_tools_1.dateToIsoString)(new Date(v.last_run_start_on * 1000)),
                    finishOn: v.last_run_finish_on
                        ? (0, server_tools_1.dateToIsoString)(new Date(v.last_run_finish_on * 1000))
                        : undefined,
                    error: v.last_run_error,
                }
                : undefined,
            currentlyRunning: currentlyRunningIds.includes(v.id),
        });
    });
}
exports.handler = (0, auth_1.auth)("readConfs", openHandler);
//# sourceMappingURL=tasks-get.js.map