"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const tslib_1 = require("tslib");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const axios_1 = tslib_1.__importDefault(require("axios"));
const auth_1 = require("../auth");
const BODY_SCHEMA = typebox_1.Type.Object({
    authToken: typebox_1.Type.String({ maxLength: 100 }),
}, { additionalProperties: false });
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({ testRunId: typebox_1.Type.String({ format: "uuid" }) }, { additionalProperties: false });
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
    body: BODY_SCHEMA,
};
async function openHandler(req) {
    const { "overvisVpn:testServerApiUrl": testServerApiUrl } = await this.bus.getConfs([
        "overvisVpn:testServerApiUrl",
    ]);
    if (!testServerApiUrl) {
        throw new Error("Motherland VPN IP is not set.");
    }
    const res = await axios_1.default.post(`${testServerApiUrl}/start-device-test/`, { authToken: req.body.authToken }, {
        headers: { "Content-Type": "application/json" },
        validateStatus: function (status) {
            return status >= 200 && status < 500;
        },
    });
    if (res.status >= 400) {
        const data = res.data;
        if (!(data && typeof data === "object" && "errorCode" in data && "errorMessage" in data)) {
            throw new Error(`Received ${res.status} without a 'errorCode' or 'errorMessage' field.`);
        }
        throw new server_tools_1.ApiUserError(res.status, data.errorCode, data.errorMessage);
    }
    return res.data;
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=tests-run.js.map