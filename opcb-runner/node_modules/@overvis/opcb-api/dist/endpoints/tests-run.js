"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.SCHEMA = void 0;
const tslib_1 = require("tslib");
const server_tools_1 = require("@overvis/server-tools");
const typebox_1 = require("@sinclair/typebox");
const axios_1 = tslib_1.__importDefault(require("axios"));
const auth_1 = require("../auth");
const OK_RESPONSE_SCHEMA = typebox_1.Type.Object({ testRunId: typebox_1.Type.Optional(typebox_1.Type.String({ format: "uuid" })) }, { additionalProperties: false });
exports.SCHEMA = {
    response: (0, server_tools_1.apiResponse)(OK_RESPONSE_SCHEMA),
};
async function openHandler(_req) {
    const motherlandVpnIp = (await this.bus.getConfs(["overvisVpn:wireguard:vpnMotherlandServerIp"]))["overvisVpn:wireguard:vpnMotherlandServerIp"];
    if (!motherlandVpnIp) {
        throw new Error("Motherland VPN IP is not set.");
    }
    const res = await axios_1.default.post(`http://${motherlandVpnIp}/api/start-device-test/`, {
        headers: { "Content-Type": "application/json" },
    });
    return res.data;
}
exports.handler = (0, auth_1.auth)("writeConfs", openHandler);
//# sourceMappingURL=tests-run.js.map