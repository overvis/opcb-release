"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.logger = void 0;
const tslib_1 = require("tslib");
const websocket_1 = tslib_1.__importDefault(require("@fastify/websocket"));
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const server_tools_1 = require("@overvis/server-tools");
const fastify_1 = tslib_1.__importDefault(require("fastify"));
const routes_1 = require("./routes");
async function run({ logger: setLogger, redisClient, sqliteDbPath, sqliteMemDbPath, sqliteLibDir, }) {
    exports.logger = setLogger;
    exports.logger.info("Starting...");
    exports.logger.trace("Connecting to SQLite DBs...");
    const db = (0, opcb_ts_shared_1.connectSqlite)(sqliteDbPath, sqliteLibDir);
    const memdb = (0, opcb_ts_shared_1.connectSqlite)(sqliteMemDbPath, sqliteLibDir);
    // initializing bus
    const bus = redisClient;
    // TODO_FUTURE: remove "as" conversion
    const fastifyInstance = await (0, fastify_1.default)({ logger: exports.logger.child({}) });
    await fastifyInstance.register(websocket_1.default);
    fastifyInstance.addHook("onRequest", server_tools_1.checkApiRequestContentType);
    fastifyInstance.addHook("onSend", async (_req, rep, payload) => {
        // This is not a promise, rep.header() returns FastifyReply. Typings are confusing.
        // If you try to await here, reply will never be sent.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        rep.header("Content-Type", "application/json");
        return payload;
    });
    fastifyInstance.addHook("onClose", (_ins, done) => {
        exports.logger.warn("Stopping API server...");
        done();
    });
    fastifyInstance.setErrorHandler(server_tools_1.apiErrorHandler);
    fastifyInstance.decorate("bus", bus);
    fastifyInstance.decorate("sessions", {});
    fastifyInstance.decorate("db", db);
    fastifyInstance.decorate("memdb", memdb);
    (0, routes_1.setRoutes)(fastifyInstance);
    // subscribe to related events in bus
    bus.registerRequestHandler("sync-config", createSyncConfigHandler({ bus, fastifyInstance }));
    // wait for config changes from redis stream
    exports.logger.info("Started. Listening to the stream...");
    // TODO_FUTURE: catch fastify instance start-up errors (like port is taken)
}
exports.run = run;
function createSyncConfigHandler(state) {
    return async () => {
        exports.logger.debug("Got sync config command.");
        const conf = await state.bus.getConfs([
            "http:internalApiPort",
            "http:internalApiListenTo",
            "http:enableApiRequestsLogging",
        ]);
        const enableRequestsLogging = conf["http:enableApiRequestsLogging"] === "true";
        state.fastifyInstance.log.level = enableRequestsLogging ? "info" : "warn";
        if (!conf["http:internalApiPort"]) {
            throw new Error("No API port in the config from bus.");
        }
        const host = conf["http:internalApiListenTo"] || "127.0.0.1";
        const port = parseInt(conf["http:internalApiPort"], 10);
        const serverIsOnline = state.fastifyInstance.server.listening;
        const isEnabled = true;
        if (serverIsOnline && !isEnabled) {
            await state.fastifyInstance.close();
        }
        else if (!serverIsOnline && isEnabled) {
            await startListen(state.fastifyInstance, host, port);
        }
        else if (serverIsOnline) {
            const currentAddr = state.fastifyInstance.server.address();
            if (currentAddr === null || typeof currentAddr === "string") {
                await state.fastifyInstance.close();
                await startListen(state.fastifyInstance, host, port);
            }
            else if (currentAddr.address !== host || currentAddr.port !== port) {
                await state.fastifyInstance.close();
                await startListen(state.fastifyInstance, host, port);
            }
        }
    };
}
async function startListen(fastifyInstance, host, port) {
    await fastifyInstance.listen({ port, host });
    const currentAddr = fastifyInstance.server.address();
    const addrStr = !currentAddr
        ? "???"
        : typeof currentAddr === "string"
            ? currentAddr
            : currentAddr.address + ":" + currentAddr.port.toString();
    exports.logger.info(`Started API server on ${addrStr}.`);
}
//# sourceMappingURL=index.js.map