"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbQueries = void 0;
class DbQueries {
    constructor(db, memDb) {
        this.db = db;
        this.memDb = memDb;
        this.transaction = this.db.transaction.bind(this.db);
        this.device = {
            insert: this.db.prepare(`insert into devices (title, orig_template_id, channel)
            values (@title, @origTemplateId, @channel) returning id;`),
            updateTitle: this.db.prepare(`update devices set title = @title where id = @id;`),
            delete: this.db.prepare(`delete from devices where id = @id;`),
            getById: this.db.prepare(`select * from devices where id = @id;`),
        };
        this.getParamLastResults = this.memDb.prepare(`select * from param_last_results where device_id = @deviceId;`);
        // LoraSens
        this.insertLoraSensDevice = this.db.prepare(`insert into lorasens_devices (
            device_id,
            did,
            sku,
            device_kind_code,
            firmware_version,
            password,
            update_period_sec,
            active_mode_till,
            frequency_device_khz,
            frequency_gateway_khz,
            bandwidth_khz,
            spreading_factor,
            coding_rate_bits
        ) values (
            @deviceId,
            @did,
            @sku,
            @deviceKindCode,
            @firmwareVersion,
            @password,
            @updatePeriodSec,
            @activeModeTill,
            @frequencyDeviceKhz,
            @frequencyGatewayKhz,
            @bandwidthKhz,
            @spreadingFactor,
            @codingRateBits
        );`);
        this.updateLoraDeviceUpdatePeriodSec = this.db.prepare(`update lorasens_devices set update_period_sec = @updatePeriodSec where did = @did;`);
        this.deleteLoraDevice = this.db.prepare(`delete from lorasens_devices where device_id = @deviceId;`);
        this.setActiveTillLoraDevice = this.db.prepare(`update lorasens_devices set active_mode_till = @activeTill where did = @did;`);
        this.getLoraSensDeviceByDid = this.db.prepare(`select * from lorasens_devices where did = @did;`);
        this.getAllLoraSensDevices = this.db.prepare(`select * from lorasens_devices;`);
        this.getLoraSensDeviceStatus = this.memDb.prepare(`select * from lorasens_device_statuses where did = @did;`);
        this.getLoraSensDeviceCommands = this.db.prepare(`select * from lorasens_commands where did = @did and resulted_on is null order by created_on desc;`);
        this.getLoraSensDeviceRegistersRequests = this.db.prepare(`select * from lorasens_registers_requests where did = @did;`);
        this.getLoraSensDeviceUnansweredRegisterRequests = this.db.prepare(`select *
        from lorasens_registers_requests
        where did = @did and (
                (last_get_request_on > last_updated_on)
                    or (set_request_value is not null)
                    or (last_get_request_on is not null and last_updated_on is null)
            );`);
        this.getLoraSensDeviceRegisterRequest = this.db.prepare(`select *
        from lorasens_registers_requests
        where did = @did and register_address = @registerAddress;`);
        this.getUnbindedLoraSensDevices = this.memDb.prepare(`select * from lorasens_unbinded_devices where blacklisted_on is null;`);
        // TODO: use upsert
        this.insertOrIgnoreLoraSensRegLastGetRequestOn = this.db.prepare(`insert or ignore into lorasens_registers_requests (
            did,
            register_address,
            last_get_request_on
        ) values (
            @did,
            @registerAddress,
            @lastGetRequestOn
        );`);
        // TODO: use upsert
        this.updateLoraRegisterLastGetRequestOn = this.db.prepare(`update lorasens_registers_requests
        set last_get_request_on = @lastGetRequestOn
        where register_address = @registerAddress and did = @did;`);
        // TODO: use upsert
        this.updateLoraRegisterValue = this.db.prepare(`update lorasens_registers_requests set set_request_value = @value where register_address = @registerAddress and did = @did;`);
        // Tasks
        this.getTasksWithStats = this.db.prepare(`select * from tasks t left join task_stats s on s.task_id = t.id;`);
        this.getRunningTasks = this.memDb.prepare(`select task_id from task_runs where finished_on is null;`);
        this.insertTask = this.db.prepare(`insert into tasks (
            filepath,
            user_json,
            name,
            description,
            autorun_on_startup,
            restart,
            restart_delay_ms,
            log_to_stdout
        ) values (
            @filepath,
            @userJson,
            @name,
            @description,
            @autorunOnStartup,
            @restart,
            @restartDelayMs,
            @logToStdout
        );`);
        this.updateTask = this.db.prepare(`update tasks
        set
            name=@name,
            description=@description,
            user_json=@userJson,
            autorun_on_startup=@autorunOnStartup,
            restart=@restart,
            restart_delay_ms=@restartDelayMs,
            log_to_stdout=@logToStdout
        where id = @taskId;`);
        this.getTasksFiles = this.memDb.prepare(`select * from task_files;`);
        this.getTaskRuns = this.memDb.prepare(`select * from task_runs where task_id = @taskId order by started_on asc;`);
        this.deleteTask = this.db.prepare(`delete from tasks where id = @taskId;`);
    }
}
exports.DbQueries = DbQueries;
//# sourceMappingURL=dbmodel.js.map