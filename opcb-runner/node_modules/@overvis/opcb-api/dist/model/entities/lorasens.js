"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-return */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryModel = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const base_1 = require("./base");
class QueryModel extends base_1.QueryModelBase {
    insertDevice(args) {
        this.getQuery(`insert into lorasens_devices (
            device_id,
            did,
            sku,
            device_kind_code,
            firmware_version,
            password,
            update_period_sec,
            active_mode_till,
            frequency_device_khz,
            frequency_gateway_khz,
            bandwidth_khz,
            spreading_factor,
            coding_rate_bits
        ) values (
            @deviceId,
            @did,
            @sku,
            @deviceKindCode,
            @firmwareVersion,
            @password,
            @updatePeriodSec,
            @activeModeTill,
            @frequencyDeviceKhz,
            @frequencyGatewayKhz,
            @bandwidthKhz,
            @spreadingFactor,
            @codingRateBits
        );`).run(args);
    }
    updateDeviceUpdatePeriodSec(args) {
        this.getQuery(`update lorasens_devices set update_period_sec = @updatePeriodSec where device_id = @deviceId;`).run(args);
    }
    deleteDevice(deviceId) {
        this.getQuery(`delete from lorasens_devices where device_id = @deviceId;`).run({
            deviceId,
        });
    }
    setDeviceActiveTill(args) {
        this.getQuery(`update lorasens_devices set active_mode_till = @activeTill where device_id = @deviceId;`).run(args);
    }
    getDeviceByDeviceId(deviceId) {
        return this.getQuery(`select * from lorasens_devices where device_id = @deviceId;`).get({
            deviceId,
        });
    }
    getDeviceByDid(did) {
        return this.getQuery(`select * from lorasens_devices where did = @did;`).get({
            did,
        });
    }
    getAllDevices() {
        return this.getQuery(`select * from lorasens_devices;`).all();
    }
    getDeviceStatus(did) {
        return (0, opcb_ts_shared_1.nullToUndefined)(this.getMemQuery(`select * from lorasens_device_statuses where did = @did;`).get({
            did,
        }));
    }
    getCommands(did) {
        return this.getQuery(`select * from lorasens_commands
                    where did = @did and resulted_on is null
                    order by created_on desc;`).all({
            did,
        }).map(opcb_ts_shared_1.nullToUndefined).map((c) => ({
            id: c.id,
            did: c.did,
            command: c.command,
            errorCode: c.execute_error,
        }));
    }
    getRegistersRequests(did) {
        return this.getQuery(`select * from lorasens_registers_requests where did = @did;`).all({
            did,
        }).map(opcb_ts_shared_1.nullToUndefined);
    }
    getUnansweredRegisterRequests(did) {
        return this.getQuery(`select *
                from lorasens_registers_requests
                where did = @did and (
                    (last_get_request_on > last_updated_on)
                        or (set_request_value is not null)
                        or (last_get_request_on is not null and last_updated_on is null)
                );`).all({ did }).map(opcb_ts_shared_1.nullToUndefined);
    }
    getRegisterRequest(args) {
        return (0, opcb_ts_shared_1.nullToUndefined)(this.getQuery(`select *
                from lorasens_registers_requests
                where did = @did and register_address = @registerAddress;`).get(args));
    }
    getUnbindedDevices() {
        return this.getMemQuery(`select * from lorasens_unbinded_devices where blacklisted_on is null;`).all().map(opcb_ts_shared_1.nullToUndefined);
    }
    upsertRegLastGetRequestOn(args) {
        this.getQuery(`insert into lorasens_registers_requests (
                did,
                register_address,
                last_get_request_on
            ) values (
                @did,
                @registerAddress,
                @lastGetRequestOn
            ) on conflict (did, register_address)
                do update set last_get_request_on = excluded.last_get_request_on;`).run(args);
    }
    upsertRegisterValue(args) {
        this.getQuery(`insert into lorasens_registers_requests (
                did,
                register_address,
                last_get_request_on,
                set_request_value
            ) values (
                @did,
                @registerAddress,
                @lastGetRequestOn,
                @value
            ) on conflict(did, register_address)
                do update set set_request_value = excluded.set_request_value;`).run(args);
    }
}
exports.QueryModel = QueryModel;
//# sourceMappingURL=lorasens.js.map