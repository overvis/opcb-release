"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryModel = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-return */
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const base_1 = require("./base");
class QueryModel extends base_1.QueryModelBase {
    getAllWithStats() {
        return this.getQuery(`select * from tasks t left join task_stats s on s.task_id = t.id;`).all().map(opcb_ts_shared_1.nullToUndefined);
    }
    getAllRunning() {
        return this.getMemQuery(`select task_id from task_runs where finished_on is null;`).all();
    }
    insert(args) {
        const res = this.getQuery(`insert into tasks (
                filepath,
                user_json,
                name,
                description,
                autorun_on_startup,
                restart,
                restart_delay_ms,
                log_to_stdout
            ) values (
                @filepath,
                @userJson,
                @name,
                @description,
                @autorunOnStartup,
                @restart,
                @restartDelayMs,
                @logToStdout
            );`).run(args);
        return res.lastInsertRowid;
    }
    update(args) {
        this.getQuery(`update tasks
            set
                name=@name,
                description=@description,
                user_json=@userJson,
                autorun_on_startup=@autorunOnStartup,
                restart=@restart,
                restart_delay_ms=@restartDelayMs,
                log_to_stdout=@logToStdout
            where id = @taskId;`).run(args);
    }
    getFiles() {
        return this.getMemQuery(`select * from task_files;`).all().map(opcb_ts_shared_1.nullToUndefined);
    }
    getRuns(taskId) {
        return this.getMemQuery(`select * from task_runs where task_id = @taskId order by started_on asc;`).all({ taskId }).map(opcb_ts_shared_1.nullToUndefined);
    }
    delete(taskId) {
        this.getQuery(`delete from tasks where id = @taskId;`).run({ taskId });
    }
}
exports.QueryModel = QueryModel;
//# sourceMappingURL=task.js.map