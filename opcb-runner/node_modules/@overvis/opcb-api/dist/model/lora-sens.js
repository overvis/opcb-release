"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoraSensWeightResetTareStatus = exports.setLoraSensWeightResetTareStatus = exports.DROP_TARE_STATUS = exports.getLoraSensWeightCalibrationStatus = exports.setLoraSensWeightCalibrationStatus = exports.CALIBRATION_STATUS = exports.setLoraSensWeightModuleState = exports.getLoraSensWeightModules = exports.getLoraSensParamValues = exports.setLoraSensWeightSettings = exports.getLoraSensWeightSettings = exports.setLoraSensTeperatureSettings = exports.getLoraSensTemperatureSettings = exports.getLoraSensUnbindedDevicesList = exports.getLoraSensDevicesList = exports.setActiveDevice = exports.deleteDevice = exports.bindDevice = exports.LoraSensSku = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const crypto_1 = require("crypto");
var LoraSensSku;
(function (LoraSensSku) {
    LoraSensSku["Temperature"] = "lth-1";
    LoraSensSku["Weight"] = "lwg-1";
})(LoraSensSku || (exports.LoraSensSku = LoraSensSku = {}));
function bindDevice(db, did, devKindCode, firmwareVersion, frequencyDeviceKhz, frequencyGatewayKhz, bandwidthKhz, spreadFactor, codingRateBits) {
    const sku = deductLoraSku(devKindCode);
    // insert into table devices new device
    db.prepare("insert into devices (title, orig_template_id, channel) values (?, ?, ?)").run(`Lora Sensor ${sku}`, sku, `LGW:${did}`);
    // select last inserted id
    const deviceId = db.prepare("select id from devices order by created_on desc limit 1").get().id;
    // insert into table lorasens_devices new lorasens device
    db.prepare("insert into lorasens_devices (device_id, did, sku, device_kind_code, firmware_version, password, update_period_sec, active_mode_till, frequency_device_khz, frequency_gateway_khz, bandwidth_khz, spreading_factor, coding_rate_bits) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").run(deviceId, did, sku, devKindCode, firmwareVersion, Math.floor(Math.random() * 100000000)
        .toString()
        .padStart(8, "0"), 300, Math.floor(new Date().getTime() / 1000), frequencyDeviceKhz, frequencyGatewayKhz, bandwidthKhz, spreadFactor, codingRateBits);
}
exports.bindDevice = bindDevice;
function deleteDevice(db, id) {
    db.prepare("delete from lorasens_devices where device_id = ?").run(id);
    db.prepare("delete from devices where id = ?").run(id);
}
exports.deleteDevice = deleteDevice;
function setActiveDevice(db, did) {
    const tillSeconds = Math.floor((Date.now() + 30000) / 1000);
    db.prepare("update lorasens_devices set active_mode_till = ? where did = ?").run(tillSeconds, did);
}
exports.setActiveDevice = setActiveDevice;
function getLoraSensDevicesList(db, dbMem) {
    const loraDevices = db.prepare("select * from lorasens_devices").all().map(opcb_ts_shared_1.nullToUndefined);
    const ids = loraDevices.map((d) => d.device_id);
    const dids = loraDevices.map((d) => d.did);
    const placeholders = dids.map(() => "?").join(", ");
    const devices = db.prepare(`select * from devices where id in (${placeholders})`).all(ids);
    const loraDeviceStatuses = dbMem
        .prepare(`select * from lorasens_device_statuses where did in (${placeholders})`)
        .all(dids).map(opcb_ts_shared_1.nullToUndefined);
    const commands = db
        .prepare(`select * from lorasens_commands where did in (${placeholders}) and resulted_on is null order by created_on desc`)
        .all(dids).map(opcb_ts_shared_1.nullToUndefined);
    // select registers_requests for derive commands
    const registersRequests = db
        .prepare(`select * from lorasens_registers_requests where did in (${placeholders}) and (
                    (last_get_request_on > last_updated_on) or
                    (set_request_value is not null) or
                    (last_get_request_on is not null and last_updated_on is null)
                    )`)
        .all(dids).map(opcb_ts_shared_1.nullToUndefined);
    const registersRequestsCommands = [];
    for (const req of registersRequests) {
        registersRequestsCommands.push(...registerRequestToCommands(req.did, req.register_address, registersRequestsCommands, req.last_get_request_on, req.set_request_value, req.last_cmd_error));
    }
    const result = [];
    for (const loraDevice of loraDevices) {
        const device = devices.find((d) => d.id === loraDevice.device_id);
        if (!device)
            continue;
        const loraDeviceStatus = loraDeviceStatuses.find((s) => s.did === loraDevice.did);
        if (!loraDeviceStatus)
            continue;
        result.push({
            id: loraDevice.device_id,
            did: loraDevice.did,
            name: device.title,
            sku: loraDevice.sku,
            lastConnectionOn: loraDeviceStatus.rx_last_on || undefined,
            nextConnectionOn: loraDeviceStatus.next_connection_expected_on || undefined,
            connectionParameters: {
                frequencyDeviceKhz: loraDevice.frequency_device_khz,
                frequencyGatewayKhz: loraDevice.frequency_gateway_khz,
                bandwidthKhz: Number.isNaN(Number(loraDevice.bandwidth_khz))
                    ? 0
                    : Number(loraDevice.bandwidth_khz),
                spreadFactor: loraDevice.spreading_factor,
                codingRateBits: loraDevice.coding_rate_bits,
            },
            batteryLevelPrecent: loraDeviceStatus.power_level_percent,
            logFillLevelPrecent: loraDeviceStatus.records_space_usage_percent,
            signalLevelRxDbm: loraDeviceStatus.rx_signal_dbm,
            signalLevelTxDbm: loraDeviceStatus.tx_signal_dbm,
            rxBytes: loraDeviceStatus.rx_total_bytes,
            rxSpeedBph: loraDeviceStatus.rx_speed_bph,
            rxLastOn: loraDeviceStatus.rx_last_on,
            txBytes: loraDeviceStatus.tx_total_bytes,
            txSpeedBph: loraDeviceStatus.tx_speed_bph,
            txLastOn: loraDeviceStatus.tx_last_on,
            commands: [
                ...commands.filter((c) => c.did === loraDevice.did),
                ...registersRequestsCommands.filter((c) => c.did === loraDevice.did),
            ],
        });
    }
    return result;
}
exports.getLoraSensDevicesList = getLoraSensDevicesList;
function getLoraSensUnbindedDevicesList(db, dbMem) {
    var _a;
    const devices = dbMem
        .prepare("select * from lorasens_unbinded_devices where blacklisted_on is null")
        .all().map(opcb_ts_shared_1.nullToUndefined);
    // get lorasens_devices by old_did
    const dids = devices.map((d) => d.old_did);
    const placeholders = dids.map(() => "?").join(", ");
    const loraDevices = db
        .prepare(`select * from lorasens_devices where did in (${placeholders})`)
        .all(dids).map(opcb_ts_shared_1.nullToUndefined);
    // get devices by lorasens_devices.device_id
    const ids = loraDevices.map((d) => d.device_id);
    const placeholders2 = ids.map(() => "?").join(", ");
    const oldBindedDevices = db
        .prepare(`select * from devices where id in (${placeholders2})`)
        .all(ids);
    const result = [];
    for (const device of devices) {
        const loraDevice = loraDevices.find((d) => d.did === device.old_did);
        result.push({
            did: device.did.toString(),
            sku: deductLoraSku(device.device_kind_code),
            lastConnectionOn: device.rx_last_on || undefined,
            acceptedOn: device.bind_started_on,
            signalLevelRxdBm: device.rx_signal,
            rxLastOn: device.rx_last_on,
            connectionParameters: {
                frequencyDeviceKhz: device.frequency_device_khz,
                frequencyGatewayKhz: device.frequency_gateway_khz,
                bandwidthKhz: Number.isNaN(Number(device.bandwidth_khz))
                    ? 0
                    : Number(device.bandwidth_khz),
                spreadFactor: device.spreading_factor,
                codingRateBits: device.coding_rate_bits,
            },
            deviceKindCode: device.device_kind_code,
            firmwareVersion: device.firmware_version,
            alreadyBindedDeviceTitle: (_a = oldBindedDevices.find((d) => d.id === (loraDevice === null || loraDevice === void 0 ? void 0 : loraDevice.device_id))) === null || _a === void 0 ? void 0 : _a.title,
        });
    }
    return result;
}
exports.getLoraSensUnbindedDevicesList = getLoraSensUnbindedDevicesList;
function getLoraSensTemperatureSettings(db, did, deviceId) {
    // update last_get_request_on for register_address = 8(temperature_offset)
    updateRegisterLastGetRequestOn(db, did, 8);
    // update last_get_request_on for register_address = 9(humidity_offset)
    updateRegisterLastGetRequestOn(db, did, 9);
    // select humidity and temperature
    const result = db
        .prepare("select * from lorasens_registers_requests where did = ? and (register_address = 8 or register_address = 9)")
        .all(did).map(opcb_ts_shared_1.nullToUndefined);
    const temperatureRes = result === null || result === void 0 ? void 0 : result.find((r) => r.register_address === 8);
    const temperature = (temperatureRes === null || temperatureRes === void 0 ? void 0 : temperatureRes.set_request_value) !== undefined
        ? temperatureRes === null || temperatureRes === void 0 ? void 0 : temperatureRes.set_request_value
        : temperatureRes === null || temperatureRes === void 0 ? void 0 : temperatureRes.last_value;
    const humidityRes = result === null || result === void 0 ? void 0 : result.find((r) => r.register_address === 9);
    const humidity = (humidityRes === null || humidityRes === void 0 ? void 0 : humidityRes.set_request_value) !== undefined
        ? humidityRes === null || humidityRes === void 0 ? void 0 : humidityRes.set_request_value
        : humidityRes === null || humidityRes === void 0 ? void 0 : humidityRes.last_value;
    // select name
    const name = db.prepare("select title from devices where id = ?").get(deviceId).title;
    // select update_period_sec from lorasens_devices
    const updatePeriodSec = db.prepare("select update_period_sec from lorasens_devices where did = ?").get(did).update_period_sec;
    return {
        temperatureOffset: {
            value: temperature && temperature / 100,
            lastUpdatedOnSec: temperatureRes === null || temperatureRes === void 0 ? void 0 : temperatureRes.last_updated_on,
        },
        humidityOffset: {
            value: humidity && humidity / 10,
            lastUpdatedOnSec: humidityRes === null || humidityRes === void 0 ? void 0 : humidityRes.last_updated_on,
        },
        name,
        updatePeriodSec,
    };
}
exports.getLoraSensTemperatureSettings = getLoraSensTemperatureSettings;
function setLoraSensTeperatureSettings(db, did, deviceId, temperatureOffset, humidityOffset, name, updatePeriodSec) {
    // update register_address = 8(temperature_offset)
    temperatureOffset && updateRegisterValue(db, did, 8, temperatureOffset * 100);
    // update register_address = 9(humidity_offset)
    humidityOffset && updateRegisterValue(db, did, 9, humidityOffset * 10);
    // update name
    name && db.prepare("update devices set title = ? where id = ?").run(name, deviceId);
    // update update_period_sec
    updatePeriodSec &&
        db
            .prepare("update lorasens_devices set update_period_sec = ? where did = ?")
            .run(updatePeriodSec, did);
}
exports.setLoraSensTeperatureSettings = setLoraSensTeperatureSettings;
function getLoraSensWeightSettings(db, did, deviceId) {
    // update last_get_request_on for register_address = 9(scan_period)
    updateRegisterLastGetRequestOn(db, did, 9);
    // update last_get_request_on for register_address = 10(treshold_to_send)
    updateRegisterLastGetRequestOn(db, did, 10);
    // select scan_period and treshold_to_send
    const params = db
        .prepare("select * from lorasens_registers_requests where did = ? and (register_address = 9 or register_address = 10)")
        .all(did).map(opcb_ts_shared_1.nullToUndefined);
    // select name
    const name = db.prepare("select title from devices where id = ?").get(deviceId).title;
    // select update_period_sec from lorasens_devices
    const updatePeriodSec = db.prepare("select update_period_sec from lorasens_devices where did = ?").get(did).update_period_sec;
    const scanPeriod = params === null || params === void 0 ? void 0 : params.find((r) => r.register_address === 9);
    const tresholdToSend = params === null || params === void 0 ? void 0 : params.find((r) => r.register_address === 10);
    const treshholdToSendValue = (tresholdToSend === null || tresholdToSend === void 0 ? void 0 : tresholdToSend.set_request_value) !== undefined
        ? tresholdToSend === null || tresholdToSend === void 0 ? void 0 : tresholdToSend.set_request_value
        : tresholdToSend === null || tresholdToSend === void 0 ? void 0 : tresholdToSend.last_value;
    return {
        scanPeriod: {
            value: (scanPeriod === null || scanPeriod === void 0 ? void 0 : scanPeriod.set_request_value) !== undefined
                ? scanPeriod === null || scanPeriod === void 0 ? void 0 : scanPeriod.set_request_value
                : scanPeriod === null || scanPeriod === void 0 ? void 0 : scanPeriod.last_value,
            lastUpdatedOnSec: scanPeriod === null || scanPeriod === void 0 ? void 0 : scanPeriod.last_updated_on,
        },
        tresholdToSendKg: {
            value: treshholdToSendValue && treshholdToSendValue / 100,
            lastUpdatedOnSec: tresholdToSend === null || tresholdToSend === void 0 ? void 0 : tresholdToSend.last_updated_on,
        },
        name,
        updatePeriodSec,
    };
}
exports.getLoraSensWeightSettings = getLoraSensWeightSettings;
function setLoraSensWeightSettings(db, did, deviceId, scanPeriod, tresholdToSendKg, name, updatePeriodSec) {
    // update register_address = 9(scan_period)
    scanPeriod && updateRegisterValue(db, did, 9, scanPeriod);
    // update register_address = 10(treshold_to_send)
    tresholdToSendKg && updateRegisterValue(db, did, 10, tresholdToSendKg * 100);
    // update name
    name && db.prepare("update devices set title = ? where id = ?").run(name, deviceId);
    // update update_period_sec
    updatePeriodSec &&
        db
            .prepare("update lorasens_devices set update_period_sec = ? where did = ?")
            .run(updatePeriodSec, did);
}
exports.setLoraSensWeightSettings = setLoraSensWeightSettings;
const PARAM_VALUES_MAP = {
    [LoraSensSku.Temperature]: {
        8: "Temperature °C",
        9: "Humidity %",
    },
    [LoraSensSku.Weight]: {
        27: "Weight sensor 1 kg",
        28: "Weight sensor 2 kg",
        29: "Weight sensor 3 kg",
        30: "Weight sensor 4 kg",
        31: "Weight sensor 5 kg",
        32: "Weight sensor 6 kg",
        33: "Weight sensor 7 kg",
        34: "Weight sensor 8 kg",
    },
};
function getLoraSensParamValues(db, deviceId, sku) {
    const paramsMap = PARAM_VALUES_MAP[sku];
    const paramIds = Object.keys(paramsMap);
    const placeholders = paramIds.map(() => "?").join(", ");
    const response = db
        .prepare(`select * from param_last_results where device_id = ? and param_id in (${placeholders})`)
        .all(deviceId, ...paramIds).map(opcb_ts_shared_1.nullToUndefined);
    const result = [];
    for (const param of response) {
        result.push({
            id: param.param_id,
            name: paramsMap[param.param_id],
            value: param.value,
            error: param.error,
        });
    }
    return result;
}
exports.getLoraSensParamValues = getLoraSensParamValues;
const WEIGHT_MODULE_ENABLED_BIT_POSITIONS = [0, 1, 2, 3, 4, 5, 6, 7];
function getLoraSensWeightModules(db, memdb, did, deviceId) {
    updateRegisterLastGetRequestOn(db, did, 8);
    // select modules enabled state
    const enebaledStateRes = (0, opcb_ts_shared_1.nullToUndefined)(db
        .prepare("select * from lorasens_registers_requests where did = ? and register_address = 8")
        .get(did));
    const setValue = enebaledStateRes.set_request_value;
    const lastValue = enebaledStateRes.last_value;
    // select weight values
    const weightValues = getLoraSensParamValues(memdb, deviceId, LoraSensSku.Weight);
    // prepare result
    const result = [];
    for (const bitPosition of WEIGHT_MODULE_ENABLED_BIT_POSITIONS) {
        const setValueBit = setValue !== undefined ? setValue & (1 << bitPosition) : undefined;
        const lastValueBit = lastValue !== undefined ? lastValue & (1 << bitPosition) : undefined;
        let state = "off";
        if (setValue !== undefined && setValueBit !== lastValueBit) {
            state = "processing";
        }
        else if (lastValueBit) {
            state = "on";
        }
        else {
            state = "off";
        }
        const weight = weightValues.find((v) => v.id === (27 + bitPosition).toString());
        result.push({
            moduleNumber: bitPosition,
            weight: (weight === null || weight === void 0 ? void 0 : weight.value) ? parseFloat(weight.value) : undefined,
            moduleError: weight === null || weight === void 0 ? void 0 : weight.error,
            state,
            deviceId,
            did,
        });
    }
    return result;
}
exports.getLoraSensWeightModules = getLoraSensWeightModules;
function setLoraSensWeightModuleState(db, did, moduleNumber, isEnabled) {
    var _a;
    if (!WEIGHT_MODULE_ENABLED_BIT_POSITIONS.includes(moduleNumber)) {
        throw new Error("Invalid module number");
    }
    const currentEnabledStateRes = (0, opcb_ts_shared_1.nullToUndefined)(db
        .prepare("select * from lorasens_registers_requests where did = ? and register_address = 8")
        .get(did));
    const currentEnabledState = ((_a = currentEnabledStateRes.set_request_value) !== null && _a !== void 0 ? _a : currentEnabledStateRes.last_value) || 1;
    // update register_address = 8(modules enabled)
    updateRegisterValue(db, did, 8, isEnabled
        ? currentEnabledState | (1 << moduleNumber)
        : currentEnabledState & ~(1 << moduleNumber));
}
exports.setLoraSensWeightModuleState = setLoraSensWeightModuleState;
var CALIBRATION_STATUS;
(function (CALIBRATION_STATUS) {
    CALIBRATION_STATUS["Idle"] = "idle";
    CALIBRATION_STATUS["Zero"] = "zero";
    CALIBRATION_STATUS["MaxWeight"] = "max-weight";
    CALIBRATION_STATUS["Complete"] = "complete";
    CALIBRATION_STATUS["Error"] = "error";
})(CALIBRATION_STATUS || (exports.CALIBRATION_STATUS = CALIBRATION_STATUS = {}));
const CALIBRATION_STATUS_COMMAND_MAP = {
    [CALIBRATION_STATUS.Idle]: 0x0000,
    [CALIBRATION_STATUS.Zero]: 0x4000,
    [CALIBRATION_STATUS.MaxWeight]: 0x8000,
    [CALIBRATION_STATUS.Complete]: 0xc000,
    [CALIBRATION_STATUS.Error]: 0x0000,
};
function setLoraSensWeightCalibrationStatus(db, did, moduleNumber, status, maxWeight) {
    const command = CALIBRATION_STATUS_COMMAND_MAP[status];
    updateRegisterValue(db, did, 7, command + moduleNumber + 1);
    if (status === CALIBRATION_STATUS.Complete && maxWeight) {
        const lowReg = moduleNumber * 2 + 11;
        const highReg = lowReg + 1;
        const clearWeight = Math.trunc(maxWeight * 1000);
        const [lowVal, highVal] = [clearWeight >> 16, clearWeight & 0xffff];
        updateRegisterValue(db, did, lowReg, lowVal);
        updateRegisterValue(db, did, highReg, highVal);
    }
}
exports.setLoraSensWeightCalibrationStatus = setLoraSensWeightCalibrationStatus;
function getLoraSensWeightCalibrationStatus(db, did) {
    var _a;
    updateRegisterLastGetRequestOn(db, did, 2);
    const calibrationStatusRes = (0, opcb_ts_shared_1.nullToUndefined)(db
        .prepare("select * from lorasens_registers_requests where did = ? and register_address = 2")
        .get(did));
    const calibrationStatus = (_a = calibrationStatusRes.set_request_value) !== null && _a !== void 0 ? _a : calibrationStatusRes.last_value;
    const lastUpdatedSec = calibrationStatusRes.last_updated_on &&
        Math.floor(Date.now() / 1000) - calibrationStatusRes.last_updated_on;
    if (!calibrationStatus) {
        return {
            status: CALIBRATION_STATUS.Idle,
            lastUpdatedSec,
        };
    }
    let status = CALIBRATION_STATUS.Idle;
    switch ((calibrationStatus >> 13) & 0b111) {
        case 0b000:
            status = CALIBRATION_STATUS.Idle;
            break;
        case 0b001: // 8192
            status = CALIBRATION_STATUS.Zero;
            break;
        case 0b010: // 16384
            status = CALIBRATION_STATUS.MaxWeight;
            break;
        case 0b011: // 24576
            status = CALIBRATION_STATUS.Complete;
            break;
        default:
            status = CALIBRATION_STATUS.Error;
            break;
    }
    let lastCmdError;
    if (status === CALIBRATION_STATUS.Error) {
        lastCmdError = (0, opcb_ts_shared_1.nullToUndefined)(db
            .prepare("select * from lorasens_registers_requests where did = ? and register_address = 7")
            .get(did)).last_cmd_error;
    }
    return {
        status,
        lastUpdatedSec,
        lastCmdError,
    };
}
exports.getLoraSensWeightCalibrationStatus = getLoraSensWeightCalibrationStatus;
var DROP_TARE_STATUS;
(function (DROP_TARE_STATUS) {
    DROP_TARE_STATUS["Idle"] = "idle";
    DROP_TARE_STATUS["Start"] = "start";
    DROP_TARE_STATUS["Complete"] = "complete";
    DROP_TARE_STATUS["Error"] = "error";
})(DROP_TARE_STATUS || (exports.DROP_TARE_STATUS = DROP_TARE_STATUS = {}));
const DROP_TARE_STATUS_COMMAND_MAP = {
    [DROP_TARE_STATUS.Idle]: 0x0000,
    [DROP_TARE_STATUS.Start]: 0x4000,
    [DROP_TARE_STATUS.Complete]: 0x8000,
    [DROP_TARE_STATUS.Error]: 0x0000,
};
function setLoraSensWeightResetTareStatus(db, did, moduleNumber, status) {
    const command = DROP_TARE_STATUS_COMMAND_MAP[status];
    updateRegisterValue(db, did, 6, command + moduleNumber + 1);
}
exports.setLoraSensWeightResetTareStatus = setLoraSensWeightResetTareStatus;
function getLoraSensWeightResetTareStatus(db, did) {
    var _a;
    updateRegisterLastGetRequestOn(db, did, 2);
    const resetTareStatusRes = (0, opcb_ts_shared_1.nullToUndefined)(db
        .prepare("select * from lorasens_registers_requests where did = ? and register_address = 2")
        .get(did));
    const resetTareStatus = (_a = resetTareStatusRes.set_request_value) !== null && _a !== void 0 ? _a : resetTareStatusRes.last_value;
    const lastUpdatedSec = resetTareStatusRes.last_updated_on &&
        Math.floor(Date.now() / 1000) - resetTareStatusRes.last_updated_on;
    if (!resetTareStatus) {
        return {
            status: DROP_TARE_STATUS.Idle,
            lastUpdatedSec,
        };
    }
    let status = DROP_TARE_STATUS.Idle;
    switch ((resetTareStatus >> 10) & 0b111) {
        case 0b000:
            status = DROP_TARE_STATUS.Idle;
            break;
        case 0b001: // 1024
            status = DROP_TARE_STATUS.Start;
            break;
        case 0b011: // 3072
            status = DROP_TARE_STATUS.Complete;
            break;
        default:
            status = DROP_TARE_STATUS.Error;
            break;
    }
    let lastCmdError;
    if (status === DROP_TARE_STATUS.Error) {
        lastCmdError = (0, opcb_ts_shared_1.nullToUndefined)(db
            .prepare("select * from lorasens_registers_requests where did = ? and register_address = 6")
            .get(did)).last_cmd_error;
    }
    return {
        status,
        lastUpdatedSec,
        lastCmdError,
    };
}
exports.getLoraSensWeightResetTareStatus = getLoraSensWeightResetTareStatus;
function updateRegisterLastGetRequestOn(db, did, registerAddress) {
    const currentDateSec = new Date().getTime() / 1000;
    db.prepare(`insert or ignore into lorasens_registers_requests (did, register_address, last_get_request_on) values (?, ${registerAddress}, ?)`).run(did, currentDateSec);
    db.prepare(`update lorasens_registers_requests set last_get_request_on = ? where register_address = ${registerAddress} and did = ?`).run(currentDateSec, did);
}
function updateRegisterValue(db, did, registerAddress, value) {
    db.prepare(`insert or ignore into lorasens_registers_requests (did, register_address, last_get_request_on) values (?, ${registerAddress}, ?)`).run(did, new Date().getTime() / 1000);
    db.prepare(`update lorasens_registers_requests set set_request_value = ? where register_address = ${registerAddress} and did = ?`).run(value, did);
}
function deductLoraSku(devKindCode) {
    if (devKindCode === 43) {
        return LoraSensSku.Temperature;
    }
    else if (devKindCode === 44) {
        return LoraSensSku.Weight;
    }
    throw new Error("Invalid device kind code");
}
function registerRequestToCommands(did, registerAddress, existedCommands, lastGetRequestOn, setRequestValue, lastCmdError) {
    const result = [];
    ["get:", "set:"].forEach((prefix) => {
        const command = prefix === "get:"
            ? lastGetRequestOn && `get: ${registerAddress}`
            : setRequestValue && `set: ${registerAddress}, ${setRequestValue}`;
        const existedCommand = existedCommands.find((c) => c.did === did && c.command.startsWith(prefix));
        if (existedCommand && command) {
            existedCommand.command +=
                prefix === "get:"
                    ? `, ${registerAddress}`
                    : `; ${registerAddress}, ${setRequestValue}`;
            return;
        }
        if (command) {
            result.push({
                id: (0, crypto_1.randomUUID)(),
                did,
                command,
                errorCode: lastCmdError,
            });
        }
    });
    return result;
}
//# sourceMappingURL=lora-sens.js.map