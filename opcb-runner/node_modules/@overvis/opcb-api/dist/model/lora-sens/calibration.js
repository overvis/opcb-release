"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoraSensWeightCalibrationStatus = exports.setLoraSensWeightCalibrationStatus = exports.CALIBRATION_STATUS = void 0;
var CALIBRATION_STATUS;
(function (CALIBRATION_STATUS) {
    CALIBRATION_STATUS["Idle"] = "idle";
    CALIBRATION_STATUS["Zero"] = "zero";
    CALIBRATION_STATUS["MaxWeight"] = "max-weight";
    CALIBRATION_STATUS["Complete"] = "complete";
    CALIBRATION_STATUS["Error"] = "error";
})(CALIBRATION_STATUS || (exports.CALIBRATION_STATUS = CALIBRATION_STATUS = {}));
const CALIBRATION_STATUS_COMMAND_MAP = {
    [CALIBRATION_STATUS.Idle]: 0x0000,
    [CALIBRATION_STATUS.Zero]: 0x4000,
    [CALIBRATION_STATUS.MaxWeight]: 0x8000,
    [CALIBRATION_STATUS.Complete]: 0xc000,
    [CALIBRATION_STATUS.Error]: 0x0000,
};
function setLoraSensWeightCalibrationStatus(queries, did, moduleNumber, status, maxWeight) {
    queries.transaction(() => {
        const command = CALIBRATION_STATUS_COMMAND_MAP[status];
        queries.loraSens.upsertRegisterValue({
            did,
            registerAddress: 7,
            lastGetRequestOn: new Date().getTime() / 1000,
            value: command + moduleNumber + 1,
        });
        if (status === CALIBRATION_STATUS.Complete && maxWeight) {
            const lowReg = moduleNumber * 2 + 11;
            const highReg = lowReg + 1;
            const clearWeight = Math.trunc(maxWeight * 1000);
            const [lowVal, highVal] = [clearWeight >> 16, clearWeight & 0xffff];
            queries.loraSens.upsertRegisterValue({
                did,
                registerAddress: lowReg,
                lastGetRequestOn: new Date().getTime() / 1000,
                value: lowVal,
            });
            queries.loraSens.upsertRegisterValue({
                did,
                registerAddress: highReg,
                lastGetRequestOn: new Date().getTime() / 1000,
                value: highVal,
            });
        }
    })();
}
exports.setLoraSensWeightCalibrationStatus = setLoraSensWeightCalibrationStatus;
function getLoraSensWeightCalibrationStatus(queries, did) {
    var _a, _b;
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 2,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    const calibrationStatusRes = queries.loraSens.getRegisterRequest({
        did,
        registerAddress: 2,
    });
    const calibrationStatus = (_a = calibrationStatusRes === null || calibrationStatusRes === void 0 ? void 0 : calibrationStatusRes.set_request_value) !== null && _a !== void 0 ? _a : calibrationStatusRes === null || calibrationStatusRes === void 0 ? void 0 : calibrationStatusRes.last_value;
    const lastUpdatedSec = (calibrationStatusRes === null || calibrationStatusRes === void 0 ? void 0 : calibrationStatusRes.last_updated_on) &&
        Math.floor(Date.now() / 1000) - calibrationStatusRes.last_updated_on;
    if (!calibrationStatus) {
        return {
            status: CALIBRATION_STATUS.Idle,
            lastUpdatedSec,
        };
    }
    let status = CALIBRATION_STATUS.Idle;
    switch ((calibrationStatus >> 13) & 0b111) {
        case 0b000:
            status = CALIBRATION_STATUS.Idle;
            break;
        case 0b001: // 8192
            status = CALIBRATION_STATUS.Zero;
            break;
        case 0b010: // 16384
            status = CALIBRATION_STATUS.MaxWeight;
            break;
        case 0b011: // 24576
            status = CALIBRATION_STATUS.Complete;
            break;
        default:
            status = CALIBRATION_STATUS.Error;
            break;
    }
    if (status === CALIBRATION_STATUS.Error) {
        const lastCmdError = (_b = queries.loraSens.getRegisterRequest({
            did,
            registerAddress: 7,
        })) === null || _b === void 0 ? void 0 : _b.last_cmd_error;
        return {
            status: CALIBRATION_STATUS.Error,
            lastUpdatedSec,
            lastCmdError,
        };
    }
    return {
        status,
        lastUpdatedSec,
    };
}
exports.getLoraSensWeightCalibrationStatus = getLoraSensWeightCalibrationStatus;
//# sourceMappingURL=calibration.js.map