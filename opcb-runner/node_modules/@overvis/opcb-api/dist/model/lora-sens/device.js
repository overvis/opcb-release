"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDeviceActive = exports.deleteDevice = exports.saveDeviceSettings = exports.getBindedDevicesList = void 0;
const register_1 = require("./register");
function getBindedDevicesList(queries) {
    const loraDevices = queries.loraSens.getAllDevices();
    const result = [];
    for (const loraDevice of loraDevices) {
        const device = queries.device.getById(loraDevice.device_id);
        if (!device)
            continue;
        const loraDeviceStatus = queries.loraSens.getDeviceStatus(loraDevice.did);
        if (!loraDeviceStatus)
            continue;
        const commands = queries.loraSens.getCommands(loraDevice.did);
        const regsRequests = queries.loraSens.getUnansweredRegisterRequests(loraDevice.did);
        for (const req of regsRequests) {
            const reqCommands = (0, register_1.convertRegisterRequestToCommands)(req.did, commands, req.register_address, req.last_get_request_on, req.set_request_value, req.last_cmd_error);
            commands.push(...reqCommands);
        }
        const isConnected = (loraDeviceStatus.next_connection_expected_on &&
            loraDeviceStatus.next_connection_expected_on * 1000 >= Date.now() - 5000) ||
            false;
        let isActive = false;
        if (isConnected &&
            loraDeviceStatus.next_connection_expected_on &&
            loraDeviceStatus.rx_last_on) {
            isActive =
                loraDeviceStatus.next_connection_expected_on * 1000 - Date.now() <= 10000 ||
                    Date.now() - loraDeviceStatus.rx_last_on * 1000 <= 3000;
        }
        result.push({
            id: loraDevice.device_id,
            did: loraDevice.did,
            name: device.title,
            updatePeriodSec: loraDevice.update_period_sec,
            sku: loraDevice.sku,
            isConnected,
            isActive,
            lastConnectionOn: loraDeviceStatus.rx_last_on,
            nextConnectionOn: loraDeviceStatus.next_connection_expected_on || undefined,
            connectionParameters: {
                frequencyDeviceKhz: loraDevice.frequency_device_khz,
                frequencyGatewayKhz: loraDevice.frequency_gateway_khz,
                // TODO_FUTURE: refactor gateway to always store bandwidthKhz as Number
                bandwidthKhz: Number.isNaN(Number(loraDevice.bandwidth_khz))
                    ? 0
                    : Number(loraDevice.bandwidth_khz),
                spreadFactor: loraDevice.spreading_factor,
                codingRateBits: loraDevice.coding_rate_bits,
            },
            batteryLevelPrecent: loraDeviceStatus.power_level_percent,
            logFillLevelPrecent: loraDeviceStatus.records_space_usage_percent,
            signalLevelRxDbm: loraDeviceStatus.rx_signal_dbm,
            signalLevelTxDbm: loraDeviceStatus.tx_signal_dbm,
            rxBytes: loraDeviceStatus.rx_total_bytes,
            rxSpeedBps: loraDeviceStatus.rx_speed_bps,
            rxLastOn: loraDeviceStatus.rx_last_on,
            txBytes: loraDeviceStatus.tx_total_bytes,
            txSpeedBps: loraDeviceStatus.tx_speed_bps,
            txLastOn: loraDeviceStatus.tx_last_on,
            commands,
        });
    }
    return result;
}
exports.getBindedDevicesList = getBindedDevicesList;
function saveDeviceSettings(deviceId, queries, name, updatePeriodSec) {
    if (name) {
        queries.device.updateTitle({ id: deviceId, title: name });
    }
    if (updatePeriodSec) {
        queries.loraSens.updateDeviceUpdatePeriodSec({ deviceId, updatePeriodSec });
    }
}
exports.saveDeviceSettings = saveDeviceSettings;
function deleteDevice(queries, id) {
    queries.transaction(() => {
        queries.loraSens.deleteDevice(id);
        queries.device.delete(id);
    })();
}
exports.deleteDevice = deleteDevice;
function setDeviceActive(queries, deviceId) {
    queries.loraSens.setDeviceActiveTill({
        activeTill: Math.floor((Date.now() + 30000) / 1000),
        deviceId,
    });
}
exports.setDeviceActive = setDeviceActive;
//# sourceMappingURL=device.js.map