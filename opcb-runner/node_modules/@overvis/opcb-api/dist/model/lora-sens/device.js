"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setActiveDevice = exports.deleteDevice = exports.getLoraSensUnbindedDevicesList = exports.getLoraSensBindedDevicesList = void 0;
const sku_1 = require("./sku");
const register_1 = require("./register");
function getLoraSensBindedDevicesList(queries) {
    const loraDevices = queries.loraSens.getAllDevices();
    const result = [];
    for (const loraDevice of loraDevices) {
        const device = queries.device.getById(loraDevice.device_id);
        if (!device)
            continue;
        const loraDeviceStatus = queries.loraSens.getDeviceStatus(loraDevice.did);
        if (!loraDeviceStatus)
            continue;
        const commands = queries.loraSens.getCommands(loraDevice.did);
        const regsRequests = queries.loraSens.getUnansweredRegisterRequests(loraDevice.did);
        for (const req of regsRequests) {
            const reqCommands = (0, register_1.registerRequestConvertToCommands)(req.did, commands, req.register_address, req.last_get_request_on, req.set_request_value, req.last_cmd_error);
            commands.push(...reqCommands);
        }
        result.push({
            id: loraDevice.device_id,
            did: loraDevice.did,
            name: device.title,
            sku: loraDevice.sku,
            lastConnectionOn: loraDeviceStatus.rx_last_on || undefined,
            nextConnectionOn: loraDeviceStatus.next_connection_expected_on || undefined,
            connectionParameters: {
                frequencyDeviceKhz: loraDevice.frequency_device_khz,
                frequencyGatewayKhz: loraDevice.frequency_gateway_khz,
                bandwidthKhz: Number.isNaN(Number(loraDevice.bandwidth_khz))
                    ? 0
                    : Number(loraDevice.bandwidth_khz),
                spreadFactor: loraDevice.spreading_factor,
                codingRateBits: loraDevice.coding_rate_bits,
            },
            batteryLevelPrecent: loraDeviceStatus.power_level_percent,
            logFillLevelPrecent: loraDeviceStatus.records_space_usage_percent,
            signalLevelRxDbm: loraDeviceStatus.rx_signal_dbm,
            signalLevelTxDbm: loraDeviceStatus.tx_signal_dbm,
            rxBytes: loraDeviceStatus.rx_total_bytes,
            rxSpeedBph: loraDeviceStatus.rx_speed_bph,
            rxLastOn: loraDeviceStatus.rx_last_on,
            txBytes: loraDeviceStatus.tx_total_bytes,
            txSpeedBph: loraDeviceStatus.tx_speed_bph,
            txLastOn: loraDeviceStatus.tx_last_on,
            commands,
        });
    }
    return result;
}
exports.getLoraSensBindedDevicesList = getLoraSensBindedDevicesList;
function getLoraSensUnbindedDevicesList(queries) {
    const devices = queries.loraSens.getUnbindedDevices();
    const result = [];
    for (const device of devices) {
        const loraDevice = queries.loraSens.getDeviceByDid(device.old_did);
        const oldBindedDevice = loraDevice && queries.device.getById(loraDevice.device_id);
        result.push({
            did: device.did.toString(),
            sku: (0, sku_1.deductLoraSku)(device.device_kind_code),
            lastConnectionOn: device.rx_last_on || undefined,
            acceptedOn: device.bind_started_on,
            signalLevelRxdBm: device.rx_signal,
            rxLastOn: device.rx_last_on,
            connectionParameters: {
                frequencyDeviceKhz: device.frequency_device_khz,
                frequencyGatewayKhz: device.frequency_gateway_khz,
                bandwidthKhz: Number.isNaN(Number(device.bandwidth_khz))
                    ? 0
                    : Number(device.bandwidth_khz),
                spreadFactor: device.spreading_factor,
                codingRateBits: device.coding_rate_bits,
            },
            deviceKindCode: device.device_kind_code,
            firmwareVersion: device.firmware_version,
            alreadyBindedDeviceTitle: oldBindedDevice === null || oldBindedDevice === void 0 ? void 0 : oldBindedDevice.title,
        });
    }
    return result;
}
exports.getLoraSensUnbindedDevicesList = getLoraSensUnbindedDevicesList;
function deleteDevice(queries, id) {
    queries.transaction(() => {
        queries.loraSens.deleteDevice(id);
        queries.device.delete(id);
    })();
}
exports.deleteDevice = deleteDevice;
function setActiveDevice(queries, did) {
    queries.loraSens.setDeviceActiveTill({
        activeTill: Math.floor((Date.now() + 30000) / 1000),
        did,
    });
}
exports.setActiveDevice = setActiveDevice;
//# sourceMappingURL=device.js.map