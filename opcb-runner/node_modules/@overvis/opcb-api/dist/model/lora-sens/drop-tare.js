"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoraSensWeightResetTareStatus = exports.setLoraSensWeightResetTareStatus = exports.DROP_TARE_STATUS = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const register_1 = require("./register");
var DROP_TARE_STATUS;
(function (DROP_TARE_STATUS) {
    DROP_TARE_STATUS["Idle"] = "idle";
    DROP_TARE_STATUS["Start"] = "start";
    DROP_TARE_STATUS["Complete"] = "complete";
    DROP_TARE_STATUS["Error"] = "error";
})(DROP_TARE_STATUS || (exports.DROP_TARE_STATUS = DROP_TARE_STATUS = {}));
const DROP_TARE_STATUS_COMMAND_MAP = {
    [DROP_TARE_STATUS.Idle]: 0x0000,
    [DROP_TARE_STATUS.Start]: 0x4000,
    [DROP_TARE_STATUS.Complete]: 0x8000,
    [DROP_TARE_STATUS.Error]: 0x0000,
};
function setLoraSensWeightResetTareStatus(queries, did, moduleNumber, status) {
    const command = DROP_TARE_STATUS_COMMAND_MAP[status];
    (0, register_1.updateRegisterValue)(queries, did, 6, command + moduleNumber + 1);
}
exports.setLoraSensWeightResetTareStatus = setLoraSensWeightResetTareStatus;
function getLoraSensWeightResetTareStatus(queries, did) {
    var _a;
    (0, register_1.updateRegisterLastGetRequestOn)(queries, did, 2);
    const resetTareStatusRes = (0, opcb_ts_shared_1.nullToUndefined)(queries.getLoraSensDeviceRegisterRequest.get({
        did,
        registerAddress: 2,
    }));
    const resetTareStatus = (_a = resetTareStatusRes.set_request_value) !== null && _a !== void 0 ? _a : resetTareStatusRes.last_value;
    const lastUpdatedSec = resetTareStatusRes.last_updated_on &&
        Math.floor(Date.now() / 1000) - resetTareStatusRes.last_updated_on;
    if (!resetTareStatus) {
        return {
            status: DROP_TARE_STATUS.Idle,
            lastUpdatedSec,
        };
    }
    let status = DROP_TARE_STATUS.Idle;
    switch ((resetTareStatus >> 10) & 0b111) {
        case 0b000:
            status = DROP_TARE_STATUS.Idle;
            break;
        case 0b001: // 1024
            status = DROP_TARE_STATUS.Start;
            break;
        case 0b011: // 3072
            status = DROP_TARE_STATUS.Complete;
            break;
        default:
            status = DROP_TARE_STATUS.Error;
            break;
    }
    let lastCmdError;
    if (status === DROP_TARE_STATUS.Error) {
        lastCmdError = (0, opcb_ts_shared_1.nullToUndefined)(queries.getLoraSensDeviceRegisterRequest.get({
            did,
            registerAddress: 6,
        })).last_cmd_error;
    }
    return {
        status,
        lastUpdatedSec,
        lastCmdError,
    };
}
exports.getLoraSensWeightResetTareStatus = getLoraSensWeightResetTareStatus;
//# sourceMappingURL=drop-tare.js.map