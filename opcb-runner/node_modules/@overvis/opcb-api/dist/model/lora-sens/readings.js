"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLastReadings = void 0;
const READINGS = {
    temperatureDegree: {
        name: "Temperature",
        paramId: "temperature_degree",
        unit: "Â°C",
    },
    humidityPercent: {
        name: "Humidity",
        paramId: "humidity_percent",
        unit: "%",
    },
    moduleWeight1: {
        name: "Module weight 1",
        paramId: "weight_1_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight2: {
        name: "Module weight 2",
        paramId: "weight_2_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight3: {
        name: "Module weight 3",
        paramId: "weight_3_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight4: {
        name: "Module weight 4",
        paramId: "weight_4_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight5: {
        name: "Module weight 5",
        paramId: "weight_5_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight6: {
        name: "Module weight 6",
        paramId: "weight_6_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight7: {
        name: "Module weight 7",
        paramId: "weight_7_g",
        multiplier: 0.001,
        unit: "kg",
    },
    moduleWeight8: {
        name: "Module weight 8",
        paramId: "weight_8_g",
        multiplier: 0.001,
        unit: "kg",
    },
};
function getLastReadings(queries, deviceId, names) {
    const readings = queries.readings.getLastValues(deviceId);
    const result = [];
    for (const name of names) {
        const readingInfo = READINGS[name];
        const reading = readings.find((p) => p.param_id === readingInfo.paramId);
        if (!reading)
            continue;
        result.push({
            id: reading.param_id,
            readingName: name,
            displayNameEn: readingInfo.name,
            value: reading.value &&
                (parseFloat(reading.value) *
                    ("multiplier" in readingInfo ? readingInfo.multiplier : 1)).toFixed(3),
            error: reading.error,
            unit: readingInfo.unit,
        });
    }
    return result;
}
exports.getLastReadings = getLastReadings;
//# sourceMappingURL=readings.js.map