"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegisterValueAndLastUpdateFromRes = exports.registerRequestConvertToCommands = void 0;
const crypto_1 = require("crypto");
function registerRequestConvertToCommands(did, commands, registerAddress, lastGetRequestOn, setRequestValue, lastCmdError) {
    const result = [];
    for (const prefix of ["get:", "set:"]) {
        const command = prefix === "get:"
            ? lastGetRequestOn && `get: ${registerAddress}`
            : setRequestValue && `set: ${registerAddress}, ${setRequestValue}`;
        if (!command)
            continue;
        const existedCommand = commands.find((c) => c.command.startsWith(prefix));
        if (existedCommand && command) {
            existedCommand.command +=
                prefix === "get:"
                    ? `, ${registerAddress}`
                    : `; ${registerAddress}, ${setRequestValue}`;
            continue;
        }
        result.push({
            id: (0, crypto_1.randomUUID)(),
            did,
            command,
            errorCode: lastCmdError,
        });
    }
    return result;
}
exports.registerRequestConvertToCommands = registerRequestConvertToCommands;
function getRegisterValueAndLastUpdateFromRes(requests, registerAddress) {
    const res = requests.find((r) => r.register_address === registerAddress);
    return {
        value: (res === null || res === void 0 ? void 0 : res.set_request_value) !== undefined ? res === null || res === void 0 ? void 0 : res.set_request_value : res === null || res === void 0 ? void 0 : res.last_value,
        lastUpdatedOnSec: res === null || res === void 0 ? void 0 : res.last_updated_on,
    };
}
exports.getRegisterValueAndLastUpdateFromRes = getRegisterValueAndLastUpdateFromRes;
//# sourceMappingURL=register.js.map