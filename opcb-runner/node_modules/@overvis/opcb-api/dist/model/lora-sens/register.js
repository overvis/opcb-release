"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateRegisterLastGetOn = exports.convertRegisterRequestToCommands = void 0;
function convertRegisterRequestToCommands(did, commands, registerAddress, lastGetRequestOn, setRequestValue, lastCmdError) {
    const result = [];
    for (const prefix of ["get:", "set:"]) {
        const command = prefix === "get:"
            ? lastGetRequestOn && `get: ${registerAddress}`
            : setRequestValue && `set: ${registerAddress}=${setRequestValue}`;
        if (!command)
            continue;
        const existedCommand = commands.find((c) => c.command.startsWith(prefix));
        if (existedCommand && command) {
            existedCommand.command +=
                prefix === "get:"
                    ? `, ${registerAddress}`
                    : `, ${registerAddress}=${setRequestValue}`;
            continue;
        }
        result.push({
            id: `${did}-${prefix}:${command}`,
            did,
            command,
            errorCode: lastCmdError,
        });
    }
    return result;
}
exports.convertRegisterRequestToCommands = convertRegisterRequestToCommands;
function updateRegisterLastGetOn(queries, did, registerAddress) {
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
}
exports.updateRegisterLastGetOn = updateRegisterLastGetOn;
//# sourceMappingURL=register.js.map