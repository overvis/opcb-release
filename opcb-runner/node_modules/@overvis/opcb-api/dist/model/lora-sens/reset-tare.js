"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoraSensWeightResetTareStatus = exports.setLoraSensWeightResetTareStatus = exports.RESET_TARE_STATUS = void 0;
var RESET_TARE_STATUS;
(function (RESET_TARE_STATUS) {
    RESET_TARE_STATUS["Idle"] = "idle";
    RESET_TARE_STATUS["Start"] = "start";
    RESET_TARE_STATUS["Complete"] = "complete";
    RESET_TARE_STATUS["Error"] = "error";
})(RESET_TARE_STATUS || (exports.RESET_TARE_STATUS = RESET_TARE_STATUS = {}));
const RESET_TARE_STATUS_COMMAND_MAP = {
    [RESET_TARE_STATUS.Idle]: 0x0000,
    [RESET_TARE_STATUS.Start]: 0x4000,
    [RESET_TARE_STATUS.Complete]: 0x8000,
    [RESET_TARE_STATUS.Error]: 0x0000,
};
function setLoraSensWeightResetTareStatus(queries, did, moduleNumber, status) {
    const command = RESET_TARE_STATUS_COMMAND_MAP[status];
    queries.loraSens.upsertRegisterValue({
        did,
        registerAddress: 6,
        lastGetRequestOn: new Date().getTime() / 1000,
        value: command + moduleNumber + 1,
    });
}
exports.setLoraSensWeightResetTareStatus = setLoraSensWeightResetTareStatus;
function getLoraSensWeightResetTareStatus(queries, did) {
    var _a, _b;
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 2,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    const resetTareStatusRes = queries.loraSens.getRegisterRequest({
        did,
        registerAddress: 2,
    });
    const resetTareStatus = (_a = resetTareStatusRes === null || resetTareStatusRes === void 0 ? void 0 : resetTareStatusRes.set_request_value) !== null && _a !== void 0 ? _a : resetTareStatusRes === null || resetTareStatusRes === void 0 ? void 0 : resetTareStatusRes.last_value;
    const lastUpdatedSec = (resetTareStatusRes === null || resetTareStatusRes === void 0 ? void 0 : resetTareStatusRes.last_updated_on) &&
        Math.floor(Date.now() / 1000) - resetTareStatusRes.last_updated_on;
    if (!resetTareStatus) {
        return {
            status: RESET_TARE_STATUS.Idle,
            lastUpdatedSec,
        };
    }
    let status = RESET_TARE_STATUS.Idle;
    switch ((resetTareStatus >> 10) & 0b111) {
        case 0b000:
            status = RESET_TARE_STATUS.Idle;
            break;
        case 0b001: // 1024
            status = RESET_TARE_STATUS.Start;
            break;
        case 0b011: // 3072
            status = RESET_TARE_STATUS.Complete;
            break;
        default:
            status = RESET_TARE_STATUS.Error;
            break;
    }
    if (status === RESET_TARE_STATUS.Error) {
        const lastCmdError = (_b = queries.loraSens.getRegisterRequest({
            did,
            registerAddress: 6,
        })) === null || _b === void 0 ? void 0 : _b.last_cmd_error;
        return {
            status: RESET_TARE_STATUS.Error,
            lastUpdatedSec,
            lastCmdError,
        };
    }
    return {
        status,
        lastUpdatedSec,
    };
}
exports.getLoraSensWeightResetTareStatus = getLoraSensWeightResetTareStatus;
//# sourceMappingURL=reset-tare.js.map