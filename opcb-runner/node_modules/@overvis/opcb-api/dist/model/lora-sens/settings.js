"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeSettings = exports.readSettings = exports.SETTINGS = void 0;
const register_1 = require("./register");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
exports.SETTINGS = {
    temperatureOffset: {
        registerAddress: 8,
        mapper: "u16",
        multiplier: 0.01,
    },
    humidityOffset: {
        registerAddress: 9,
        mapper: "u16",
        multiplier: 0.1,
    },
    weightModuleState: {
        registerAddress: 51,
        mapper: "u16",
    },
    scanPeriod: {
        registerAddress: 52,
        mapper: "u16",
    },
    tresholdToSend: {
        registerAddress: 53,
        mapper: "u16",
        multiplier: 0.01,
    },
    commands: {
        registerAddress: 50,
        mapper: "u16",
    },
    systemStatus: {
        registerAddress: 2,
        mapper: "u16",
    },
    maxWeightSensor1: {
        registerAddress: 54,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor2: {
        registerAddress: 56,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor3: {
        registerAddress: 58,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor4: {
        registerAddress: 60,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor5: {
        registerAddress: 62,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor6: {
        registerAddress: 64,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor7: {
        registerAddress: 66,
        mapper: "u32",
        multiplier: 0.001,
    },
    maxWeightSensor8: {
        registerAddress: 68,
        mapper: "u32",
        multiplier: 0.001,
    },
};
function readSettings(queries, did, names) {
    const registersValues = queries.loraSens.getRegistersRequests(did);
    const result = {};
    for (const name of names) {
        const settingInfo = exports.SETTINGS[name];
        (0, register_1.updateRegisterLastGetOn)(queries, did, settingInfo.registerAddress);
        const register = registersValues.find((v) => v.register_address === settingInfo.registerAddress);
        let value = (register === null || register === void 0 ? void 0 : register.set_request_value) !== undefined
            ? register === null || register === void 0 ? void 0 : register.set_request_value
            : register === null || register === void 0 ? void 0 : register.last_value;
        if (value !== undefined && settingInfo.mapper === "u32") {
            (0, register_1.updateRegisterLastGetOn)(queries, did, settingInfo.registerAddress + 1);
            const lowRegister = registersValues.find((v) => v.register_address === settingInfo.registerAddress + 1);
            const lowVal = (lowRegister === null || lowRegister === void 0 ? void 0 : lowRegister.set_request_value) !== undefined
                ? lowRegister === null || lowRegister === void 0 ? void 0 : lowRegister.set_request_value
                : lowRegister === null || lowRegister === void 0 ? void 0 : lowRegister.last_value;
            if (lowVal !== undefined) {
                value = opcb_ts_shared_1.MAPPERS.u16s.u32([value, lowVal]);
            }
        }
        result[name] = {
            value: value !== undefined
                ? value * ("multiplier" in settingInfo ? settingInfo.multiplier : 1)
                : undefined,
            lastUpdatedSec: (register === null || register === void 0 ? void 0 : register.last_updated_on) &&
                Math.floor(Date.now() / 1000) - register.last_updated_on,
            lastCmdError: register === null || register === void 0 ? void 0 : register.last_cmd_error,
        };
    }
    return result;
}
exports.readSettings = readSettings;
function writeSettings(queries, did, values) {
    for (const settingName in values) {
        const settingInfo = exports.SETTINGS[settingName];
        const value = values[settingName];
        if (value === undefined)
            continue;
        const clearValue = Math.trunc(value / ("multiplier" in settingInfo ? settingInfo.multiplier : 1));
        if (settingInfo.mapper === "u16") {
            queries.loraSens.upsertRegisterValue({
                did,
                registerAddress: settingInfo.registerAddress,
                lastGetRequestOn: new Date().getTime() / 1000,
                value: clearValue,
            });
        }
        else {
            const [highVal, lowVal] = opcb_ts_shared_1.MAPPERS.u32.u16s(clearValue);
            queries.loraSens.upsertRegisterValue({
                did,
                registerAddress: settingInfo.registerAddress,
                lastGetRequestOn: new Date().getTime() / 1000,
                value: highVal,
            });
            queries.loraSens.upsertRegisterValue({
                did,
                registerAddress: settingInfo.registerAddress + 1,
                lastGetRequestOn: new Date().getTime() / 1000,
                value: lowVal,
            });
        }
    }
}
exports.writeSettings = writeSettings;
//# sourceMappingURL=settings.js.map