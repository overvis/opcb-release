"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLoraSensTeperatureSettings = exports.getLoraSensTemperatureSettings = void 0;
const register_1 = require("./register");
function getLoraSensTemperatureSettings(queries, did, deviceId) {
    var _a;
    // update last_get_request_on for register_address = 8(temperature_offset)
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 8,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    // update last_get_request_on for register_address = 9(humidity_offset)
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 9,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    // select humidity and temperature
    const requests = queries.loraSens.getRegistersRequests(did);
    const temperature = (0, register_1.getRegisterValueAndLastUpdateFromRes)(requests, 8);
    const humidity = (0, register_1.getRegisterValueAndLastUpdateFromRes)(requests, 9);
    // select title
    const title = queries.device.getById(deviceId).title;
    // select update_period_sec from lorasens_devices
    const updatePeriodSec = ((_a = queries.loraSens.getDeviceByDid(did)) === null || _a === void 0 ? void 0 : _a.update_period_sec) || 0;
    return {
        temperatureOffset: {
            value: temperature.value && temperature.value / 100,
            lastUpdatedOnSec: temperature.lastUpdatedOnSec,
        },
        humidityOffset: {
            value: humidity.value && humidity.value / 10,
            lastUpdatedOnSec: humidity.lastUpdatedOnSec,
        },
        title,
        updatePeriodSec,
    };
}
exports.getLoraSensTemperatureSettings = getLoraSensTemperatureSettings;
function setLoraSensTeperatureSettings(queries, did, deviceId, temperatureOffset, humidityOffset, title, updatePeriodSec) {
    // update register_address = 8(temperature_offset)
    temperatureOffset &&
        queries.loraSens.upsertRegisterValue({
            did,
            registerAddress: 8,
            lastGetRequestOn: new Date().getTime() / 1000,
            value: temperatureOffset * 100,
        });
    // update register_address = 9(humidity_offset)
    humidityOffset &&
        queries.loraSens.upsertRegisterValue({
            did,
            registerAddress: 9,
            lastGetRequestOn: new Date().getTime() / 1000,
            value: humidityOffset * 10,
        });
    // update title
    title && queries.device.updateTitle({ title, id: deviceId });
    // update update_period_sec
    updatePeriodSec && queries.loraSens.updateDeviceUpdatePeriodSec({ updatePeriodSec, did });
}
exports.setLoraSensTeperatureSettings = setLoraSensTeperatureSettings;
//# sourceMappingURL=temperature-sensor.js.map