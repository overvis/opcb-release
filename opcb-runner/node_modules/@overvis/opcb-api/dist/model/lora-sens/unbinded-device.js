"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUnbindedDevicesList = void 0;
const sku_1 = require("./sku");
function getUnbindedDevicesList(queries) {
    const devices = queries.loraSens.getUnbindedDevices();
    const result = [];
    for (const device of devices) {
        const loraDevice = queries.loraSens.getDeviceByDid(device.old_did);
        const oldBindedDevice = loraDevice && queries.device.getById(loraDevice.device_id);
        result.push({
            did: device.did.toString(),
            sku: (0, sku_1.deductLoraSku)(device.device_kind_code),
            lastConnectionOn: device.rx_last_on || undefined,
            acceptedOn: device.bind_started_on,
            signalLevelRxdBm: device.rx_signal,
            rxLastOn: device.rx_last_on,
            connectionParameters: {
                frequencyDeviceKhz: device.frequency_device_khz,
                frequencyGatewayKhz: device.frequency_gateway_khz,
                // TODO_FUTURE: refactor gateway to always store bandwidthKhz as Number
                bandwidthKhz: Number.isNaN(Number(device.bandwidth_khz))
                    ? 0
                    : Number(device.bandwidth_khz),
                spreadFactor: device.spreading_factor,
                codingRateBits: device.coding_rate_bits,
            },
            deviceKindCode: device.device_kind_code,
            firmwareVersion: device.firmware_version,
            alreadyBindedDeviceTitle: oldBindedDevice === null || oldBindedDevice === void 0 ? void 0 : oldBindedDevice.title,
        });
    }
    return result;
}
exports.getUnbindedDevicesList = getUnbindedDevicesList;
//# sourceMappingURL=unbinded-device.js.map