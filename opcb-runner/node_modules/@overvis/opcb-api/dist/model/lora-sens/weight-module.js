"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setWeightModuleState = exports.getWeightModules = void 0;
const readings_1 = require("./readings");
const settings_1 = require("./settings");
function getWeightModules(queries, deviceId) {
    const device = queries.loraSens.getDeviceByDeviceId(deviceId);
    if (!device) {
        return [];
    }
    queries.loraSens.upsertRegLastGetRequestOn({
        did: device.did,
        registerAddress: settings_1.SETTINGS.weightModuleState.registerAddress,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    // select modules enabled state
    const enebaledStateRes = queries.loraSens.getRegisterRequest({
        did: device.did,
        registerAddress: settings_1.SETTINGS.weightModuleState.registerAddress,
    });
    const setValue = enebaledStateRes === null || enebaledStateRes === void 0 ? void 0 : enebaledStateRes.set_request_value;
    const lastValue = enebaledStateRes === null || enebaledStateRes === void 0 ? void 0 : enebaledStateRes.last_value;
    // select weight values
    const weightValues = (0, readings_1.getLastReadings)(queries, deviceId, [
        "moduleWeight1",
        "moduleWeight2",
        "moduleWeight3",
        "moduleWeight4",
        "moduleWeight5",
        "moduleWeight6",
        "moduleWeight7",
        "moduleWeight8",
    ]);
    // prepare result
    const result = [];
    for (const bitPosition of [0, 1, 2, 3, 4, 5, 6, 7]) {
        const setValueBit = setValue !== undefined ? setValue & (1 << bitPosition) : undefined;
        const lastValueBit = lastValue !== undefined ? lastValue & (1 << bitPosition) : undefined;
        let state = "off";
        if (setValue !== undefined && setValueBit !== lastValueBit) {
            state = "processing";
        }
        else if (lastValueBit) {
            state = "on";
        }
        else {
            state = "off";
        }
        const weight = weightValues.find((v) => v.id === `weight_${bitPosition + 1}_g`);
        result.push({
            moduleNumber: bitPosition,
            weight: (weight === null || weight === void 0 ? void 0 : weight.value) ? parseFloat(weight.value) : undefined,
            moduleError: weight === null || weight === void 0 ? void 0 : weight.error,
            state,
            deviceId,
            did: device.did,
        });
    }
    return result;
}
exports.getWeightModules = getWeightModules;
function setWeightModuleState(queries, did, moduleNumber, isEnabled) {
    var _a, _b;
    if (![0, 1, 2, 3, 4, 5, 6, 7].includes(moduleNumber)) {
        return;
    }
    const currentEnabledStateRes = queries.loraSens.getRegisterRequest({
        did,
        registerAddress: settings_1.SETTINGS.weightModuleState.registerAddress,
    });
    const currentEnabledState = (_b = (_a = currentEnabledStateRes === null || currentEnabledStateRes === void 0 ? void 0 : currentEnabledStateRes.set_request_value) !== null && _a !== void 0 ? _a : currentEnabledStateRes === null || currentEnabledStateRes === void 0 ? void 0 : currentEnabledStateRes.last_value) !== null && _b !== void 0 ? _b : 0;
    // update register_address = 8(modules enabled)
    queries.loraSens.upsertRegisterValue({
        did,
        registerAddress: settings_1.SETTINGS.weightModuleState.registerAddress,
        lastGetRequestOn: new Date().getTime() / 1000,
        value: isEnabled
            ? currentEnabledState | (1 << moduleNumber)
            : currentEnabledState & ~(1 << moduleNumber),
    });
}
exports.setWeightModuleState = setWeightModuleState;
//# sourceMappingURL=weight-module.js.map