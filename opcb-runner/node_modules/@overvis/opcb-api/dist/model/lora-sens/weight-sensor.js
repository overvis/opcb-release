"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLoraSensWeightModuleState = exports.getLoraSensWeightModules = exports.setLoraSensWeightSettings = exports.getLoraSensWeightSettings = void 0;
const register_1 = require("./register");
const param_1 = require("./param");
const sku_1 = require("./sku");
function getLoraSensWeightSettings(queries, did, deviceId) {
    var _a;
    // update last_get_request_on for register_address = 9(scan_period)
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 9,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    // update last_get_request_on for register_address = 10(treshold_to_send)
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 10,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    // select scan_period and treshold_to_send
    const requests = queries.loraSens.getRegistersRequests(did);
    const scanPeriod = (0, register_1.getRegisterValueAndLastUpdateFromRes)(requests, 9);
    const tresholdToSend = (0, register_1.getRegisterValueAndLastUpdateFromRes)(requests, 10);
    // select title
    const title = queries.device.getById(deviceId).title;
    // select update_period_sec from lorasens_devices
    const updatePeriodSec = ((_a = queries.loraSens.getDeviceByDid(did)) === null || _a === void 0 ? void 0 : _a.update_period_sec) || 0;
    return {
        scanPeriod: {
            value: scanPeriod.value,
            lastUpdatedOnSec: scanPeriod.lastUpdatedOnSec,
        },
        tresholdToSendKg: {
            value: tresholdToSend.value && tresholdToSend.value / 100,
            lastUpdatedOnSec: tresholdToSend.lastUpdatedOnSec,
        },
        title,
        updatePeriodSec,
    };
}
exports.getLoraSensWeightSettings = getLoraSensWeightSettings;
function setLoraSensWeightSettings(queries, did, deviceId, scanPeriod, tresholdToSendKg, title, updatePeriodSec) {
    // update register_address = 9(scan_period)
    scanPeriod &&
        queries.loraSens.upsertRegisterValue({
            did,
            registerAddress: 9,
            lastGetRequestOn: new Date().getTime() / 1000,
            value: scanPeriod,
        });
    // update register_address = 10(treshold_to_send)
    tresholdToSendKg &&
        queries.loraSens.upsertRegisterValue({
            did,
            registerAddress: 10,
            lastGetRequestOn: new Date().getTime() / 1000,
            value: Math.round(tresholdToSendKg * 100),
        });
    // update title
    title && queries.device.updateTitle({ title, id: deviceId });
    // update update_period_sec
    updatePeriodSec && queries.loraSens.updateDeviceUpdatePeriodSec({ updatePeriodSec, did });
}
exports.setLoraSensWeightSettings = setLoraSensWeightSettings;
const WEIGHT_MODULE_ENABLED_BIT_POSITIONS = [0, 1, 2, 3, 4, 5, 6, 7];
function getLoraSensWeightModules(queries, did, deviceId) {
    queries.loraSens.upsertRegLastGetRequestOn({
        did,
        registerAddress: 8,
        lastGetRequestOn: new Date().getTime() / 1000,
    });
    // select modules enabled state
    const enebaledStateRes = queries.loraSens.getRegisterRequest({
        did,
        registerAddress: 8,
    });
    const setValue = enebaledStateRes === null || enebaledStateRes === void 0 ? void 0 : enebaledStateRes.set_request_value;
    const lastValue = enebaledStateRes === null || enebaledStateRes === void 0 ? void 0 : enebaledStateRes.last_value;
    // select weight values
    const weightValues = (0, param_1.getLoraSensParamLastResults)(queries, deviceId, sku_1.LoraSensSku.Weight);
    // prepare result
    const result = [];
    for (const bitPosition of WEIGHT_MODULE_ENABLED_BIT_POSITIONS) {
        const setValueBit = setValue !== undefined ? setValue & (1 << bitPosition) : undefined;
        const lastValueBit = lastValue !== undefined ? lastValue & (1 << bitPosition) : undefined;
        let state = "off";
        if (setValue !== undefined && setValueBit !== lastValueBit) {
            state = "processing";
        }
        else if (lastValueBit) {
            state = "on";
        }
        else {
            state = "off";
        }
        const weight = weightValues.find((v) => v.id === (27 + bitPosition).toString());
        result.push({
            moduleNumber: bitPosition,
            weight: (weight === null || weight === void 0 ? void 0 : weight.value) ? parseFloat(weight.value) : undefined,
            moduleError: weight === null || weight === void 0 ? void 0 : weight.error,
            state,
            deviceId,
            did,
        });
    }
    return result;
}
exports.getLoraSensWeightModules = getLoraSensWeightModules;
function setLoraSensWeightModuleState(queries, did, moduleNumber, isEnabled) {
    var _a;
    if (!WEIGHT_MODULE_ENABLED_BIT_POSITIONS.includes(moduleNumber)) {
        throw new Error("Invalid module number");
    }
    const currentEnabledStateRes = queries.loraSens.getRegisterRequest({
        did,
        registerAddress: 8,
    });
    const currentEnabledState = ((_a = currentEnabledStateRes === null || currentEnabledStateRes === void 0 ? void 0 : currentEnabledStateRes.set_request_value) !== null && _a !== void 0 ? _a : currentEnabledStateRes === null || currentEnabledStateRes === void 0 ? void 0 : currentEnabledStateRes.last_value) || 1;
    // update register_address = 8(modules enabled)
    queries.loraSens.upsertRegisterValue({
        did,
        registerAddress: 8,
        lastGetRequestOn: new Date().getTime() / 1000,
        value: isEnabled
            ? currentEnabledState | (1 << moduleNumber)
            : currentEnabledState & ~(1 << moduleNumber),
    });
}
exports.setLoraSensWeightModuleState = setLoraSensWeightModuleState;
//# sourceMappingURL=weight-sensor.js.map