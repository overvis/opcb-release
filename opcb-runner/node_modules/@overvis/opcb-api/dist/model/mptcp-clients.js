"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = exports.update = exports.create = exports.list = exports.UPDATE_ITEM_SCHEMA = exports.CREATE_ITEM_SCHEMA = exports.LIST_ITEM_SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const conf_crud_1 = require("./conf-crud");
exports.LIST_ITEM_SCHEMA = opcb_ts_shared_1.MBTCP_CLIENT_ITEM_SCHEMA;
function toListItem(rec) {
    return {
        ip: rec["remoteServer:ip"],
        port: parseInt(rec["remoteServer:port"]),
        interface: rec.interface,
        isEnabled: rec.isEnabled === "true",
        uidRange: rec.uidRange,
        parallelRequestsNum: parseInt(rec.parallelRequestsNum),
        reconnectionPeriodSec: parseInt(rec.reconnectionPeriodSec),
        responseTimeoutMs: parseInt(rec.responseTimeoutMs),
    };
}
exports.CREATE_ITEM_SCHEMA = opcb_ts_shared_1.MBTCP_CLIENT_ITEM_SCHEMA;
function fromCreateItem(item) {
    return {
        "remoteServer:ip": item.ip,
        "remoteServer:port": item.port.toString(),
        interface: item.interface,
        isEnabled: item.isEnabled.toString(),
        uidRange: item.uidRange,
        parallelRequestsNum: item.parallelRequestsNum.toString(),
        reconnectionPeriodSec: item.reconnectionPeriodSec.toString(),
        responseTimeoutMs: item.responseTimeoutMs.toString(),
        broadcastIsEnabled: "false",
    };
}
exports.UPDATE_ITEM_SCHEMA = opcb_ts_shared_1.MBTCP_CLIENT_ITEM_SCHEMA;
function fromUpdateItem(item) {
    return fromCreateItem(item);
}
_a = (0, conf_crud_1.createConfCrud)("modbusTcpClients", ["remoteServer:ip", "remoteServer:port"], toListItem, fromCreateItem, fromUpdateItem), exports.list = _a.list, exports.create = _a.create, exports.update = _a.update, exports.remove = _a.remove;
//# sourceMappingURL=mptcp-clients.js.map