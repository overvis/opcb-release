"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.changePassword = exports.remove = exports.update = exports.create = exports.list = exports.UPDATE_ITEM_SCHEMA = exports.CREATE_ITEM_SCHEMA = exports.LIST_ITEM_SCHEMA = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const typebox_1 = require("@sinclair/typebox");
const conf_crud_1 = require("./conf-crud");
exports.LIST_ITEM_SCHEMA = opcb_ts_shared_1.USER_ITEM_SCHEMA;
function toListItem(rec) {
    return {
        username: rec.username,
        allowModbus: rec.allowAuthThroughModbus === "true",
        allowApi: rec.allowAuthThroughApi === "true",
        level: {
            configuration: rec.configurationAccess,
            connectedDevices: rec.modbusDevicesAccess,
        },
    };
}
exports.CREATE_ITEM_SCHEMA = typebox_1.Type.Object({
    username: typebox_1.Type.String({ minLength: 3, maxLength: 30 }),
    password: typebox_1.Type.String({ minLength: 3, maxLength: 30 }),
});
function fromCreateItem(item) {
    return {
        username: item.username,
        password: item.password,
        allowAuthThroughModbus: "true",
        allowAuthThroughApi: "true",
        configurationAccess: "readWrite",
        modbusDevicesAccess: "readWrite",
        encryptedPassword: null,
    };
}
exports.UPDATE_ITEM_SCHEMA = typebox_1.Type.Object({
    allowModbus: typebox_1.Type.Boolean(),
    allowApi: typebox_1.Type.Boolean(),
    level: typebox_1.Type.Object({
        configuration: opcb_ts_shared_1.ACCESS_LEVEL_SCHEMA,
        connectedDevices: opcb_ts_shared_1.ACCESS_LEVEL_SCHEMA,
    }),
});
function fromUpdateItem(item) {
    return {
        allowAuthThroughModbus: item.allowModbus ? "true" : "false",
        allowAuthThroughApi: item.allowApi ? "true" : "false",
        configurationAccess: item.level.configuration,
        modbusDevicesAccess: item.level.connectedDevices,
    };
}
_a = (0, conf_crud_1.simpleKeyed)("username", (0, conf_crud_1.createConfCrud)("auth:users", ["username"], toListItem, fromCreateItem, fromUpdateItem, [
    "password",
])), exports.list = _a.list, exports.create = _a.create, exports.update = _a.update, exports.remove = _a.remove;
const changePassword = async (bus, username, password) => {
    return (0, conf_crud_1.update)(bus, "auth:users", { username }, {
        password,
        encryptedPassword: null,
    });
};
exports.changePassword = changePassword;
//# sourceMappingURL=users.js.map