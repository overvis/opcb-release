"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setRoutes = void 0;
const tslib_1 = require("tslib");
const busLogWs = tslib_1.__importStar(require("./endpoints/bus-log-ws"));
const confGet = tslib_1.__importStar(require("./endpoints/conf-get"));
const confReset = tslib_1.__importStar(require("./endpoints/conf-reset"));
const confSet = tslib_1.__importStar(require("./endpoints/conf-set"));
const listNetifs = tslib_1.__importStar(require("./endpoints/list-netifs"));
const listTtys = tslib_1.__importStar(require("./endpoints/list-ttys"));
const listWifiAps = tslib_1.__importStar(require("./endpoints/list-wifi-aps"));
const login = tslib_1.__importStar(require("./endpoints/login"));
const logout = tslib_1.__importStar(require("./endpoints/logout"));
const mfFinalize = tslib_1.__importStar(require("./endpoints/mf-finalize"));
const mfRegister = tslib_1.__importStar(require("./endpoints/mf-register"));
const mfRestore = tslib_1.__importStar(require("./endpoints/mf-restore"));
const modbusFreeRanges = tslib_1.__importStar(require("./endpoints/modbus-free-ranges"));
const modbusSendReq = tslib_1.__importStar(require("./endpoints/modbus-send-req"));
const overvisDropConnection = tslib_1.__importStar(require("./endpoints/overvis-drop-connection"));
const overvisUnbind = tslib_1.__importStar(require("./endpoints/overvis-unbind"));
const reboot = tslib_1.__importStar(require("./endpoints/reboot"));
const restart = tslib_1.__importStar(require("./endpoints/restart"));
const rs485 = tslib_1.__importStar(require("./endpoints/rs485"));
const setTime = tslib_1.__importStar(require("./endpoints/set-time"));
const stateGet = tslib_1.__importStar(require("./endpoints/state-get"));
const streamLogWs = tslib_1.__importStar(require("./endpoints/stream-log-ws"));
const testsAbort = tslib_1.__importStar(require("./endpoints/tests-abort"));
const testsCheck = tslib_1.__importStar(require("./endpoints/tests-check"));
const testsRun = tslib_1.__importStar(require("./endpoints/tests-run"));
const users = tslib_1.__importStar(require("./endpoints/users"));
const version = tslib_1.__importStar(require("./endpoints/version"));
const ocpDigest = tslib_1.__importStar(require("./endpoints/ocp-digest"));
const connectOcpAccount = tslib_1.__importStar(require("./endpoints/connect-ocp-account"));
const mbtcpClients = tslib_1.__importStar(require("./endpoints/mbtcp-clients"));
const runUpgrade = tslib_1.__importStar(require("./endpoints/run-upgrade"));
const confirmLastUpgradeNotice = tslib_1.__importStar(require("./endpoints/confirm-last-upgrade-notice"));
const tasksGet = tslib_1.__importStar(require("./endpoints/tasks-get"));
const tasksGetFiles = tslib_1.__importStar(require("./endpoints/tasks-get-files"));
const taskCreate = tslib_1.__importStar(require("./endpoints/task-create"));
const taskGetRuns = tslib_1.__importStar(require("./endpoints/task-get-runs"));
const taskRun = tslib_1.__importStar(require("./endpoints/task-run"));
const taskStop = tslib_1.__importStar(require("./endpoints/task-stop"));
const taskRemove = tslib_1.__importStar(require("./endpoints/task-remove"));
const taskUpdate = tslib_1.__importStar(require("./endpoints/task-update"));
const tasksRecompile = tslib_1.__importStar(require("./endpoints/tasks-recompile"));
const tasksInit = tslib_1.__importStar(require("./endpoints/tasks-init"));
// import * as taskLog from "./endpoints/task-log";
function setRoutes(s) {
    s.get("/version/", { schema: version.SCHEMA }, version.handler);
    s.get("/ocp-digest/", { schema: ocpDigest.SCHEMA }, ocpDigest.handler);
    s.post("/connect-ocp-account/", { schema: connectOcpAccount.SCHEMA }, connectOcpAccount.handler);
    s.post("/login/", { schema: login.SCHEMA }, login.handler);
    s.post("/logout/", { schema: logout.SCHEMA }, logout.handler);
    s.get("/state/", { schema: stateGet.SCHEMA }, stateGet.handler);
    s.get("/confs/", { schema: confGet.SCHEMA }, confGet.handler);
    s.post("/confs/set/", { schema: confSet.SCHEMA }, confSet.handler);
    s.post("/confs/reset/", { schema: confReset.SCHEMA }, confReset.handler);
    s.get("/list/ttys/", { schema: listTtys.SCHEMA }, listTtys.handler);
    s.get("/list/netifs/", { schema: listNetifs.SCHEMA }, listNetifs.handler);
    s.get("/list/wifi-aps/", { schema: listWifiAps.SCHEMA }, listWifiAps.handler);
    s.post("/overvis/drop-connection/", { schema: overvisDropConnection.SCHEMA }, overvisDropConnection.handler);
    s.post("/overvis/unbind/", { schema: overvisUnbind.SCHEMA }, overvisUnbind.handler);
    s.post("/restart/", { schema: restart.SCHEMA }, restart.handler);
    s.post("/reboot/", { schema: reboot.SCHEMA }, reboot.handler);
    s.post("/modbus/send-request/", { schema: modbusSendReq.SCHEMA }, modbusSendReq.handler);
    s.post("/manufacture/register/", { schema: mfRegister.SCHEMA }, mfRegister.handler);
    s.post("/manufacture/restore/", { schema: mfRestore.SCHEMA }, mfRestore.handler);
    s.post("/manufacture/finalize/", { schema: mfFinalize.SCHEMA }, mfFinalize.handler);
    s.post("/manufacture/tests/run/", { schema: testsRun.SCHEMA }, testsRun.handler);
    s.get("/manufacture/tests/check/", { schema: testsCheck.SCHEMA }, testsCheck.handler);
    s.post("/manufacture/tests/abort/", { schema: testsAbort.SCHEMA }, testsAbort.handler);
    s.get("/users/", { schema: users.LIST_SCHEMA }, users.list);
    s.post("/users/create/", { schema: users.CREATE_SCHEMA }, users.create);
    s.post("/user/:username/update/", { schema: users.UPDATE_SCHEMA }, users.update);
    s.post("/user/:username/change-password/", { schema: users.CHANGE_PASSWORD_SCHEMA }, users.changePasword);
    s.post("/user/:username/remove/", { schema: users.REMOVE_SCHEMA }, users.remove);
    s.get("/modbus/free-ranges/", { schema: modbusFreeRanges.LIST_SCHEMA }, modbusFreeRanges.list);
    s.post("/modbus/free-ranges/create/", { schema: modbusFreeRanges.CREATE_SCHEMA }, modbusFreeRanges.create);
    s.post("/modbus/free-range/:deviceFunction/:range/remove/", { schema: modbusFreeRanges.REMOVE_SCHEMA }, modbusFreeRanges.remove);
    s.post("/set-time/", { schema: setTime.SCHEMA }, setTime.handler);
    s.get("/rs485-connections/", { schema: rs485.LIST_SCHEMA }, rs485.list);
    s.post("/rs485-connections/create/", { schema: rs485.CREATE_SCHEMA }, rs485.create);
    s.post("/rs485-connection/:deviceName/update/", { schema: rs485.UPDATE_SCHEMA }, rs485.update);
    s.post("/rs485-connection/:deviceName/remove/", { schema: rs485.REMOVE_SCHEMA }, rs485.remove);
    s.get("/mbtcp-clients/", { schema: mbtcpClients.LIST_SCHEMA }, mbtcpClients.list);
    s.post("/mbtcp-clients/create/", { schema: mbtcpClients.CREATE_SCHEMA }, mbtcpClients.create);
    s.post("/mbtcp-client/:ip-:port/update/", { schema: mbtcpClients.UPDATE_SCHEMA }, mbtcpClients.update);
    s.post("/mbtcp-client/:ip-:port/remove/", { schema: mbtcpClients.REMOVE_SCHEMA }, mbtcpClients.remove);
    s.post("/run-upgrade/", { schema: runUpgrade.SCHEMA }, runUpgrade.handler);
    s.get("/log/bus/", { websocket: true }, busLogWs.handler);
    s.get("/log/stream/:streamName/", { websocket: true }, streamLogWs.handler);
    s.post("/confirm-last-upgrade-notice/", { schema: confirmLastUpgradeNotice.SCHEMA }, confirmLastUpgradeNotice.handler);
    s.post("/init-tasks/", { schema: tasksInit.SCHEMA }, tasksInit.handler);
    s.get("/tasks/", { schema: tasksGet.SCHEMA }, tasksGet.handler);
    s.get("/tasks/files/", { schema: tasksGetFiles.SCHEMA }, tasksGetFiles.handler);
    s.post("/tasks/create/", { schema: taskCreate.SCHEMA }, taskCreate.handler);
    s.get("/tasks/:id/runs/", { schema: taskGetRuns.SCHEMA }, taskGetRuns.handler);
    s.post("/tasks/:id/run/", { schema: taskRun.SCHEMA }, taskRun.handler);
    s.post("/tasks/:id/stop/", { schema: taskStop.SCHEMA }, taskStop.handler);
    s.post("/tasks/:id/remove/", { schema: taskRemove.SCHEMA }, taskRemove.handler);
    s.post("/tasks/:id/update/", { schema: taskUpdate.SCHEMA }, taskUpdate.handler);
    s.post("/tasks/recompile/", { schema: tasksRecompile.SCHEMA }, tasksRecompile.handler);
    // s.get("/tasks/:id/log/", { websocket: true, schema: taskLog.SCHEMA }, taskLog.handler);
}
exports.setRoutes = setRoutes;
//# sourceMappingURL=routes.js.map