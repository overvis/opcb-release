"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setFactorySettings = exports.mergeUserConfUponFactoryConf = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const util_1 = require("util");
const _1 = require(".");
const validate_1 = require("./validate");
const write_1 = require("./write");
function mergeUserConfUponFactoryConf(factoryConfig, userConfig, path = "") {
    let changed = false;
    for (const key in userConfig) {
        const userValue = userConfig[key];
        if (key in factoryConfig && factoryConfig[key] !== userValue) {
            if (typeof factoryConfig[key] === "object" &&
                typeof userValue === "object" &&
                !Array.isArray(userValue)) {
                changed = mergeUserConfUponFactoryConf(factoryConfig[key], userValue, path + "/" + key);
            }
            else if (userValue !== null && userValue !== undefined) {
                factoryConfig[key] = userValue;
            }
            else {
                _1.logger.warn(`Taking from factory config: ${path} = ${(0, util_1.inspect)(factoryConfig[key])}`);
                changed = true;
            }
        }
        else {
            factoryConfig[key] = userValue;
        }
    }
    return changed;
}
exports.mergeUserConfUponFactoryConf = mergeUserConfUponFactoryConf;
async function setFactorySettings(factoryConfigFile, changes) {
    _1.logger.info("Storing changes as factory config.");
    let factoryConfStr;
    if ("path" in factoryConfigFile) {
        factoryConfStr = await fs.promises.readFile(factoryConfigFile.path, "utf8");
    }
    else {
        factoryConfStr = factoryConfigFile.contents;
    }
    const factoryConfig = JSON.parse(factoryConfStr);
    const res = (0, validate_1.changeConfig)(factoryConfig, changes);
    if (res.status !== "ok") {
        throw new Error("Failed to validate factory config after changing.");
    }
    await (0, write_1.saveConfigToFile)(factoryConfig, factoryConfigFile);
}
exports.setFactorySettings = setFactorySettings;
//# sourceMappingURL=factory.js.map