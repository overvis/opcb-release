"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResetConfigHandler = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const __1 = require("..");
const encrypt_1 = require("../encrypt");
const logic_1 = require("../logic");
const manufacturer_1 = require("../manufacturer");
const static_1 = require("../static");
const utils_1 = require("../utils");
const write_1 = require("../write");
function createResetConfigHandler(bus, state, factoryConfigFile, configFile, manufacturerFile) {
    return async () => {
        __1.logger.debug("Received config reset request.");
        // take factory config as the default
        let configJson;
        if ("path" in factoryConfigFile) {
            __1.logger.info(`Reading factory config from ${factoryConfigFile.path}`);
            configJson = (await (0, utils_1.loadConfigFile)(factoryConfigFile.path));
        }
        else {
            __1.logger.info(`Reading factory config from provided string.`);
            configJson = JSON.parse(factoryConfigFile.contents);
        }
        // apply default values from the schema on top
        (0, logic_1.applyDefaultConfigValues)(configJson, opcb_ts_shared_1.CONFIG_SCHEMA);
        const config = configJson;
        await (0, encrypt_1.encryptPasswordsInConfigFile)(config);
        // write config to file
        await (0, write_1.saveConfigToFile)(config, configFile);
        // update config and routing in redis
        state.config = config;
        await bus.setConfs((0, logic_1.flattenConfig)(config));
        // read manufacturer file
        const manufacturer = await (0, manufacturer_1.readManufacturerLicenseFile)(manufacturerFile);
        // set state
        const stateChange = (0, static_1.getStaticInfo)(manufacturer);
        // calculate and set routing
        const routes = (0, logic_1.calculateRouting)(state.config);
        await bus.setState(Object.assign(stateChange, routes, {
            boundToOcpServer: state.config.overvisVpn.boundToOcpServer,
        }));
        // run sync
        await bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncConfig());
        await bus.sendMsg(new opcb_ts_shared_1.redisCmd.SyncRouting());
        return new opcb_ts_shared_1.redisCmd.Done();
    };
}
exports.createResetConfigHandler = createResetConfigHandler;
//# sourceMappingURL=reset-config.js.map