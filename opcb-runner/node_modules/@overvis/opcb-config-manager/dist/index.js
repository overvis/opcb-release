"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.logger = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const encrypt_1 = require("./encrypt");
const handlers = tslib_1.__importStar(require("./handlers"));
const logic_1 = require("./logic");
const manufacturer_1 = require("./manufacturer");
const readconf_1 = require("./readconf");
const static_1 = require("./static");
const better_sqlite3_1 = tslib_1.__importDefault(require("better-sqlite3"));
const db_1 = require("./db");
async function run(setLogger, runConf) {
    exports.logger = setLogger;
    exports.logger.info("Starting...");
    const db = (0, better_sqlite3_1.default)(runConf.sqliteDbPath, {
        nativeBinding: runConf.sqliteLibDir + "/better_sqlite3.node",
    });
    db.loadExtension(runConf.sqliteLibDir + "/uuid.so");
    (0, db_1.migrateDb)(db, runConf.dbMigrationsDir);
    // initializing bus
    const bus = new opcb_ts_shared_1.RedisBus(runConf.redisConnectString, "CFG", exports.logger);
    // read config
    const [opcbConfig, validate] = await (0, readconf_1.readConfigFile)(runConf.configFile, runConf.factoryConfigFile);
    await (0, encrypt_1.encryptPasswordsInConfigFile)(opcbConfig, runConf.configFile);
    // populate config
    const flatconf = (0, logic_1.flattenConfig)(opcbConfig);
    await bus.setConfs({ "*": null });
    await bus.setConfs(flatconf);
    // read manufacturer file
    const manufacturer = await (0, manufacturer_1.readManufacturerLicenseFile)(runConf.manufacturerFile);
    // set state
    const stateChange = (0, static_1.getStaticInfo)(manufacturer);
    // calculate and set routing
    const routes = (0, logic_1.calculateRouting)(opcbConfig);
    await bus.setState(Object.assign(stateChange, routes, {
        boundToOcpServer: opcbConfig.overvisVpn.boundToOcpServer,
        lastRunVersion: opcbConfig.global.lastRunVersion,
        "overvisRc:mac": opcbConfig.elan.mac || undefined,
        "release:model": opcbConfig.global.model,
        "release:modelName": opcbConfig.global.modelName,
        "virtualDevice:uid": opcbConfig.virtualDevice.uid,
        "virtualDevice:isEnabled": opcbConfig.virtualDevice.isEnabled,
    }));
    // subscribe to config-related events in bus
    const state = { config: opcbConfig };
    bus.registerRequestHandler("set-config", handlers.createSetConfigHandler(bus, state, validate, runConf.configFile, runConf.factoryConfigFile));
    bus.registerRequestHandler("reset-config", handlers.createResetConfigHandler(bus, state, runConf.factoryConfigFile, runConf.configFile, runConf.manufacturerFile));
    // TODO_FUTURE: write last known version to config, it will run sync
    // run sync
    await bus.sendMsg(new opcb_ts_shared_1.redisBus.SyncConfig());
    await bus.sendMsg(new opcb_ts_shared_1.redisBus.SyncRouting());
    // wait for config changes from redis stream
    exports.logger.info("Started. Listening to the stream...");
    return [bus.listenCmdStreamForever(runConf.testMode), () => bus.abortListen()];
}
exports.run = run;
//# sourceMappingURL=index.js.map