"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setConfig = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const _1 = require(".");
const encrypt_1 = require("./encrypt");
const factory_1 = require("./factory");
const logic_1 = require("./logic");
const validate_1 = require("./validate");
const write_1 = require("./write");
async function setConfig({ bus, state, values, validate, validateOnly, configFile, factoryConfigFile, setAsFactoryValue, sendSync, updateState, }) {
    if (!validateOnly) {
        _1.logger.debug("Received config change request.");
    }
    else {
        _1.logger.debug("Received config validation request.");
    }
    // clone config from state
    const config = JSON.parse(JSON.stringify(state.config));
    // validate
    let changes = Object.assign({}, values);
    const validationResult = (0, validate_1.validateConfigChanges)(config, changes, validate);
    if (validateOnly) {
        return validationResult;
    }
    if (validationResult.status !== "ok") {
        _1.logger.warn(`Config change request failed validation: ${JSON.stringify(validationResult)}`);
        return validationResult;
    }
    const passwordChanges = await (0, encrypt_1.encryptPasswordsInConfigFile)(config);
    (0, opcb_ts_shared_1.setSentryContext)({
        pinCode: config.overvisVpn.pinCode || "no pin",
        mac: config.elan.mac || "unknown mac",
    });
    // write config to file
    _1.logger.info("Writing config to file.");
    await (0, write_1.saveConfigToFile)(config, configFile);
    // storing factory config if needed
    if (setAsFactoryValue && factoryConfigFile) {
        await (0, factory_1.setFactorySettings)(factoryConfigFile, changes);
    }
    // update config in redis
    state.config = config;
    _1.logger.info(changes, `Updating config in bus.`);
    changes = { ...changes, ...passwordChanges };
    await bus.setConfs(changes);
    // updating state in redis
    if (updateState) {
        await bus.setState((0, logic_1.calculateRouting)(config));
        if (changes["overvisVpn:boundToOcpServer"] !== undefined) {
            await bus.setState({
                boundToOcpServer: state.config.overvisVpn.boundToOcpServer,
            });
        }
        await bus.setState({
            "overvisRc:mac": config.elan.mac || undefined,
        });
    }
    // run sync
    if (sendSync) {
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.SyncConfig());
        // TODO_FUTURE: don't invoke sync routing if not changed
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.SyncRouting());
    }
    return validationResult;
}
exports.setConfig = setConfig;
//# sourceMappingURL=setconf.js.map