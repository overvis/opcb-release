"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const pino_1 = tslib_1.__importDefault(require("pino"));
const opcbConfigManager = tslib_1.__importStar(require("."));
let logger;
async function start() {
    logger = (0, pino_1.default)({
        level: "info",
        transport: {
            target: "pino-pretty",
        },
    });
    logger.info("Start config manager in test mode.");
    let configFilePath = "../localdev/opcb/user/config.json";
    if (process.argv[3]) {
        // set path to test config
        configFilePath = process.argv[3];
    }
    const redisClient = new opcb_ts_shared_1.RedisClient("redis://127.0.0.1:6379/0", logger.child({ module: "RDC" }));
    await opcbConfigManager.run(logger, {
        redisClient: redisClient.getActorClient("CFG"),
        manufacturerFile: { path: "../localdev/opcb/user/MANUFACTURER_LICENSE" },
        configFile: { path: configFilePath },
        factoryConfigFile: { path: "../localdev/opcb/user/factory-config.json" },
    });
    return redisClient.listenCmdStreamForever();
}
exports.start = start;
start().catch((e) => {
    if (logger) {
        logger.fatal(e);
    }
    else {
        // eslint-disable-next-line no-console
        console.error(e);
    }
    setTimeout(() => process.exit(1), 1000);
});
//# sourceMappingURL=start.js.map