"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const utils_1 = require("./utils");
describe("config manager", function () {
    it("should correctly set array parameters 1", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.getConfs(["modbusRs485:0:baudRate"]))["modbusRs485:0:baudRate"]).toBe("9600");
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({ "modbusRs485:0:baudRate": "4800" })))
            .status).toBe("ok");
        expect((await bus.getConfs(["modbusRs485:0:baudRate"]))["modbusRs485:0:baudRate"]).toBe("4800");
        expect(lodash_1.default.get(JSON.parse(config.contents), "modbusRs485.0.baudRate")).toEqual(4800);
        // incorrect value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "modbusRs485:0:baudRate": "123",
        }))).status).toEqual({
            code: opcb_ts_shared_1.redisCmd.ConfigValidationErrorCode.IncorrectValue,
            key: "modbusRs485:0:baudRate",
        });
        expect((await bus.getConfs(["modbusRs485:0:baudRate"]))["modbusRs485:0:baudRate"]).toBe("4800");
        expect(lodash_1.default.get(JSON.parse(config.contents), "modbusRs485.0.baudRate")).toEqual(4800);
        stop();
    });
    it("should correctly set array parameters 2", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.getConfs(["modbusRs485:0:deviceName"]))["modbusRs485:0:deviceName"]).toBe("ttyUSB0");
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({ "modbusRs485:0:deviceName": "asdf" })))
            .status).toBe("ok");
        expect((await bus.getConfs(["modbusRs485:0:deviceName"]))["modbusRs485:0:deviceName"]).toBe("asdf");
        expect(lodash_1.default.get(JSON.parse(config.contents), "modbusRs485.0.deviceName")).toEqual("asdf");
        stop();
    });
    it("should correctly add item to the array", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.getConfs(["auth:freeAccessRequests:0:device"]))["auth:freeAccessRequests:0:device"]).toBeUndefined();
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "auth:freeAccessRequests:0:device": "1",
            "auth:freeAccessRequests:0:function": "3",
            "auth:freeAccessRequests:0:registersRange": "0-125,2222-3333",
        }))).status).toBe("ok");
        expect((await bus.getConfs(["auth:freeAccessRequests:0:device"]))["auth:freeAccessRequests:0:device"]).toBe("1");
        expect(lodash_1.default.get(JSON.parse(config.contents), "auth.freeAccessRequests.0.device")).toEqual(1);
        stop();
    });
    it("should not add partial item to the array", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.getConfs(["auth:freeAccessRequests:0:device"]))["auth:freeAccessRequests:0:device"]).toBeUndefined();
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "auth:freeAccessRequests:0:device": "1",
            "auth:freeAccessRequests:0:function": "3",
        }))).status).toEqual({
            code: opcb_ts_shared_1.redisCmd.ConfigValidationErrorCode.IncorrectValue,
            key: "auth:freeAccessRequests:0:registersRange",
        });
        expect((await bus.getConfs(["auth:freeAccessRequests:0:device"]))["auth:freeAccessRequests:0:device"]).toBeUndefined();
        expect(lodash_1.default.get(JSON.parse(config.contents), "auth.freeAccessRequests")).toEqual([]);
        stop();
    });
    it("should clear array", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect(lodash_1.default.get(JSON.parse(config.contents), "auth.users").length).toEqual(1);
        expect((await bus.getConfs(["auth:users:0:username"]))["auth:users:0:username"]).toBe("admin");
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({ "auth:users:*": null }))).status).toEqual("ok");
        expect((await bus.getConfs(["auth:users:0:username"]))["auth:users:0:username"]).toBeUndefined();
        expect(lodash_1.default.get(JSON.parse(config.contents), "auth.users")).toEqual([]);
        stop();
    });
    it("should add transitional array", async () => {
        const [bus, stop, _config, factoryConfig] = await (0, utils_1.runConfman)({}, true);
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "auth:users:0:username": "admin",
        }, false, "factory"))).status).toEqual("ok");
        expect(JSON.parse(factoryConfig.contents)).toEqual({
            auth: { users: [{ username: "admin" }] },
        });
        stop();
    });
});
//# sourceMappingURL=array-func.test.js.map