"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const utils_1 = require("./utils");
describe("config manager", function () {
    it("should load config data in redis", async () => {
        const [bus, stop] = await (0, utils_1.runConfman)({}, true);
        const res = await bus.getConfs([
            "global:model",
            "global:setHostName",
            "overvisVpn:wireguard:endpointPort",
            "overvisVpn:wireguard:endpointPublicKey",
            "modbusRs485:0:mode",
        ]);
        expect(res["global:model"]).toBe("opcb221");
        expect(res["global:setHostName"]).toBe("false");
        expect(res["overvisVpn:wireguard:endpointPort"]).toBe("51820");
        expect(res["overvisVpn:wireguard:endpointPublicKey"]).toBeUndefined();
        expect(res["modbusRs485:0:mode"]).toBe("rtu-master");
        stop();
    });
    it("should correctly respond to validate-only requests", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        const initialConfigStr = config.contents;
        expect((await bus.getConfs(["global:model"]))["global:model"]).toBe("opcb221");
        // correct value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:model": "opcb221b" }, true)))
            .status).toBe("ok");
        // incorrect value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:model": "asdf" }, true)))
            .status).toEqual({
            code: opcb_ts_shared_1.redisBus.ConfigValidationErrorCode.IncorrectValue,
            key: "global:model",
        });
        // incorrect key
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:qwer": "asdf" }, true)))
            .status).toEqual({
            code: opcb_ts_shared_1.redisBus.ConfigValidationErrorCode.IncorrectKey,
            key: "global:qwer",
        });
        // everything stays the same
        expect((await bus.getConfs(["global:model"]))["global:model"]).toBe("opcb221");
        expect(config.contents).toEqual(initialConfigStr);
        stop();
    });
    it("should not set unknown parameter", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        const initialConfigStr = config.contents;
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:qwer": "asdf" }))).status).toEqual({
            code: opcb_ts_shared_1.redisBus.ConfigValidationErrorCode.IncorrectKey,
            key: "global:qwer",
        });
        expect((await bus.getConfs(["global:qwer"]))["global:qwer"]).toBeUndefined();
        expect(config.contents).toEqual(initialConfigStr);
        stop();
    });
});
//# sourceMappingURL=basic-func.test.js.map