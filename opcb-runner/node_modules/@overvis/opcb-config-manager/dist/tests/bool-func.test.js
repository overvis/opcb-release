"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const utils_1 = require("./utils");
describe("config manager", function () {
    it("should correctly set number parameters", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.getConfs(["global:setHostName"]))["global:setHostName"]).toBe("false");
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:setHostName": "true" })))
            .status).toBe("ok");
        expect((await bus.getConfs(["global:setHostName"]))["global:setHostName"]).toBe("true");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.setHostName")).toEqual(true);
        // incorrect value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:setHostName": "0" }))).status).toEqual({
            code: opcb_ts_shared_1.redisBus.ConfigValidationErrorCode.IncorrectValue,
            key: "global:setHostName",
        });
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig({ "global:setHostName": "False" })))
            .status).toEqual({
            code: opcb_ts_shared_1.redisBus.ConfigValidationErrorCode.IncorrectValue,
            key: "global:setHostName",
        });
        expect((await bus.getConfs(["global:setHostName"]))["global:setHostName"]).toBe("true");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.setHostName")).toEqual(true);
        stop();
    });
});
//# sourceMappingURL=bool-func.test.js.map