"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const utils_1 = require("./utils");
describe("config manager", function () {
    it("should load undefined value from factory config ", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({ global: undefined }, true, `{"global":{"userProvidedDeviceName":"Factory OPCB"}}`);
        // default value is taken from schema
        expect((await bus.getConfs(["global:model"]))["global:model"]).toBe("opcb");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.model")).toEqual("opcb");
        // value present in factory config is taken as is
        expect((await bus.getConfs(["global:userProvidedDeviceName"]))["global:userProvidedDeviceName"]).toBe("Factory OPCB");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.userProvidedDeviceName")).toEqual("Factory OPCB");
        stop();
    });
    it("should load undefined array from factory config", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({ auth: { freeAccessRequests: undefined } }, true, `{"auth":{"freeAccessRequests":[{"device":1,"function":3,"registersRange":"0-125,2222-3333"}]}}`);
        expect((await bus.getConfs(["auth:freeAccessRequests:0:device"]))["auth:freeAccessRequests:0:device"]).toBe("1");
        expect(lodash_1.default.get(JSON.parse(config.contents), "auth.freeAccessRequests")).toEqual([
            { device: 1, function: 3, registersRange: "0-125,2222-3333" },
        ]);
        stop();
    });
    it("should not rewrite empty array from factory config", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({ auth: { freeAccessRequests: [] } }, true, `{"auth":{"freeAccessRequests":[{"device":1,"function":3,"registersRange":"0-125,2222-3333"}]}}`);
        expect((await bus.getConfs(["auth:freeAccessRequests:0:device"]))["auth:freeAccessRequests:0:device"]).toBeUndefined();
        expect(lodash_1.default.get(JSON.parse(config.contents), "auth.freeAccessRequests")).toEqual([]);
        stop();
    });
    it("should not change falsy boolean values with true", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true, `{"global":{"setHostName":true}}`);
        // default value is taken from schema
        expect((await bus.getConfs(["global:setHostName"]))["global:setHostName"]).toBe("false");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.setHostName")).toEqual(false);
        stop();
    });
});
//# sourceMappingURL=factory-func.test.js.map