"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const utils_1 = require("./utils");
describe("config manager", function () {
    it("should correctly set string parameters", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({ "global:modelName": "ASDF" }))).status).toBe("ok");
        expect((await bus.getConfs(["global:modelName"]))["global:modelName"]).toBe("ASDF");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.modelName")).toEqual("ASDF");
        // incorrect value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "global:modelName": "VERY LONG STRING VERY LONG STRING VERY LONG STRING VERY LONG STRING VERY LONG STRING VERY LONG STRING VERY LONG STRING",
        }))).status).toEqual({
            code: opcb_ts_shared_1.redisCmd.ConfigValidationErrorCode.IncorrectValue,
            key: "global:modelName",
        });
        expect((await bus.getConfs(["global:modelName"]))["global:modelName"]).toBe("ASDF");
        expect(lodash_1.default.get(JSON.parse(config.contents), "global.modelName")).toEqual("ASDF");
        stop();
    });
    it("should correctly set ip address", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "elan:staticIpSettings:ipAddress": "123.123.123.222",
        }))).status).toBe("ok");
        expect((await bus.getConfs(["elan:staticIpSettings:ipAddress"]))["elan:staticIpSettings:ipAddress"]).toBe("123.123.123.222");
        expect(lodash_1.default.get(JSON.parse(config.contents), "elan.staticIpSettings.ipAddress")).toEqual("123.123.123.222");
        // incorrect value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "elan:staticIpSettings:ipAddress": "123.123.123.333",
        }))).status).toEqual({
            code: opcb_ts_shared_1.redisCmd.ConfigValidationErrorCode.IncorrectValue,
            key: "elan:staticIpSettings:ipAddress",
        });
        expect((await bus.getConfs(["elan:staticIpSettings:ipAddress"]))["elan:staticIpSettings:ipAddress"]).toBe("123.123.123.222");
        expect(lodash_1.default.get(JSON.parse(config.contents), "elan.staticIpSettings.ipAddress")).toEqual("123.123.123.222");
        stop();
    });
    it("should correctly set check string patterns", async () => {
        const [bus, stop, config] = await (0, utils_1.runConfman)({}, true);
        // correct value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "overvisVpn:pinCode": "12345678",
        }))).status).toBe("ok");
        expect((await bus.getConfs(["overvisVpn:pinCode"]))["overvisVpn:pinCode"]).toBe("12345678");
        expect(lodash_1.default.get(JSON.parse(config.contents), "overvisVpn.pinCode")).toEqual("12345678");
        // incorrect value
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.SetConfig({
            "overvisVpn:pinCode": "1234567",
        }))).status).toEqual({
            code: opcb_ts_shared_1.redisCmd.ConfigValidationErrorCode.IncorrectValue,
            key: "overvisVpn:pinCode",
        });
        expect((await bus.getConfs(["overvisVpn:pinCode"]))["overvisVpn:pinCode"]).toBe("12345678");
        expect(lodash_1.default.get(JSON.parse(config.contents), "overvisVpn.pinCode")).toEqual("12345678");
        stop();
    });
});
//# sourceMappingURL=strings-func.test.js.map