"use strict";
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-empty-function */
Object.defineProperty(exports, "__esModule", { value: true });
exports.runConfman = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const fs = tslib_1.__importStar(require("fs"));
const opcbConfigManager = tslib_1.__importStar(require(".."));
async function runConfman(configFileMixin, silent = false, factoryConfigFileContent = "{}", manufacturerFile = "") {
    let logger = {
        level: "silent",
        fatal: () => { },
        warn: () => { },
        debug: () => { },
        trace: () => { },
        info: () => { },
        error: () => { },
        silent: () => { },
    };
    if (!silent) {
        logger = {
            level: "warn",
            fatal: console.error,
            warn: console.warn,
            debug: () => { },
            trace: () => { },
            info: () => { },
            error: console.error,
            silent: () => { },
        };
    }
    const bus = new opcb_ts_shared_1.RedisClient("redis://127.0.0.1:6379/0", logger);
    await bus.clear();
    const configFileStr = fs.readFileSync("./src/tests/test.config.json", "utf-8");
    const configStr = JSON.stringify(Object.assign(JSON.parse(configFileStr), configFileMixin), null, 4);
    const configFile = { contents: configStr };
    const factoryConfigFile = { contents: factoryConfigFileContent };
    await opcbConfigManager.run(logger, {
        redisClient: bus.getActorClient("CFG"),
        manufacturerFile: { contents: manufacturerFile },
        configFile,
        factoryConfigFile,
    });
    bus.listenCmdStream(true).catch(console.error);
    return [
        // as unknown as TestRedisClient <- Jest TS compiler fix
        bus.getActorClient("TST"),
        () => {
            bus.abortListen();
        },
        configFile,
        factoryConfigFile,
    ];
}
exports.runConfman = runConfman;
//# sourceMappingURL=utils.js.map