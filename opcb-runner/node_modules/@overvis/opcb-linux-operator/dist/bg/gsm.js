"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGsmStats = void 0;
const exec_1 = require("../exec");
const __1 = require("..");
async function updateGsmStats() {
    const connInfo = await getConnInfo();
    const modemPathList = await getModemList();
    if (modemPathList.length) {
        //  TODO_FUTURE: What if more than one modem is connected?
        const modemInfo = await getModemInfo(modemPathList[0]);
        return { ...connInfo, ...modemInfo };
    }
    return connInfo;
}
exports.updateGsmStats = updateGsmStats;
async function getModemList() {
    var _a;
    __1.logger.trace("Getting modem list...");
    const modemListStr = await (0, exec_1.execCmd)("mmcli", ["-J", "-L"]);
    if (modemListStr[1] !== 0) {
        return [];
    }
    const modemList = JSON.parse(modemListStr[0]);
    return (_a = modemList["modem-list"]) !== null && _a !== void 0 ? _a : [];
}
async function getModemInfo(modemPath) {
    __1.logger.trace(`Getting modem '${modemPath}' info...`);
    const modemInfoStr = await (0, exec_1.execCmd)("mmcli", ["-J", "-m", modemPath]);
    if (modemInfoStr[1] !== 0) {
        return {};
    }
    const modemInfo = JSON.parse(modemInfoStr[0]);
    return {
        "gsm:dbusPath": modemInfo.modem["dbus-path"],
        "gsm:3gpp:imei": modemInfo.modem["3gpp"].imei,
        "gsm:3gpp:operatorCode": modemInfo.modem["3gpp"]["operator-code"],
        "gsm:3gpp:operatorName": modemInfo.modem["3gpp"]["operator-name"],
        "gsm:3gpp:packetServiceState": modemInfo.modem["3gpp"]["packet-service-state"],
        "gsm:3gpp:registrationState": modemInfo.modem["3gpp"]["registration-state"],
        "gsm:generic:accessTechnologies": modemInfo.modem.generic["access-technologies"][0],
        "gsm:generic:hardvareRevision": modemInfo.modem.generic["hardware-revision"],
        "gsm:generic:manufacturer": modemInfo.modem.generic.manufacturer,
        "gsm:generic:model": modemInfo.modem.generic.model,
        "gsm:generic:powerState": modemInfo.modem.generic["power-state"],
        "gsm:generic:primaryPort": modemInfo.modem.generic["primary-port"],
        "gsm:generic:revision": modemInfo.modem.generic.revision,
        "gsm:generic:signalQuality": modemInfo.modem.generic["signal-quality"].value,
        "gsm:generic:state": modemInfo.modem.generic.state,
        "gsm:generic:stateFailedReason": modemInfo.modem.generic["state-failed-reason"],
    };
}
async function getConnInfo() {
    const connName = "opcb-gsm";
    __1.logger.trace(`Getting connection '${connName}' info...`);
    const connInfoStr = await (0, exec_1.execCmd)("nmcli", [
        "-t",
        "-f",
        "GENERAL.DEVICES,GENERAL.IP-IFACE,IP4.ADDRESS,IP4.GATEWAY,IP4.DNS",
        "connection",
        "show",
        connName,
    ]);
    if (connInfoStr[1] !== 0) {
        return {};
    }
    const connInfo = Object.fromEntries(connInfoStr[0]
        .trim()
        .split("\n")
        .map((s) => s.split(":").map((s) => s.trim())));
    return {
        "gsm:conn:device": connInfo["GENERAL.DEVICES"],
        "gsm:conn:iface": connInfo["GENERAL.IP-IFACE"],
        "gsm:conn:ipAddressCidr": connInfo["IP4.ADDRESS[1]"],
        "gsm:conn:gateway": connInfo["IP4.GATEWAY"],
        "gsm:conn:dns1": connInfo["IP4.DNS[1]"],
        "gsm:conn:dns2": connInfo["IP4.DNS[2]"],
    };
}
//# sourceMappingURL=gsm.js.map