"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONFIG_SCHEMA = void 0;
const typebox_1 = require("@sinclair/typebox");
exports.CONFIG_SCHEMA = typebox_1.Type.Object({
    global: typebox_1.Type.Object({
        setHostName: typebox_1.Type.Boolean(),
        manageAptDependencies: typebox_1.Type.Boolean(),
        manageNetworking: typebox_1.Type.Boolean(),
        time: typebox_1.Type.Object({
            manageSettings: typebox_1.Type.Boolean(),
            timezone: typebox_1.Type.String(),
            useNtp: typebox_1.Type.Boolean(),
        }),
        updateMode: typebox_1.Type.Union([
            typebox_1.Type.Literal("auto-only-patch"),
            typebox_1.Type.Literal("auto-only-minor"),
            typebox_1.Type.Literal("auto-all"),
            typebox_1.Type.Literal("manual"),
            typebox_1.Type.Literal("disabled"),
        ]),
        autoUpdateTimeRange: typebox_1.Type.Object({ from: typebox_1.Type.String(), till: typebox_1.Type.String() }, { additionalProperties: false }),
        allowForcedUpdates: typebox_1.Type.Boolean(),
        lastRunVersion: typebox_1.Type.String(),
        setupAutomaticFSCheckOnBoot: typebox_1.Type.Boolean(),
        setupArmbianSpi: typebox_1.Type.Boolean(),
    }, { additionalProperties: false }),
    overvisVpn: typebox_1.Type.Object({
        wireguard: typebox_1.Type.Object({
            privateKey: typebox_1.Type.Optional(typebox_1.Type.String()),
            isManaged: typebox_1.Type.Boolean(),
            endpointHost: typebox_1.Type.String(),
            endpointPort: typebox_1.Type.Integer(),
            endpointPublicKey: typebox_1.Type.Optional(typebox_1.Type.String()),
            endpointAllowedIpsCidr: typebox_1.Type.String(),
            ipAddressCidr: typebox_1.Type.Optional(typebox_1.Type.String()),
            persistentKeepalive: typebox_1.Type.Integer(),
            setUpWgCheckCronJob: typebox_1.Type.Boolean(),
            vpnMotherlandServerIp: typebox_1.Type.String(),
        }, { additionalProperties: false }),
        isEnabled: typebox_1.Type.Boolean(),
        addRootSshKey: typebox_1.Type.Optional(typebox_1.Type.String()),
        telemetry: typebox_1.Type.Object({
            isEnabled: typebox_1.Type.Boolean(),
            reportPeriodMinutes: typebox_1.Type.Integer(),
            serverApiUrl: typebox_1.Type.String(),
        }, { additionalProperties: false }),
    }, { additionalProperties: false }),
    elan: typebox_1.Type.Object({
        networkInterfaceName: typebox_1.Type.Optional(typebox_1.Type.String()),
        dhcpIsEnabled: typebox_1.Type.Boolean(),
        staticIpSettings: typebox_1.Type.Object({
            ipAddress: typebox_1.Type.String(),
            subnetMask: typebox_1.Type.String(),
            gateway: typebox_1.Type.String(),
            primaryDns: typebox_1.Type.String(),
            secondaryDns: typebox_1.Type.String(),
        }, { additionalProperties: false }),
        fixMacAddress: typebox_1.Type.Boolean(),
        mac: typebox_1.Type.Optional(typebox_1.Type.String()),
    }, { additionalProperties: false }),
    wlan: typebox_1.Type.Object({
        networkInterfaceName: typebox_1.Type.Optional(typebox_1.Type.String()),
        mode: typebox_1.Type.Union([typebox_1.Type.Literal("ap"), typebox_1.Type.Literal("station")]),
        country: typebox_1.Type.String(),
        apSettings: typebox_1.Type.Object({
            ssid: typebox_1.Type.Optional(typebox_1.Type.String()),
            password: typebox_1.Type.Optional(typebox_1.Type.String()),
            ipAddress: typebox_1.Type.String(),
            subnetMask: typebox_1.Type.String(),
        }, { additionalProperties: false }),
        stationSettings: typebox_1.Type.Object({
            ssid: typebox_1.Type.Optional(typebox_1.Type.String()),
            password: typebox_1.Type.Optional(typebox_1.Type.String()),
            dhcpIsEnabled: typebox_1.Type.Boolean(),
            staticIpSettings: typebox_1.Type.Object({
                ipAddress: typebox_1.Type.String(),
                subnetMask: typebox_1.Type.String(),
                gateway: typebox_1.Type.String(),
                primaryDns: typebox_1.Type.String(),
                secondaryDns: typebox_1.Type.String(),
            }, { additionalProperties: false }),
        }, { additionalProperties: false }),
    }, { additionalProperties: false }),
    http: typebox_1.Type.Object({
        manageNginx: typebox_1.Type.Boolean(),
        externalHost: typebox_1.Type.String(),
        externalPort: typebox_1.Type.Integer(),
        internalApiPort: typebox_1.Type.String(),
    }, { additionalProperties: false }),
    monitoring: typebox_1.Type.Object({
        enableCommandFiles: typebox_1.Type.Boolean(),
        monitorTemperature: typebox_1.Type.Boolean(),
        monitorDiskSpace: typebox_1.Type.Boolean(),
        monitorVoltage: typebox_1.Type.Boolean(),
        internetAccessPingIp: typebox_1.Type.String(),
        checkForExternalIp: typebox_1.Type.Boolean(),
    }, { additionalProperties: false }),
    loraSens: typebox_1.Type.Object({
        enabled: typebox_1.Type.Boolean(),
    }),
});
//# sourceMappingURL=config.js.map