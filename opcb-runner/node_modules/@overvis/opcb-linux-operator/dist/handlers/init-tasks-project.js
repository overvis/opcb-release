"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInitTasksProjectHandler = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const fs = tslib_1.__importStar(require("fs"));
const __1 = require("..");
const exec_1 = require("../exec");
const tasks_1 = require("../tasks");
function createInitTasksProjectHandler(path, templatePath, bus) {
    return async (cmd) => {
        __1.logger.debug(`Received the command to initialize task project with mode '${cmd.mode}'.`);
        if (cmd.mode === "update") {
            __1.logger.warn(`Updating task project in the directory '${path}' ` +
                `with the template located in '${templatePath}'.`);
        }
        else if (cmd.mode === "full-overwrite") {
            __1.logger.warn(`Overwriting task project in the directory '${path}' ` +
                `with the template located in '${templatePath}'.`);
        }
        else if (cmd.mode === "npm-install") {
            __1.logger.warn(`Running npm install in the directory '${path}'.`);
            try {
                await (0, exec_1.exec)(`cd ${path} && npm install`);
            }
            catch (err) {
                return new opcb_ts_shared_1.redisCmd.Done(err.message);
            }
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done();
        }
        else if (cmd.mode === "npm-rebuild") {
            __1.logger.warn(`Running npm rebuild in the directory '${path}'.`);
            try {
                await (0, exec_1.exec)(`cd ${path} && npm rebuild`);
            }
            catch (err) {
                return new opcb_ts_shared_1.redisCmd.Done(err.message);
            }
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done();
        }
        else {
            __1.logger.warn(`Initializing task project in the directory '${path}' ` +
                `with the template located in '${templatePath}'.`);
        }
        const exists = fs.existsSync(path);
        if (cmd.mode === "init-only" && exists) {
            __1.logger.error(`Project already exists.`);
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done("Project already exists.");
        }
        if (cmd.mode === "update" && !exists) {
            __1.logger.error(`Project does not exist, cannot update.`);
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done("Project does not exist, cannot update.");
        }
        // unpacking to tmp dir
        const unpackPath = "/tmp/opcb-tasks-template";
        try {
            await (0, exec_1.exec)(`rm -rf ${unpackPath} && mkdir -p ${unpackPath}`);
        }
        catch (err) {
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done(`Error creating directory '${unpackPath}': ${err.message}`);
        }
        try {
            await (0, exec_1.exec)(`tar -k -C "${unpackPath}" -xf "${templatePath}"`);
        }
        catch (err) {
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done(`Error unpacking tasks template to tmp dir: ${err.message}`);
        }
        if (cmd.mode === "full-overwrite" || cmd.mode === "init-only") {
            // copying to destination with overwrite
            try {
                await (0, exec_1.exec)(`rm -rf ${path} && cp -r ${unpackPath} ${path}`);
            }
            catch (err) {
                const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
                await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
                return new opcb_ts_shared_1.redisCmd.Done(`Error copying files from '${unpackPath}' to '${path}': ${err.message}`);
            }
        }
        else {
            // updating non-user files
            try {
                await (0, exec_1.exec)(`rm -rf ${path}/node_modules`);
                await (0, exec_1.exec)(`rm -rf ${path}/.vscode`);
                await (0, exec_1.exec)(`rm ${path}/package.json`);
                await (0, exec_1.exec)(`rm ${path}/package-lock.json`);
                await (0, exec_1.exec)(`rm ${path}/tsconfig.tsbuildinfo`);
                await (0, exec_1.exec)(`rm ${path}/tsconfig.json`);
                await (0, exec_1.exec)(`cp -r ${unpackPath}/node_modules ${path}/`);
                await (0, exec_1.exec)(`cp -r ${unpackPath}/.vscode ${path}/`);
                await (0, exec_1.exec)(`cp ${unpackPath}/package.json ${path}/`);
                await (0, exec_1.exec)(`cp ${unpackPath}/package-lock.json ${path}/`);
                await (0, exec_1.exec)(`cp ${unpackPath}/tsconfig.json ${path}/`);
            }
            catch (err) {
                const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
                await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
                return new opcb_ts_shared_1.redisCmd.Done(`Error copying dependencies files from '${unpackPath}' to '${path}': ` +
                    `${err.message}`);
            }
        }
        // running npm rebuild
        __1.logger.info(`Rebuilding tasks project npm dependencies...`);
        try {
            await (0, exec_1.exec)(`cd ${path} && npm rebuild`);
        }
        catch (err) {
            const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
            await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
            return new opcb_ts_shared_1.redisCmd.Done(`Error running npm rebuild in '${path}': ${err.message}`);
        }
        __1.logger.info(`Tasks project modification done.`);
        const tasksProjectVersion = (0, tasks_1.getTasksProjectVersion)(path);
        await bus.setState({ "tasks:projectVersion": tasksProjectVersion });
        return new opcb_ts_shared_1.redisCmd.Done();
    };
}
exports.createInitTasksProjectHandler = createInitTasksProjectHandler;
//# sourceMappingURL=init-tasks-project.js.map