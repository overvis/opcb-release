"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRecompileTasksHandler = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const __1 = require("..");
const exec_1 = require("../exec");
function createRecompileTasksHandler(db, tasksDir) {
    const TRUNKATE_TASK_FILES_SQL = db.prepare(`delete from task_files;`);
    const INSERT_TASK_FILE_SQL = db.prepare(`insert into task_files (
                file_basepath,
                last_updated_on,
                task_name,
                task_description,
                default_run_period_sec
            ) values (
                @fileBasepath,
                @lastUpdatedOn,
                @defaultTaskName,
                @defaultTaskDescription,
                @defaultRunPeriodSec
            );`);
    return async (_cmd) => {
        var _a, _b, _c, _d, _e, _f;
        __1.logger.info("Got recompile tasks command.");
        __1.logger.debug("Recompiling task files...");
        try {
            const [out, code, err] = await (0, exec_1.execCmd)(`cd ${tasksDir} && npm run build`);
            if (code !== null && code !== 0) {
                __1.logger.warn(`Recompile tasks completed with error:\n${out}\n${err}`);
                return new opcb_ts_shared_1.redisCmd.Done(`Recompile tasks completed with error:\n${out}\n${err}`);
            }
        }
        catch (err) {
            // TODO_FUTURE: remove this catch to report this error on Sentry?
            const errStr = err instanceof Error ? err.toString() : JSON.stringify(err);
            __1.logger.warn(`Recompile tasks exec resulted in error:\n${errStr}`);
            return new opcb_ts_shared_1.redisCmd.Done(`Recompile tasks exec resulted in error:\n${errStr}`);
        }
        __1.logger.debug("Success.");
        /* import all task files to get name/description/period */
        // TODO: recursive lookup in folders
        const taskFiles = [];
        const compiledDir = tasksDir + "/dist/tasks";
        const fileList = await fs_1.default.promises.readdir(compiledDir);
        __1.logger.debug(fileList, `Got file list from ${compiledDir} folder.`);
        for (const basePath of fileList) {
            const extName = path_1.default.extname(basePath);
            __1.logger.trace(`Processing ${basePath} file, extName = ${extName}`);
            if (extName === ".js") {
                const fullPath = compiledDir + "/" + basePath;
                const modifyTime = (await fs_1.default.promises.stat(fullPath)).mtime;
                __1.logger.debug(`Importing ${fullPath} task files to retrieve information...`);
                let task;
                try {
                    require.cache[fullPath] = undefined;
                    // eslint-disable-next-line @typescript-eslint/no-var-requires
                    task = require(fullPath);
                }
                catch (err) {
                    const errStr = err instanceof Error ? err.toString() : JSON.stringify(err);
                    __1.logger.warn(`Error while importing task file ${basePath}: ${errStr}`);
                    continue;
                }
                if (!("run" in task)) {
                    __1.logger.info(`Ignoring task file ${basePath} because of missing exports.`);
                    continue;
                }
                taskFiles.push({
                    basePath,
                    modifyTime,
                    defaults: task.defaults,
                });
                __1.logger.debug(`Success.`);
            }
        }
        __1.logger.debug(`Truncating task_files table.`);
        TRUNKATE_TASK_FILES_SQL.run();
        for (const taskFile of taskFiles) {
            __1.logger.debug(`Inserting information about task: ${taskFile.basePath}`);
            INSERT_TASK_FILE_SQL.run({
                fileBasepath: taskFile.basePath,
                lastUpdatedOn: taskFile.modifyTime.getTime() / 1000,
                defaultTaskName: (_b = (_a = taskFile.defaults) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : null,
                defaultTaskDescription: (_d = (_c = taskFile.defaults) === null || _c === void 0 ? void 0 : _c.description) !== null && _d !== void 0 ? _d : null,
                defaultRunPeriodSec: (_f = (_e = taskFile.defaults) === null || _e === void 0 ? void 0 : _e.runPeriodSec) !== null && _f !== void 0 ? _f : null,
            });
        }
        return new opcb_ts_shared_1.redisCmd.Done();
    };
}
exports.createRecompileTasksHandler = createRecompileTasksHandler;
//# sourceMappingURL=recompile-tasks.js.map