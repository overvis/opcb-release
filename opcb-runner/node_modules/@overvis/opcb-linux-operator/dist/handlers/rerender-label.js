"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRerenderLabelHandler = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const __1 = require("..");
const exec_1 = require("../exec");
const wlan_1 = require("../system/wlan");
function createRerenderLabelHandler(bus, staticFilesDir) {
    return async () => {
        __1.logger.debug("Got rerender label image command.");
        const { "overvisVpn:wireguard:privateKey": privateKey, "global:modelName": model, "elan:mac": mac, "overvisVpn:pinCode": pin, "global:labelLink": link, } = await bus.getConfs([
            "overvisVpn:wireguard:privateKey",
            "global:modelName",
            "elan:mac",
            "overvisVpn:pinCode",
            "global:labelLink",
        ]);
        const path = staticFilesDir + "/ui/media/opcb-label.png";
        if (!privateKey || !model || !mac || !pin || !link) {
            throw new Error("Failed to get required config values.");
        }
        const fontsPath = staticFilesDir + "/fonts";
        const wifiSsid = (0, wlan_1.defaultApSsid)(mac);
        await renderLabelImage(path, fontsPath, { privateKey, model, mac, pin, link, wifiSsid });
        return new opcb_ts_shared_1.redisBus.Done();
    };
}
exports.createRerenderLabelHandler = createRerenderLabelHandler;
async function renderLabelImage(path, fontsPath, data) {
    __1.logger.info("Rendering label image...");
    // create qr code
    const qrPath = "/tmp/opcb-qr.png";
    const privateKeyUrlEncoded = encodeURIComponent(data.privateKey);
    const qrData = `${data.link}/?pk=${privateKeyUrlEncoded}`;
    await (0, exec_1.exec)(`qrencode -s 8 -o ${qrPath} ${qrData}`);
    // create label image
    const norm = `${fontsPath}/DejaVuSans-Bold.ttf`;
    const mono = `${fontsPath}/DejaVuSansMono-Bold.ttf`;
    const params = `\\
    -size 945x650 canvas:none -stroke white -strokewidth 2 -fill white \\
        -draw "rectangle 0, 0, 945, 650" \\
    -fill black -stroke black -strokewidth 1 -font ${norm} -pointsize 36 \\
        -draw "text 40,80 \\"Model:\\"" \\
    -font ${mono} -pointsize 32 -draw "text 185,80 \\"${data.model}\\"" \\
    -fill black -stroke black -strokewidth 1 -font ${norm} -pointsize 36 \\
        -draw "text 40,130 \\"Private key:\\"" \\
    -font ${mono} -pointsize 32 -draw "text 40,180 \\"${data.privateKey}\\"" \\
    -font ${norm} -pointsize 36 -draw "text 445,260 \\"MAC:\\"" \\
    -font ${mono} -pointsize 32 -draw "text 560,260 \\"${data.mac}\\"" \\
    -font ${norm} -pointsize 58 -draw "text 440,350 \\"PIN:\\"" \\
    -font ${mono} -pointsize 52 -draw "text 590,350 \\"${data.pin}\\"" \\
    -font ${norm} -pointsize 36 -draw "text 445,420 \\"Wi-Fi:\\"" \\
    -font ${mono} -pointsize 32 -draw "text 570,420 \\"${data.wifiSsid}\\"" \\
    -font ${mono} -pointsize 32 -draw "text 570,470 \\"(no password)\\"" \\
    -font ${mono} -pointsize 32 -draw "text 570,520 \\"setup.overvis.com\\"" \\
    -font ${mono} -pointsize 32 -draw "text 40,590 \\"${data.link}\\"" \\
    -gravity center -draw "image over -280,52 0,0 \\"${qrPath}\\"" \\
    `;
    await (0, exec_1.exec)(`convert ${params} "${path}"`);
    // cleaning qr code image
    await (0, exec_1.exec)(`rm ${qrPath}`);
    __1.logger.info("Rendering label image... Done.");
}
//# sourceMappingURL=rerender-label.js.map