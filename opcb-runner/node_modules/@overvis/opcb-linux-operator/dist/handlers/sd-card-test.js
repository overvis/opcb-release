"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStartSdTestHandler = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const __1 = require("..");
const exec_1 = require("../exec");
const fs_1 = tslib_1.__importDefault(require("fs"));
const SIZE_MB = 64;
const TMP_FILE = "/root/file_speed_test.deleteme";
function createStartSdTestHandler(bus) {
    return async () => {
        __1.logger.debug("Got start SD card speed test command.");
        await bus.setState({
            "sdTest:status": "ongoing",
            "sdTest:startedOn": (Date.now() / 1000).toFixed(0),
            "sdTest:writeSpeedMbps": null,
            "sdTest:readSpeedMbps": null,
            "sdTest:error": null,
        });
        try {
            __1.logger.info("Starting SD-card write speed test.");
            const writeStart = Date.now();
            await (0, exec_1.exec)(`dd if=/dev/zero of=${TMP_FILE} bs=1M count=${SIZE_MB} ` +
                `conv=fdatasync oflag=direct`);
            const writeLength = Date.now() - writeStart;
            const writeSpeed = (SIZE_MB / (writeLength / 1000)).toFixed(3);
            __1.logger.info(`Write speed is: ${writeSpeed} MB/s`);
            await bus.setState({ "sdTest:writeSpeedMbps": writeSpeed });
            __1.logger.debug("Clearing the buffer-cache to accurately measure " +
                "read speeds directly from the device.");
            await (0, exec_1.exec)("echo 3 > /proc/sys/vm/drop_caches");
            __1.logger.info("Starting SD-card read speed test.");
            const readStart = Date.now();
            await (0, exec_1.exec)(`dd if=${TMP_FILE} of=/dev/null bs=1M iflag=direct`);
            const readLength = Date.now() - readStart;
            const readSpeed = (SIZE_MB / (readLength / 1000)).toFixed(3);
            __1.logger.info(`Read speed is: ${readSpeed} MB/s`);
            await bus.setState({ "sdTest:readSpeedMbps": readSpeed });
            __1.logger.debug("Removing temporary file...");
            await fs_1.default.promises.unlink(TMP_FILE);
        }
        catch (e) {
            if (e instanceof Error) {
                await bus.setState({ "sdTest:status": "failed", "sdTest:error": e.message });
                return new opcb_ts_shared_1.redisCmd.Done();
            }
            else {
                throw e;
            }
        }
        await bus.setState({ "sdTest:status": "finished" });
        return new opcb_ts_shared_1.redisCmd.Done();
    };
}
exports.createStartSdTestHandler = createStartSdTestHandler;
//# sourceMappingURL=sd-card-test.js.map