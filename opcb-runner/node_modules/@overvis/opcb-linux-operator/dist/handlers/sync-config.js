"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSyncConfigHandler = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const __1 = require("..");
const config_1 = require("../config");
const system_1 = require("../system");
function createSyncConfigHandler({ bus, monitor, staticFilesDir, labelFile, changelogFile, }) {
    let busy = false;
    let resyncQueued = false;
    const handler = async () => {
        __1.logger.debug("Got sync config command.");
        if (busy) {
            __1.logger.debug("Busy. Will resync later.");
            resyncQueued = true;
            return;
        }
        busy = true;
        const config = await (0, opcb_ts_shared_1.getConfig)(bus, config_1.CONFIG_SCHEMA);
        const configChanges = await (0, system_1.ensureSystemState)({
            config,
            monitor,
            staticFilesDir,
            labelFile,
            changelogFile,
        });
        // save config changes
        if (Object.keys(configChanges).length > 0) {
            const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.SetConfig(configChanges));
            if (res.status !== "ok") {
                throw new Error("Failed to save config changes.");
            }
        }
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.DeviceStateEnsured());
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.EnableUserActiveMode(10000));
        busy = false;
        if (resyncQueued) {
            __1.logger.debug("Resyncing.");
            resyncQueued = false;
            await handler();
        }
    };
    return handler;
}
exports.createSyncConfigHandler = createSyncConfigHandler;
//# sourceMappingURL=sync-config.js.map