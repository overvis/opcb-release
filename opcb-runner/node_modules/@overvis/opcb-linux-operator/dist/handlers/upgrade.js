"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUpgradeHandler = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
function createUpgradeHandler(bus) {
    return async (cmd) => {
        __1.logger.debug(`Received the command to upgrade to '${cmd.ref}'.`);
        await bus.setState({
            "release:scheduledUpgradeToTag": undefined,
            "release:updateState": "imminent-upgrade",
            "release:lastUpgradeError": undefined,
            "release:lastUpgradeRef": undefined,
        });
        __1.logger.info(`Delaying upgrade for 10 seconds to allow UI sessions to display a warning.`);
        await new Promise((resolve) => setTimeout(resolve, 10000));
        __1.logger.warn(`Checking out tag '${cmd.ref}'...`);
        const [out, code] = await (0, exec_1.execCmd)(`git checkout --force ${cmd.ref}`);
        if (code) {
            __1.logger.error(`Failed to merge (code ${code}):\n${out}`);
            await bus.setState({
                "release:updateState": "no-update",
                "release:lastUpgradeRef": cmd.ref,
                "release:lastUpgradeError": out,
            });
            return;
        }
        __1.logger.warn(`Merging done. Restarting runtime...`);
        process.exit(0);
    };
}
exports.createUpgradeHandler = createUpgradeHandler;
//# sourceMappingURL=upgrade.js.map