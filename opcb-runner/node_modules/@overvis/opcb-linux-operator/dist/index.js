"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.logger = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const fin_mf_1 = require("./handlers/fin-mf");
const gen_pub_key_1 = require("./handlers/gen-pub-key");
const reboot_device_1 = require("./handlers/reboot-device");
const rerender_label_1 = require("./handlers/rerender-label");
const restart_runtime_1 = require("./handlers/restart-runtime");
const set_time_1 = require("./handlers/set-time");
const sync_config_1 = require("./handlers/sync-config");
const update_list_1 = require("./handlers/update-list");
const upgrade_1 = require("./handlers/upgrade");
const user_active_mode_1 = require("./handlers/user-active-mode");
const runner_1 = require("./monitor/runner");
async function run(setLogger, runConf) {
    exports.logger = setLogger;
    exports.logger.info("Starting...");
    // initializing bus and monitor
    const bus = new opcb_ts_shared_1.RedisBus(runConf.redisSocket, "LIN", exports.logger);
    const monitor = new runner_1.MonitorRunner(bus);
    // subscribe to related events in bus
    bus.registerRequestHandler("sync-config", (0, sync_config_1.createSyncConfigHandler)(bus, monitor, runConf.staticFilesDir));
    bus.registerRequestHandler("restart-runtime", (0, restart_runtime_1.createRestartRuntimeHandler)());
    bus.registerRequestHandler("reboot", (0, reboot_device_1.createRebootDeviceHandler)());
    bus.registerRequestHandler("upgrade", (0, upgrade_1.createUpgradeHandler)(bus));
    bus.registerRequestHandler("update-list", (0, update_list_1.createUpdateListHandler)(bus));
    bus.registerRequestHandler("user-active", (0, user_active_mode_1.createEnableUserActiveModeHandler)(monitor));
    bus.registerRequestHandler("rerender-label", (0, rerender_label_1.createRerenderLabelHandler)(bus, runConf.staticFilesDir));
    bus.registerRequestHandler("gen-pub-key", (0, gen_pub_key_1.createGenPubKeyHandler)());
    bus.registerRequestHandler("fin-mf", (0, fin_mf_1.createFinalizeManufacturingHandler)(runConf.manufacturerFilePath, bus));
    bus.registerRequestHandler("set-time", (0, set_time_1.createSetTimeHandler)(monitor));
    // wait for config changes from redis stream
    exports.logger.info("Started. Listening to the stream...");
    return Promise.race([bus.listenCmdStreamForever(), monitor.start()]);
}
exports.run = run;
//# sourceMappingURL=index.js.map