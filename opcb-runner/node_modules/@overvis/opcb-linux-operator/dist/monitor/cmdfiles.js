"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCommandFiles = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const fs = tslib_1.__importStar(require("fs"));
const __1 = require("..");
const exec_1 = require("../exec");
async function checkCommandFiles(monitoringState, bus) {
    const devDirContents = await fs.promises.readdir("/dev");
    const mntDirContents = await fs.promises.readdir("/mnt");
    for (const entry of devDirContents) {
        if (!entry.startsWith("sd")) {
            continue;
        }
        const devPath = `/dev/${entry}`;
        if (mntDirContents.includes(entry)) {
            continue;
        }
        // mounting
        const mntPath = `/mnt/${entry}`;
        __1.logger.info(`Found new sd device: ${devPath}, mounting to ${mntPath}`);
        await (0, exec_1.exec)("mkdir", ["-p", mntPath]);
        const [_out, code] = await (0, exec_1.execCmd)("mount", [
            "--no-mtab",
            "--read-only",
            devPath,
            mntPath,
        ]);
        if (code) {
            __1.logger.error(`Failed to mount ${devPath} to ${mntPath}: exit code ${code}`);
        }
        // checking file
        const files = await fs.promises.readdir(mntPath);
        if (files.includes("RESET_CONF")) {
            __1.logger.warn(`Found RESET_CONF on ${devPath}, resetting config...`);
            await bus.sendMsg(new opcb_ts_shared_1.redisBus.ResetConfig());
        }
        else if (files.includes("UNBIND_ACCOUNT")) {
            __1.logger.warn(`Found UNBIND_ACCOUNT on ${devPath}, temporary cleaning boundToOcpServer state...`);
            monitoringState.unbindAccountFromDev = entry;
            return { boundToOcpServer: "" };
        }
    }
    // unmounting old devices
    for (const entry of mntDirContents) {
        if (!entry.startsWith("sd")) {
            continue;
        }
        const mntPath = `/mnt/${entry}`;
        if (devDirContents.includes(entry)) {
            continue;
        }
        __1.logger.info(`Unmounting ${mntPath}...`);
        const [_out, code] = await (0, exec_1.execCmd)("umount", [mntPath]);
        if (code) {
            __1.logger.error(`Failed to unmount ${mntPath}: exit code ${code}`);
        }
        __1.logger.debug(`Removing ${mntPath}...`);
        await (0, exec_1.exec)("rm", ["-r", mntPath]);
        if (monitoringState.unbindAccountFromDev === entry) {
            __1.logger.warn("Restoring boundToOcpServer state...");
            const val = (await bus.getConfs(["overvisVpn:boundToOcpServer"]))["overvisVpn:boundToOcpServer"];
            return { boundToOcpServer: val };
        }
    }
    return {};
}
exports.checkCommandFiles = checkCommandFiles;
//# sourceMappingURL=cmdfiles.js.map