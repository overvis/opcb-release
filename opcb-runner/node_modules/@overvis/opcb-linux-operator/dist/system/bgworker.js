"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureBgWorkerJobs = void 0;
const cmdfiles_1 = require("../bg/cmdfiles");
const disk_1 = require("../bg/disk");
const external_ip_1 = require("../bg/external-ip");
const gateway_1 = require("../bg/gateway");
const inet_1 = require("../bg/inet");
const lan_1 = require("../bg/lan");
const sys_1 = require("../bg/sys");
const temp_1 = require("../bg/temp");
const tz_1 = require("../bg/tz");
const update_1 = require("../bg/update");
const upgrade_1 = require("../bg/upgrade");
const voltage_1 = require("../bg/voltage");
const wireguard_1 = require("../bg/wireguard");
const gsm_1 = require("../bg/gsm");
function ensureBgWorkerJobs(bgworker, { config, elanIface, wlanIface, vpnMotherlandServerIp, trackWireguard, manageNetworking, manageGsm, manageTime, updateMode, updateTimeRange, allowForcedUpdates, }) {
    bgworker.addJob("inet-ping", async (state) => (0, inet_1.runInetPing)(state, config.internetAccessPingIp), 1000, 60000);
    bgworker.addJob("elan-wlan-status", async (state) => (0, lan_1.updateElanWlanStatus)(state, elanIface, wlanIface, manageNetworking), 2000, 60000);
    bgworker.addJob("gateway-ping", async (state) => (0, gateway_1.runGatewayPing)(state, elanIface, wlanIface), 1000, 60000);
    bgworker.addJob("sys-stats", sys_1.updateSysStats, 1000, 60000);
    if (manageTime) {
        bgworker.addJob("tz-list", tz_1.updateTimezonesList, 24 * 60 * 60 * 1000, 24 * 60 * 60 * 1000);
    }
    else {
        bgworker.removeJob("tz-list");
    }
    if (trackWireguard) {
        bgworker.addJob("wg-info", async () => (0, wireguard_1.updateWgInfo)(vpnMotherlandServerIp), 1000, 60000);
    }
    else {
        bgworker.removeJob("wg-info");
    }
    if (config.enableCommandFiles) {
        bgworker.addJob("command-files", cmdfiles_1.checkCommandFiles, 1000, 3000);
    }
    else {
        bgworker.removeJob("command-files");
    }
    if (config.monitorDiskSpace) {
        bgworker.addJob("disk-space", disk_1.updateDiskSpaceUsage, 1000, 60000);
    }
    else {
        bgworker.removeJob("disk-space");
    }
    if (config.monitorTemperature) {
        bgworker.addJob("temperature", temp_1.updateTemperature, 1000, 60000);
    }
    else {
        bgworker.removeJob("temperature");
    }
    if (config.monitorVoltage) {
        bgworker.addJob("voltage", voltage_1.updateVoltage, 1000, 60000);
    }
    else {
        bgworker.removeJob("voltage");
    }
    if (config.checkForExternalIp) {
        bgworker.addJob("external-ip", external_ip_1.updateExternalIp, 60000, 600000);
    }
    else {
        bgworker.removeJob("external-ip");
    }
    bgworker.addJob("check-updates", async () => (0, update_1.checkForUpdates)(updateMode, allowForcedUpdates), 8 * 60 * 60 * 1000, 8 * 60 * 60 * 1000);
    bgworker.addJob("check-upgrades", async (_state, bus) => (0, upgrade_1.checkForUpgrades)(bus, updateTimeRange), 10 * 60 * 1000, 10 * 60 * 1000);
    if (manageGsm) {
        bgworker.addJob("gsm-status", async () => (0, gsm_1.updateGsmStats)(), 5 * 1000, 30 * 1000);
    }
    else {
        bgworker.removeJob("gsm-status");
    }
}
exports.ensureBgWorkerJobs = ensureBgWorkerJobs;
//# sourceMappingURL=bgworker.js.map