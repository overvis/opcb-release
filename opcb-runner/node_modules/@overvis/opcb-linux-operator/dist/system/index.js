"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureSystemState = void 0;
const __1 = require("..");
const bgworker_1 = require("./bgworker");
const apt_1 = require("./apt");
const elan_1 = require("./elan");
const hostname_1 = require("./hostname");
const mac_1 = require("./mac");
const net_1 = require("./net");
const nginx_1 = require("./nginx");
const ssh_1 = require("./ssh");
const time_1 = require("./time");
const wireguard_1 = require("./wireguard");
const wlan_1 = require("./wlan");
async function ensureSystemState({ config, bgworker, staticFilesDir, labelFile, changelogFile, updateWlanConnection, }) {
    __1.logger.info("Ensuring system state...");
    const changedConfigs = {};
    if (config.global.manageAptDependencies) {
        await (0, apt_1.ensureAptDependenciesAreInstalled)();
    }
    const mac = await (0, mac_1.ensureMacAddress)(config.elan.mac, config.elan.fixMacAddress);
    if (config.elan.mac !== mac) {
        __1.logger.info(`New MAC determined: ${mac}`);
        config.elan.mac = mac;
        changedConfigs["elan:mac"] = mac;
    }
    if (config.global.setHostName) {
        await (0, hostname_1.ensureHostName)(mac);
    }
    if (config.global.manageNetworking) {
        await (0, net_1.ensureUnneededNetworkingServicesAreStopped)();
        await (0, net_1.ensureResolvconfIsConfigured)();
        await (0, net_1.ensureNetworkingServiceIsConfigured)();
        await (0, net_1.ensureDnsmasqIsConfigured)();
        await (0, net_1.ensureNetworkManagerIsConfigured)();
        await (0, elan_1.ensureElanIsConfigured)(config.elan, config.overvisVpn.wireguard.vpnMotherlandServerIp);
        await (0, wlan_1.ensureWlanIsConfigured)(config.wlan, config.overvisVpn.wireguard.vpnMotherlandServerIp, mac, updateWlanConnection);
    }
    // TODO_FUTURE: disable wireguard service and watchdog if managed, but config.overvisVpn.isEnabled = false
    let wgServiceEnabled = false;
    if (config.overvisVpn.isEnabled && config.overvisVpn.wireguard.isManaged) {
        const res = await (0, wireguard_1.ensureWireguardIsConfigured)(config.overvisVpn.wireguard);
        wgServiceEnabled = res.serviceEnabled;
        if (res.privateKey && config.overvisVpn.wireguard.privateKey !== res.privateKey) {
            changedConfigs["overvisVpn:wireguard:privateKey"] = res.privateKey;
        }
        if (res.serviceEnabled && config.overvisVpn.wireguard.setUpWgCheckCronJob) {
            await (0, wireguard_1.ensureWireguardWatchdogIsInstalled)(config.overvisVpn.wireguard.vpnMotherlandServerIp);
        }
    }
    if (config.http.manageNginx) {
        await (0, nginx_1.ensureNginxIsConfigured)(config.http, staticFilesDir, labelFile, changelogFile);
    }
    if (config.overvisVpn.isEnabled && config.overvisVpn.addRootSshKey) {
        await (0, ssh_1.ensureRootSshKeyIsInstalled)(config.overvisVpn.addRootSshKey);
    }
    if (config.global.time.manageSettings) {
        await (0, time_1.ensureTimeIsConfigured)(config.global.time);
    }
    (0, bgworker_1.ensureBgWorkerJobs)(bgworker, {
        config: config.monitoring,
        elanIface: config.elan.networkInterfaceName,
        wlanIface: config.wlan.networkInterfaceName,
        vpnMotherlandServerIp: config.overvisVpn.wireguard.vpnMotherlandServerIp,
        trackWireguard: wgServiceEnabled,
        manageNetworking: config.global.manageNetworking,
        manageTime: config.global.time.manageSettings,
        updateMode: config.global.updateMode,
        updateTimeRange: config.global.autoUpdateTimeRange,
        allowForcedUpdates: config.global.allowForcedUpdates,
    });
    await bgworker.run(true);
    __1.logger.info("Ensuring system state... Done.");
    return changedConfigs;
}
exports.ensureSystemState = ensureSystemState;
//# sourceMappingURL=index.js.map