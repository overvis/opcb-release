"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureMacAddress = void 0;
const tslib_1 = require("tslib");
const os = tslib_1.__importStar(require("os"));
const __1 = require("..");
const BAD_MACS = [
    "00:00:00:00:00:00",
    "ff:ff:ff:ff:ff:ff",
    "00:01:02:03:04:05",
    "00:10:20:30:40:50",
];
function getNetifMac() {
    const ifs = os.networkInterfaces();
    const eth = ifs.eth0;
    if (eth) {
        for (const i of eth) {
            if (i.mac && !BAD_MACS.includes(i.mac)) {
                return i.mac;
            }
        }
    }
    const wlan = ifs.wlan0;
    if (wlan) {
        for (const i of wlan) {
            if (i.mac && !BAD_MACS.includes(i.mac)) {
                return i.mac;
            }
        }
    }
    for (const [_, ifaces] of Object.entries(ifs)) {
        if (!ifaces) {
            continue;
        }
        for (const i of ifaces) {
            if (i.mac && !BAD_MACS.includes(i.mac)) {
                return i.mac;
            }
        }
    }
    return undefined;
}
function getEth0Mac() {
    const ifs = os.networkInterfaces();
    const eth = ifs.eth0;
    if (eth) {
        for (const i of eth) {
            if (i.mac) {
                return i.mac;
            }
        }
    }
    return undefined;
}
function genRandomMac() {
    const mac = new Array(6).fill(0).map(() => Math.floor(Math.random() * 256));
    return mac.map((x) => x.toString(16).padStart(2, "0")).join(":");
}
// eslint-disable-next-line @typescript-eslint/require-await
async function setEthMac(mac) {
    // TODO_FUTURE: implement
    __1.logger.warn(`setEthMac() is not implemented yet. mac: ${mac}`);
}
async function ensureMacAddress(mac, fixMacAddress) {
    if (mac && !fixMacAddress) {
        __1.logger.debug(`Stored MAC: ${mac}`);
        return mac;
    }
    if (mac) {
        __1.logger.debug(`Stored MAC: ${mac}`);
    }
    else {
        __1.logger.warn("MAC address is not set. Trying to acquire from netifs...");
        mac = getNetifMac();
        if (mac) {
            __1.logger.debug(`Aquired MAC: ${mac}`);
        }
    }
    if (!mac) {
        __1.logger.warn("MAC address is not set and cannot be acquired from netifs. Generating random MAC...");
        mac = genRandomMac();
        __1.logger.debug(`Generated MAC: ${mac}`);
    }
    const eth0mac = getEth0Mac();
    if (fixMacAddress && eth0mac !== mac) {
        __1.logger.warn(`Current eth0 MAC (${eth0mac || "empty"}) differs from the fixed MAC (${mac}). ` +
            `Setting the new MAC address in the eth0 interface...`);
        await setEthMac(mac);
    }
    return mac;
}
exports.ensureMacAddress = ensureMacAddress;
//# sourceMappingURL=mac.js.map