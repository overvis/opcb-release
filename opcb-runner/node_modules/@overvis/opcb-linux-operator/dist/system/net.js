"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureNetworkManagerIsConfigured = exports.ensureDnsmasqIsConfigured = exports.ensureNetworkingServiceIsConfigured = exports.ensureResolvconfIsConfigured = exports.ensureUnneededNetworkingServicesAreStopped = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
async function ensureUnneededNetworkingServicesAreStopped() {
    __1.logger.debug("Ensuring unneeded networking services are stopped...");
    // NOTE: wpa_supplicant is left running because it autostarts and should not affect network manager work
    const stopServices = ["dhcpcd", "hostapd", "dnsmasq"];
    for (const service of stopServices) {
        await (0, exec_1.ensureServiceState)(service, false);
    }
}
exports.ensureUnneededNetworkingServicesAreStopped = ensureUnneededNetworkingServicesAreStopped;
async function ensureResolvconfIsConfigured() {
    __1.logger.debug("Ensuring resolvconf is started...");
    try {
        await (0, exec_1.ensureServiceState)("resolvconf", true);
    }
    catch (e) {
        if (e instanceof exec_1.ExecError && e.exitCode === 5) {
            __1.logger.warn("Can't start resolvconf. It's expected in case if you are using docker container.");
            return;
        }
        throw e;
    }
    await (0, exec_1.exec)("ln -sf /run/resolvconf/resolv.conf /etc/resolv.conf");
}
exports.ensureResolvconfIsConfigured = ensureResolvconfIsConfigured;
const NETWORK_INTERFACES_FILE_CONTENTS = `# interfaces(5) file used by ifup(8) and ifdown(8)
# Network is managed by Network manager
auto lo
iface lo inet loopback
`;
async function ensureNetworkingServiceIsConfigured() {
    __1.logger.debug("Ensuring networking service is configured...");
    const changed = await (0, exec_1.ensureFileContents)("/etc/network/interfaces", NETWORK_INTERFACES_FILE_CONTENTS);
    await (0, exec_1.ensureServiceState)("networking", true, changed ? "network interfaces file was changed" : undefined);
}
exports.ensureNetworkingServiceIsConfigured = ensureNetworkingServiceIsConfigured;
const DNSMASQ_CONF_FILE_CONTENTS = `address=/setup.overvis.com/192.168.4.1
`;
async function ensureDnsmasqIsConfigured() {
    __1.logger.debug("Ensuring dnsmasq is configured...");
    await (0, exec_1.ensureFileContents)("/etc/NetworkManager/dnsmasq-shared.d/local.conf", DNSMASQ_CONF_FILE_CONTENTS);
}
exports.ensureDnsmasqIsConfigured = ensureDnsmasqIsConfigured;
const NETWORK_MANAGER_CONF_FILE_CONTENTS = `[main]
dns=dnsmasq
rc-manager=file
plugins=ifupdown,keyfile
no-auto-default=*
ignore-carrier=no

[ifupdown]
managed=true

[keyfile]
unmanaged-devices=interface-name:wg0

[device]
wifi.scan-rand-mac-address=no`;
async function ensureNetworkManagerIsConfigured() {
    __1.logger.debug("Ensuring network manager is configured and activated...");
    const changed = await (0, exec_1.ensureFileContents)("/etc/NetworkManager/NetworkManager.conf", NETWORK_MANAGER_CONF_FILE_CONTENTS);
    await (0, exec_1.ensureServiceState)("NetworkManager", true, changed ? "config file was changed" : undefined);
}
exports.ensureNetworkManagerIsConfigured = ensureNetworkManagerIsConfigured;
//# sourceMappingURL=net.js.map