"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureSpiDevIsDisabled = exports.ensureSpiDevIsEnabled = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
async function ensureSpiDevIsEnabled() {
    __1.logger.debug(`Ensuring 'spidev0.0' is "enabled"...`);
    await enableSpiDev(true);
}
exports.ensureSpiDevIsEnabled = ensureSpiDevIsEnabled;
async function ensureSpiDevIsDisabled() {
    __1.logger.debug(`Ensuring 'spidev0.0' is "disabled"...`);
    await enableSpiDev(false);
}
exports.ensureSpiDevIsDisabled = ensureSpiDevIsDisabled;
// TODO_FUTURE: Different OS have different enabling/disabling methods.
async function enableSpiDev(enable) {
    // For enable/disable spidev0.0 on Armbian platform need add arguments
    // to the file `/boot/armbianEnv.txt`
    const filePath = "/boot/armbianEnv.txt";
    const content = await (0, exec_1.getFileContents)(filePath);
    if (content === undefined) {
        __1.logger.warn("File 'armbianEnv.txt' does not exist. This OS does not support 'extraargs'.");
        return;
    }
    // Parsing armbianEnv.txt as <key : value>
    const keyValueList = content.split("\n").filter((item) => item.length > 0);
    const allParams = {};
    for (const item of keyValueList) {
        const kv = item.split(/=(.*)/);
        allParams[kv[0]] = kv[1] || "";
    }
    const spiParams = {
        overlays: "spi-spidev",
        param_spidev_spi_bus: "0",
    };
    if (enable) {
        // enabling
        for (const key in spiParams) {
            if (key in allParams) {
                const valueList = allParams[key].split(" ").filter((item) => item.length > 0);
                if (!valueList.includes(spiParams[key])) {
                    valueList.push(spiParams[key]);
                    allParams[key] = valueList.join(" ");
                }
            }
            else {
                allParams[key] = spiParams[key];
            }
        }
    }
    else {
        // disabling
        for (const key in spiParams) {
            if (key in allParams) {
                const valueList = allParams[key].split(" ").filter((item) => item.length > 0);
                if (valueList.includes(spiParams[key])) {
                    allParams[key] = valueList.filter((item) => item !== spiParams[key]).join(" ");
                }
            }
        }
    }
    let newContent = "";
    for (const key in allParams) {
        if (allParams[key]) {
            newContent += `${key}=${allParams[key]}\n`;
        }
    }
    await (0, exec_1.ensureFileContents)(filePath, newContent);
}
//# sourceMappingURL=spidev.js.map