"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSshRootAuthKeys = exports.getSshRootAuthKeys = exports.ensureSshRootAuthKey = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
async function ensureSshRootAuthKey(key) {
    if (key.trim().length === 0) {
        __1.logger.info("Ommiting empty root SSH authorized key installation.");
        return;
    }
    __1.logger.debug("Ensuring if authorized ssh root key is installed...");
    await (0, exec_1.ensureFileContainsString)("/root/.ssh/authorized_keys", key);
}
exports.ensureSshRootAuthKey = ensureSshRootAuthKey;
async function getSshRootAuthKeys() {
    __1.logger.debug("Obtaining SSH root authorization keys from /root/.ssh/authorized_keys");
    const content = await (0, exec_1.getFileContents)("/root/.ssh/authorized_keys");
    const keys = content
        ? content
            .split("\n")
            .map((v) => v.trim())
            .filter((item) => item.length !== 0)
        : [];
    return keys;
}
exports.getSshRootAuthKeys = getSshRootAuthKeys;
async function setSshRootAuthKeys(keys) {
    __1.logger.info("Overwriting SSH root authorized keys in /root/.ssh/authorized_keys");
    const content = keys.join("\n");
    await (0, exec_1.ensureFileContents)("/root/.ssh/authorized_keys", content);
}
exports.setSshRootAuthKeys = setSshRootAuthKeys;
//# sourceMappingURL=ssh.js.map