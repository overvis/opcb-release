"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureUsbModeSwitchIsConfigured = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
// USB Mode Switch configuration
const umsConfig = `
# To enable an option, set it to "1", "yes" or "true" (case doesn't matter)
# Everything else counts as "disable"
DisableSwitching=0
DisableMBIMGlobal=0
EnableLogging=0
#SetStorageDelay=4
HuaweiAltModeGlobal=0
`;
// USB Mode Switch device list (switch device from 'Mass Storage device' to 'CDC NCM mode'...)
const umsDeviceList = {
    // Huawei E353(3.se) and others
    "12d1:1f01": `
# Huawei E353 (3.se) and others
# Switch from default mass storage device mode 12d1:1f01 to ...
TargetVendor=0x12d1
# WWAN mode 12d1:155e
TargetProduct=0x155e
MessageContent="55534243123456780000000000000011063000000100010000000000000000"
`,
};
// USB Mode Switch rules for udev (special rules for support non standart device's)
const umsUdevRules = `
# This file automatic generated by opcb
ACTION!="add|change", GOTO="opcb_gsm_rules_end"
SUBSYSTEM!="usb", ACTION!="add",, GOTO="opcb_gsm_rules_end"

# Add some rules here

LABEL="opcb_gsm_rules_end"
`;
/* Rule example
# Example Huawei E3531s
# ATTRS{idVendor}=="12d1", ATTRS{idProduct}=="1f01", \
ATTR{bInterfaceNumber}=="00", ATTR{bInterfaceClass}=="08", \
RUN+="/usr/sbin/usb_modeswitch -v $attr{idVendor} -p $attr{idProduct} -M 55534243123456780000000000000011063000000000010000000000000000"
# ATTRS{idVendor}=="12d1", ATTRS{idProduct}=="155e", \
ATTR{bInterfaceNumber}=="00", ATTR{bInterfaceClass}=="ff", \
RUN+="/bin/bash -c 'modprobe option && echo $attr{idVendor} $attr{idProduct} > /sys/bus/usb-serial/drivers/option1/new_id'"
# SUBSYSTEMS=="usb", ATTRS{modalias}=="usb:v12D1p155E*", KERNEL=="ttyUSB*", ATTRS{bInterfaceNumber}=="00", ATTRS{bInterfaceProtocol}=="ff", SYMLINK+="ttyUSB_GSM0"
# SUBSYSTEMS=="usb", ATTRS{modalias}=="usb:v12D1p155E*", KERNEL=="ttyUSB*", ATTRS{bInterfaceNumber}=="01", ATTRS{bInterfaceProtocol}=="ff", SYMLINK+="ttyUSB_GSM1"
# SUBSYSTEMS=="usb", ATTRS{modalias}=="usb:v12D1p155E*", KERNEL=="ttyUSB*", ATTRS{bInterfaceNumber}=="02", ATTRS{bInterfaceProtocol}=="ff", SYMLINK+="ttyUSB_GSM2"
*/
async function ensureUsbModeSwitchIsConfigured() {
    // Default path to the config of the usb_modeswitch `/etc/usb_modeswitch.conf`
    __1.logger.debug("Ensuring usb_modeswitch is configured...");
    const confPath = "/etc/usb_modeswitch.conf";
    await (0, exec_1.ensureFileContents)(confPath, umsConfig);
    const devPath = "/etc/usb_modeswitch.d";
    for (const dev in umsDeviceList) {
        await (0, exec_1.ensureFileContents)(`${devPath}/${dev}`, umsDeviceList[dev]);
    }
    const udevPath = "/etc/udev/rules.d/40-opcb-gsm.rules";
    const changed = await (0, exec_1.ensureFileContents)(udevPath, umsUdevRules);
    if (changed) {
        __1.logger.warn("Reloading udevadm since udev rules have changed.");
        await (0, exec_1.exec)("udevadm", ["control", "--reload-rules"]);
    }
}
exports.ensureUsbModeSwitchIsConfigured = ensureUsbModeSwitchIsConfigured;
//# sourceMappingURL=usbmodeswitch.js.map