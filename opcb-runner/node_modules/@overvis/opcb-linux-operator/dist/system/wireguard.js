"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureWireguardWatchdogIsInstalled = exports.ensureWireguardIsConfigured = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
async function ensureWireguardIsConfigured(config) {
    __1.logger.debug("Ensuring Wireguard is configured...");
    const result = {
        serviceEnabled: false,
    };
    // generate private key if not present
    let privateKey = config.privateKey;
    if (!privateKey) {
        __1.logger.debug("No private key is stored in config, generating new one...");
        privateKey = (await (0, exec_1.exec)("wg genkey")).trim();
        result.privateKey = privateKey;
    }
    if (!config.ipAddressCidr || !config.endpointPublicKey) {
        __1.logger.trace("Can't setup wireguard since the device is not registered...");
        return result;
    }
    // generate wg config
    const configContent = `[Interface]
PrivateKey = ${privateKey}
Address = ${config.ipAddressCidr}

[Peer]
PublicKey = ${config.endpointPublicKey}
AllowedIPs = ${config.endpointAllowedIpsCidr}
Endpoint = ${config.endpointHost}:${config.endpointPort}
PersistentKeepalive = ${config.persistentKeepalive}
`;
    const changed = await (0, exec_1.ensureFileContents)("/etc/wireguard/wg0.conf", configContent, 0o600);
    // enable wireguard
    await (0, exec_1.ensureServiceState)("wg-quick@wg0", true, changed ? "config file was changed" : undefined);
    result.serviceEnabled = true;
    return result;
}
exports.ensureWireguardIsConfigured = ensureWireguardIsConfigured;
async function ensureWireguardWatchdogIsInstalled(endpointIp) {
    __1.logger.debug("Ensuring Wireguard watchdog is installed...");
    const wgWatchdogCronFileContents = `*/10 * * * * root /bin/bash -c 'ping -c 1 -w 1 -q ${endpointIp} &>/dev/null || systemctl restart wg-quick@wg0.service'\n`;
    await (0, exec_1.ensureFileContents)("/etc/cron.d/wg-watchdog", wgWatchdogCronFileContents);
}
exports.ensureWireguardWatchdogIsInstalled = ensureWireguardWatchdogIsInstalled;
// generate public key from private key
// const publicKey = (await exec(`echo "${privateKey}" | wg pubkey`)).trim();
//# sourceMappingURL=wireguard.js.map