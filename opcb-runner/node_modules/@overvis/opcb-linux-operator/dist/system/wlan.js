"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultApSsid = exports.ensureWlanIsConfigured = void 0;
const __1 = require("..");
const exec_1 = require("../exec");
const elan_1 = require("./elan");
// eslint-disable-next-line @typescript-eslint/require-await
async function ensureWlanIsConfigured(config, vpnMotherlandServerIp, mac) {
    __1.logger.debug("Ensuring wlan is configured...");
    if (!config.networkInterfaceName) {
        __1.logger.info("No wlan interface name is specified. Ensuring that wifi is disabled.");
        await (0, elan_1.ensureDeviceDisconnected)("wlan0");
        // NOTE: don't turn radio off, because it may also turn off external usb wifi
        // await exec("nmcli", ["radio", "wifi", "off"]);
        return;
    }
    const out = await (0, exec_1.exec)("nmcli", ["-t", "radio", "wifi"]);
    if (out.trim() !== "enabled") {
        __1.logger.info("WiFi radio is disabled. Enabling...");
        await (0, exec_1.exec)("nmcli", ["radio", "wifi", "on"]);
    }
    const ssid = config.mode === "station"
        ? config.stationSettings.ssid
        : config.apSettings.ssid || defaultApSsid(mac);
    if (!ssid) {
        __1.logger.debug("No SSID is specified. Ensuring that wifi is disabled.");
        await (0, elan_1.ensureDeviceDisconnected)(config.networkInterfaceName);
        return;
    }
    // changing region
    await (0, exec_1.exec)("iw", ["reg", "set", config.country]);
    // create connection if it doesn't exist
    if (!(await (0, elan_1.connectionExists)("opcb-wlan"))) {
        __1.logger.warn("No opcb-wlan connection exists. Creating...");
        await (0, exec_1.exec)("nmcli", [
            "connection",
            "add",
            "con-name",
            "opcb-wlan",
            "ifname",
            config.networkInterfaceName,
            "type",
            "wifi",
            "ssid",
            ssid,
        ]);
    }
    const options = await (0, elan_1.getConnectionParams)("opcb-wlan");
    const changes = {};
    if (options["connection.interface-name"] !== config.networkInterfaceName) {
        changes["connection.interface-name"] = config.networkInterfaceName;
    }
    if (options["ipv6.method"] !== "ignore") {
        changes["ipv6.method"] = "ignore";
    }
    if (options["connection.autoconnect"] !== "yes") {
        changes["connection.autoconnect"] = "TRUE";
    }
    if (options["802-11-wireless.ssid"] !== ssid) {
        changes["802-11-wireless.ssid"] = ssid;
    }
    let wait = 15;
    if (config.mode === "station") {
        if (options["802-11-wireless.mode"] !== "infrastructure") {
            changes["802-11-wireless.mode"] = "infrastructure";
        }
        if (options["802-11-wireless.band"] !== "") {
            changes["802-11-wireless.band"] = "";
        }
        if (options["802-11-wireless.channel"] !== "0") {
            changes["802-11-wireless.channel"] = "";
        }
        if (config.stationSettings.dhcpIsEnabled) {
            if (options["ipv4.method"] !== "auto") {
                changes["ipv4.method"] = "auto";
            }
            if (options["ipv4.addresses"] !== "") {
                changes["ipv4.addresses"] = "";
            }
            if (options["ipv4.gateway"] !== "") {
                changes["ipv4.gateway"] = "";
            }
            if (options["ipv4.dns"] !== "") {
                changes["ipv4.dns"] = "";
            }
        }
        else {
            if (options["ipv4.method"] !== "manual") {
                changes["ipv4.method"] = "manual";
            }
            if (options["ipv4.addresses"] !==
                config.stationSettings.staticIpSettings.ipAddress + "/32") {
                changes["ipv4.addresses"] = config.stationSettings.staticIpSettings.ipAddress;
            }
            if (options["ipv4.gateway"] !== config.stationSettings.staticIpSettings.gateway) {
                changes["ipv4.gateway"] = config.stationSettings.staticIpSettings.gateway;
            }
            const dns = [
                config.stationSettings.staticIpSettings.primaryDns,
                config.stationSettings.staticIpSettings.secondaryDns,
            ].join(",");
            if (options["ipv4.dns"] !== dns) {
                changes["ipv4.dns"] = dns;
            }
        }
        if (options["ipv4.route-metric"] !== "100") {
            changes["ipv4.route-metric"] = "100";
        }
        wait = 25;
    }
    else {
        if (options["802-11-wireless.mode"] !== "ap") {
            changes["802-11-wireless.mode"] = "ap";
        }
        if (options["802-11-wireless.hidden"] !== "no") {
            changes["802-11-wireless.hidden"] = "FALSE";
        }
        if (options["802-11-wireless.band"] !== "bg") {
            changes["802-11-wireless.band"] = "bg";
        }
        if (options["802-11-wireless.channel"] !== "7") {
            changes["802-11-wireless.channel"] = "7";
        }
        if (options["ipv4.method"] !== "shared") {
            changes["ipv4.method"] = "shared";
        }
        if (options["ipv4.addresses"] !== config.apSettings.ipAddress + "/32") {
            changes["ipv4.addresses"] = config.apSettings.ipAddress;
        }
        if (options["ipv4.gateway"] !== "") {
            changes["ipv4.gateway"] = "";
        }
        if (options["ipv4.dns"] !== "") {
            changes["ipv4.dns"] = "";
        }
    }
    const pass = config.mode === "station" ? config.stationSettings.password : config.apSettings.password;
    // TODO_FUTURE: encode password
    if (pass) {
        if (options["802-11-wireless-security.key-mgmt"] !== "wpa-psk") {
            changes["802-11-wireless-security.key-mgmt"] = "wpa-psk";
        }
        if (options["802-11-wireless-security.psk"] !== pass) {
            changes["802-11-wireless-security.psk"] = pass;
        }
    }
    else {
        if (Object.keys(options).some((k) => k.startsWith("802-11-wireless-security."))) {
            await (0, exec_1.exec)("nmcli", [
                "connection",
                "modify",
                "opcb-wlan",
                "remove",
                "802-11-wireless-security",
            ]);
        }
    }
    await (0, elan_1.updateConnection)("opcb-wlan", config.networkInterfaceName, changes, vpnMotherlandServerIp, wait);
}
exports.ensureWlanIsConfigured = ensureWlanIsConfigured;
function defaultApSsid(mac) {
    return `OPCB_${mac.split(":").slice(3).join("").toUpperCase()}`;
}
exports.defaultApSsid = defaultApSsid;
//# sourceMappingURL=wlan.js.map