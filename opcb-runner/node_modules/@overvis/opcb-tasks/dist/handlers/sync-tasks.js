"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSyncTasksHandler = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const index_1 = require("../index");
function createSyncTasksHandler(runner, db) {
    const CREATE_TASK_STAT_REC_SQL = db.prepare(`insert into task_stats (task_id, filepath) values (@taskId, @filepath)
        on conflict do nothing;`);
    const GET_TASKS_SQL = db.prepare(`select * from tasks;`);
    return async () => {
        index_1.logger.debug("Got sync tasks command.");
        const taskRecords = GET_TASKS_SQL.all().map(opcb_ts_shared_1.nullToUndefined);
        index_1.logger.debug(`Got ${taskRecords.length} task records from DB.`);
        const newTasks = [];
        for (const rec of taskRecords) {
            const userJson = rec.user_json;
            const descriptor = {
                id: rec.id,
                filepath: rec.filepath,
                name: rec.name,
                description: rec.description,
                autorunOnStartup: !!rec.autorun_on_startup,
                logToStdout: !!rec.log_to_stdout,
                restart: rec.restart === "always"
                    ? "always"
                    : rec.restart === "on-success"
                        ? "on-success"
                        : "never",
                restartDelayMs: Number(rec.restart_delay_ms),
                userJson,
            };
            index_1.logger.debug(`Adding new task: #${descriptor.id} (${descriptor.name})`);
            newTasks.push(descriptor);
        }
        const currentTaskIds = runner.listTaskIds();
        for (const taskId of currentTaskIds) {
            if (newTasks.filter((e) => taskId === e.id).length < 1) {
                await runner.unregisterTask(taskId);
            }
        }
        for (const task of newTasks) {
            if (currentTaskIds.includes(task.id)) {
                runner.updateTask(task.id, {
                    autorunOnStartup: task.autorunOnStartup,
                    description: task.description,
                    logToStdout: task.logToStdout,
                    name: task.name,
                    restart: task.restart,
                    restartDelayMs: task.restartDelayMs,
                    userJson: task.userJson,
                });
            }
            else {
                CREATE_TASK_STAT_REC_SQL.run({ taskId: task.id, filepath: task.filepath });
                runner.registerTask(task);
            }
        }
    };
}
exports.createSyncTasksHandler = createSyncTasksHandler;
//# sourceMappingURL=sync-tasks.js.map