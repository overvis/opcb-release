"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.logger = void 0;
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const sync_tasks_1 = require("./handlers/sync-tasks");
const task_run_1 = require("./handlers/task-run");
const task_stop_1 = require("./handlers/task-stop");
const runner_1 = require("./runner");
async function run({ logger: setLogger, redisClient, sqliteDbPath, memSqliteDbPath, sqliteLibDir, redisUrl, }) {
    exports.logger = setLogger;
    exports.logger.info("Starting...");
    exports.logger.trace("Connecting to SQLite DBs...");
    const db = (0, opcb_ts_shared_1.connectSqlite)(sqliteDbPath, sqliteLibDir);
    const memdb = (0, opcb_ts_shared_1.connectSqlite)(memSqliteDbPath, sqliteLibDir);
    exports.logger.trace("Initializing module state in Redis tables...");
    await redisClient.setState({
        "tasks:totalTasksNum": 0,
        "tasks:runningTasksNum": 0,
        "tasks:failedTasksNum": 0,
    });
    const runner = new runner_1.TasksRunner({
        sqlite: { dbPath: sqliteDbPath, memDbPath: memSqliteDbPath, libDirPath: sqliteLibDir },
        redis: { url: redisUrl },
    }, (0, runner_1.makeRunnerCallbacks)(db, memdb, redisClient));
    exports.logger.trace("Subscribing to Redis bus commands...");
    redisClient.registerRequestHandler("sync-tasks", (0, sync_tasks_1.createSyncTasksHandler)(runner, db));
    redisClient.registerRequestHandler("task-run", (0, task_run_1.createTaskRunHandler)(runner));
    redisClient.registerRequestHandler("task-stop", (0, task_stop_1.createTaskStopHandler)(runner));
}
exports.run = run;
//# sourceMappingURL=index.js.map