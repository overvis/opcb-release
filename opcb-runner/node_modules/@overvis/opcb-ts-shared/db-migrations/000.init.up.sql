create table applied_migrations (
    id integer primary key not null check (id >= 0),
    file_name varchar not null,
    file_hash varchar not null,
    applied_at datetime default current_timestamp not null
);

create table devices (
    id uuid default (uuid()) primary key,
    created_on integer default current_timestamp not null,
    title text not null,
    orig_template_name text not null,
    template_obj text not null,
    interface varchar not null
);

create table lora_commands (
    id uuid default (uuid()) primary key,
    created_on integer default current_timestamp not null,
    device_id uuid references devices not null,
    command text not null,
    sent_on integer,
    result_received_on integer,
    result text
);

create table param_values (
    id uuid default (uuid()) primary key,
    received_on integer default current_timestamp not null,
    device_id uuid references devices not null,
    param_id text not null,
    value text
);

create table stored_registers (
    address integer primary key not null check (address >= 0 and address < 0x10000),
    value integer not null check (value >= 0 and value < 0x10000)
);

create table rs485_tty_connections (
    id uuid default (uuid()) primary key,
    sort_order integer not null unique check (sort_order >= 0),
    is_enabled bool not null,
    tty_device_name varchar not null
        check (length(tty_device_name) > 0 and length(tty_device_name) <= 30),
    mode varchar not null
        check (mode in ('rtu-master', 'ascii-master', 'rtu-slave', 'ascii-slave')),
    uid_range varchar not null,
    response_timeout_ms integer not null check (response_timeout_ms >= 0),
    baud_rate integer not null check (baud_rate >= 0),
    stop_and_parity_bits varchar not null
        check (stop_and_parity_bits in ('1N', '1E', '1O', '2N')),
    path_unavalable_code integer not null
        check (path_unavalable_code >= 0 and path_unavalable_code <= 128),
    target_device_failed_to_respond_code integer not null
        check (target_device_failed_to_respond_code >= 0 and
            target_device_failed_to_respond_code <= 128),
    port_open_retry_period integer not null,
    broadcast_is_enabled bool not null
);

create table modbus_tcp_client_connections (
    id uuid default (uuid()) primary key,
    sort_order integer not null unique check (sort_order >= 0),
    is_enabled bool not null,
    net_interface varchar not null check (net_interface in ('any', 'lo', 'elan', 'wlan')),
    uid_range varchar not null,
    parallel_requests_num integer not null check (parallel_requests_num >= 0),
    reconnection_period_sec integer not null check (reconnection_period_sec >= 0),
    remote_server_ip varchar not null,
    remote_server_port integer not null
        check (remote_server_port >= 1 and remote_server_port < 0x10000),
    response_timeout_ms integer not null check (response_timeout_ms >= 0),
    broadcast_is_enabled bool not null
);

create table users (
    id uuid default (uuid()) primary key,
    username varchar not null unique,
    password varchar not null,
    allow_auth_through_modbus bool not null,
    allow_auth_through_api bool not null,
    configuration_access varchar not null
        check (configuration_access in ('none', 'read', 'readWrite')),
    modbus_devices_access varchar not null
        check (configuration_access in ('none', 'read', 'readWrite'))
);

create table public_modbus_access_ranges (
    id uuid default (uuid()) primary key,
    device_uid varchar not null check (device_uid >= 0 and device_uid < 0x100),
    function_code integer not null check (function_code >= 0 and function_code < 128),
    address_range varchar not null check (address_range >= 0 and address_range < 0x10000)
);

-- TODO_FUTURE: indexes
