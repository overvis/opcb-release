"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
var tslib_1 = require("tslib");
var typebox_1 = require("@sinclair/typebox");
var value_1 = require("@sinclair/typebox/value");
var util_1 = require("util");
function getConfigNames(schema, prefix) {
    if (prefix === void 0) { prefix = ""; }
    var result = [];
    for (var _i = 0, _a = Object.entries(schema.properties); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (value[typebox_1.Kind] === "Object") {
            result.push.apply(result, getConfigNames(value, prefix + key + ":"));
        }
        else {
            result.push(prefix + key);
        }
    }
    return result;
}
function fillConfigObj(schema, obj, records, prefix) {
    if (prefix === void 0) { prefix = ""; }
    for (var _i = 0, _a = Object.entries(schema.properties); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (value[typebox_1.Kind] === "Object") {
            obj[key] = {};
            fillConfigObj(value, obj[key], records, prefix + key + ":");
        }
        else if (value[typebox_1.Kind] === "Boolean") {
            obj[key] = records[prefix + key] === "true";
        }
        else if (value[typebox_1.Kind] === "Integer" || value[typebox_1.Kind] === "Number") {
            obj[key] = Number(records[prefix + key]);
        }
        else {
            obj[key] = records[prefix + key];
        }
    }
}
function getConfig(bus, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var configNames, rawConfig, configObj, obj, err;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    configNames = getConfigNames(schema);
                    return [4 /*yield*/, bus.getConfs(configNames)];
                case 1:
                    rawConfig = _a.sent();
                    configObj = {};
                    fillConfigObj(schema, configObj, rawConfig);
                    if (!value_1.Value.Check(schema, configObj)) {
                        obj = (0, util_1.inspect)(configObj, false, 10, true);
                        err = (0, util_1.inspect)(tslib_1.__spreadArray([], Array.from(value_1.Value.Errors(schema, configObj)), true), false, 10, true);
                        throw new Error("Config check failed:\nObj:\n".concat(obj, "\nErr:\n").concat(err));
                    }
                    return [2 /*return*/, configObj];
            }
        });
    });
}
exports.getConfig = getConfig;
//# sourceMappingURL=config.js.map