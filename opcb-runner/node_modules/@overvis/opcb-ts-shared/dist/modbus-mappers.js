"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAPPERS = exports.ModbusMapper = void 0;
var tslib_1 = require("tslib");
var ModbusMapper = /** @class */ (function () {
    function ModbusMapper(address) {
        this.address = address;
    }
    ModbusMapper.prototype.shiftAddress = function (shift) {
        return new this.constructor(this.address + shift);
    };
    return ModbusMapper;
}());
exports.ModbusMapper = ModbusMapper;
var U8 = /** @class */ (function (_super) {
    tslib_1.__extends(U8, _super);
    function U8(address, multiplier) {
        if (multiplier === void 0) { multiplier = 1; }
        var _this = _super.call(this, address) || this;
        _this.multiplier = multiplier;
        return _this;
    }
    U8.prototype.toModbusValue = function (redisVal) {
        return new Uint16Array([
            this.multiplier ? Number(redisVal) * this.multiplier : Number(redisVal),
        ]);
    };
    U8.prototype.fromModbusValue = function (modbusVal) {
        var number = Number(modbusVal[0]);
        if (number < 0 || number > 255) {
            throw new Error("Expected 0-255, got ".concat(number));
        }
        return String(number);
    };
    U8.prototype.getRegisterAddresses = function () {
        return [this.address];
    };
    return U8;
}(ModbusMapper));
var U16 = /** @class */ (function (_super) {
    tslib_1.__extends(U16, _super);
    function U16(address, multiplier) {
        if (multiplier === void 0) { multiplier = 1; }
        var _this = _super.call(this, address) || this;
        _this.multiplier = multiplier;
        return _this;
    }
    U16.prototype.toModbusValue = function (redisVal) {
        return new Uint16Array([
            this.multiplier ? Number(redisVal) * this.multiplier : Number(redisVal),
        ]);
    };
    U16.prototype.fromModbusValue = function (modbusVal) {
        var number = Number(modbusVal[0]);
        if (number < 0 || number > 65535) {
            throw new Error("Expected 0-65535, got ".concat(number));
        }
        return String(number);
    };
    U16.prototype.getRegisterAddresses = function () {
        return [this.address];
    };
    return U16;
}(ModbusMapper));
var U16Literal = /** @class */ (function (_super) {
    tslib_1.__extends(U16Literal, _super);
    function U16Literal(address, literal) {
        var _this = _super.call(this, address) || this;
        _this.literal = literal;
        return _this;
    }
    U16Literal.prototype.toModbusValue = function (_redisVal) {
        return new Uint16Array([Number(this.literal)]);
    };
    U16Literal.prototype.fromModbusValue = function (modbusVal) {
        var number = Number(modbusVal[0]);
        if (number < 0 || number > 65535) {
            throw new Error("Expected 0-65535, got ".concat(number));
        }
        return String(number);
    };
    U16Literal.prototype.getRegisterAddresses = function () {
        return [this.address];
    };
    return U16Literal;
}(ModbusMapper));
var U16WithLiteral = /** @class */ (function (_super) {
    tslib_1.__extends(U16WithLiteral, _super);
    function U16WithLiteral(address, literal, multiplier) {
        if (multiplier === void 0) { multiplier = 1; }
        var _this = _super.call(this, address) || this;
        _this.literal = literal;
        _this.multiplier = multiplier;
        return _this;
    }
    U16WithLiteral.prototype.toModbusValue = function (redisVal) {
        if (Number.isNaN(redisVal) && redisVal !== this.literal) {
            redisVal = "65535";
        }
        return new Uint16Array([
            this.multiplier ? Number(redisVal) * this.multiplier : Number(redisVal),
        ]);
    };
    U16WithLiteral.prototype.fromModbusValue = function (modbusVal) {
        var number = Number(modbusVal[0]);
        if (number < 0 || number > 65535) {
            throw new Error("Expected 0-65535, got ".concat(number));
        }
        return String(number);
    };
    U16WithLiteral.prototype.getRegisterAddresses = function () {
        return [this.address];
    };
    return U16WithLiteral;
}(ModbusMapper));
var U32 = /** @class */ (function (_super) {
    tslib_1.__extends(U32, _super);
    function U32(address, multiplier) {
        if (multiplier === void 0) { multiplier = 1; }
        var _this = _super.call(this, address) || this;
        _this.multiplier = multiplier;
        return _this;
    }
    U32.prototype.toModbusValue = function (redisVal) {
        var number = Math.floor(this.multiplier ? Number(redisVal) * this.multiplier : Number(redisVal));
        return new Uint16Array([number >> 16, number & 0xffff]);
    };
    U32.prototype.fromModbusValue = function (modbusVal) {
        var number = (Number(modbusVal[0]) << 16) + Number(modbusVal[1]);
        if (number < 0 || number > 4294967295) {
            throw new Error("Expected 0-4294967295, got ".concat(number));
        }
        return String(number);
    };
    U32.prototype.getRegisterAddresses = function () {
        return [this.address, this.address + 1];
    };
    return U32;
}(ModbusMapper));
var Bool = /** @class */ (function (_super) {
    tslib_1.__extends(Bool, _super);
    function Bool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Bool.prototype.toModbusValue = function (redisVal) {
        var number = redisVal === "true" ? 1 : 0;
        return new Uint16Array([number]);
    };
    Bool.prototype.fromModbusValue = function (modbusVal) {
        var number = Number(modbusVal[0]);
        if (number !== 0 && number !== 1) {
            throw new Error("Expected 0 or 1, got ".concat(number));
        }
        return Boolean(number).toString();
    };
    Bool.prototype.getRegisterAddresses = function () {
        return [this.address];
    };
    return Bool;
}(ModbusMapper));
var Text = /** @class */ (function (_super) {
    tslib_1.__extends(Text, _super);
    function Text(address, length) {
        var _this = _super.call(this, address) || this;
        _this.length = length;
        return _this;
    }
    Text.prototype.shiftAddress = function (shift) {
        return new this.constructor(this.address + shift, this.length);
    };
    Text.prototype.toModbusValue = function (redisVal) {
        if (redisVal === null) {
            return new Uint16Array(this.length);
        }
        var arr = new Uint16Array(this.length);
        for (var i = 0; i < redisVal.length; i++) {
            arr[i] = redisVal.charCodeAt(i);
        }
        return arr;
    };
    Text.prototype.fromModbusValue = function (modbusVal) {
        var str = "";
        for (var i = 0; i < this.length; i++) {
            var charCode = Number(modbusVal[i]);
            if (charCode === 0) {
                break;
            }
            str += String.fromCharCode(charCode);
        }
        return str;
    };
    Text.prototype.getRegisterAddresses = function () {
        var _this = this;
        return Array.from(Array(this.length).keys()).map(function (i) { return _this.address + i; });
    };
    return Text;
}(ModbusMapper));
var Enum = /** @class */ (function (_super) {
    tslib_1.__extends(Enum, _super);
    function Enum(address, values) {
        var _this = _super.call(this, address) || this;
        _this.values = values;
        return _this;
    }
    Enum.prototype.shiftAddress = function (shift) {
        return new this.constructor(this.address + shift, this.values);
    };
    Enum.prototype.toModbusValue = function (redisVal) {
        var index = this.values[redisVal];
        return new Uint16Array([index]);
    };
    Enum.prototype.fromModbusValue = function (modbusVal) {
        var index = Number(modbusVal[0]);
        var item = Object.entries(this.values).find(function (_a) {
            var value = _a[1];
            return value === index;
        });
        if (item === undefined) {
            throw new Error("Expected one of: ".concat(Object.keys(this.values).join(", "), ", got ").concat(index));
        }
        var key = item[0];
        return key;
    };
    Enum.prototype.getRegisterAddresses = function () {
        return [this.address];
    };
    return Enum;
}(ModbusMapper));
var IPv4 = /** @class */ (function (_super) {
    tslib_1.__extends(IPv4, _super);
    function IPv4() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IPv4.prototype.toModbusValue = function (redisVal) {
        if (redisVal === null) {
            return new Uint16Array(new Array(4).fill(0));
        }
        var arr = new Uint16Array(4);
        var parts = redisVal.split(".");
        for (var i = 0; i < parts.length; i++) {
            arr[i] = Number(parts[i]);
        }
        return arr;
    };
    IPv4.prototype.fromModbusValue = function (modbusVal) {
        var numbers = [];
        for (var i = 0; i < 4; i++) {
            var number = Number(modbusVal[i]);
            if (number < 0 || number > 255) {
                throw new Error("Expected 0-255, got ".concat(number));
            }
            numbers.push(number);
        }
        return numbers.join(".");
    };
    IPv4.prototype.getRegisterAddresses = function () {
        var _this = this;
        return Array.from(Array(4).keys()).map(function (i) { return _this.address + i; });
    };
    return IPv4;
}(ModbusMapper));
var Mac = /** @class */ (function (_super) {
    tslib_1.__extends(Mac, _super);
    function Mac() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Mac.prototype.toModbusValue = function (redisVal) {
        if (redisVal === null) {
            return new Uint16Array(new Array(6).fill(0));
        }
        var arr = new Uint16Array(6);
        var parts = redisVal.split(":");
        for (var i = 0; i < parts.length; i++) {
            arr[i] = parseInt(parts[i], 16);
        }
        return arr;
    };
    Mac.prototype.fromModbusValue = function (modbusVal) {
        var numbers = [];
        for (var i = 0; i < 6; i++) {
            var number = Number(modbusVal[i]);
            if (number < 0 || number > 255) {
                throw new Error("Expected 0-255, got ".concat(number));
            }
            numbers.push(number);
        }
        return numbers.map(function (n) { return n.toString(16).padStart(2, "0"); }).join(":");
    };
    Mac.prototype.getRegisterAddresses = function () {
        var _this = this;
        return Array.from(Array(6).keys()).map(function (i) { return _this.address + i; });
    };
    return Mac;
}(ModbusMapper));
exports.MAPPERS = {
    U8: U8,
    U16: U16,
    U16Literal: U16Literal,
    U16WithLiteral: U16WithLiteral,
    U32: U32,
    Bool: Bool,
    Text: Text,
    Enum: Enum,
    IPv4: IPv4,
    Mac: Mac,
};
//# sourceMappingURL=modbus-mappers.js.map