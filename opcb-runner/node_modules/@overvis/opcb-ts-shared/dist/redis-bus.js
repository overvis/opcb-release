"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisBus = exports.STATE_PREFIX = exports.CONFIG_PREFIX = exports.Upgrade = exports.SetTime = exports.FinalizeManufacturing = exports.GenPubKeyResponse = exports.GenPubKey = exports.RerenderLabelImage = exports.DeviceStateEnsured = exports.EnableUserActiveMode = exports.Done = exports.UpdateList = exports.ResetConfig = exports.RebootDevice = exports.RestartRuntime = exports.SetOvervisActivationCode = exports.UnbindOvervisReverseConnection = exports.DropOvervisReverseConnection = exports.ModbusRequest = exports.ModbusResponse = exports.SyncSession = exports.SyncRouting = exports.SyncConfig = exports.SetConfig = exports.ConfigValidationResponse = exports.ConfigValidationErrorCode = void 0;
var tslib_1 = require("tslib");
var ioredis_1 = tslib_1.__importDefault(require("ioredis"));
var CmdStreamMessage = /** @class */ (function () {
    function CmdStreamMessage() {
    }
    CmdStreamMessage.fromMsg = function (_msg) {
        throw new Error("unimplemented");
    };
    return CmdStreamMessage;
}());
var ConfigValidationErrorCode;
(function (ConfigValidationErrorCode) {
    ConfigValidationErrorCode[ConfigValidationErrorCode["IncorrectKey"] = 1] = "IncorrectKey";
    ConfigValidationErrorCode[ConfigValidationErrorCode["IncorrectValue"] = 2] = "IncorrectValue";
})(ConfigValidationErrorCode = exports.ConfigValidationErrorCode || (exports.ConfigValidationErrorCode = {}));
var ConfigValidationResponse = /** @class */ (function (_super) {
    tslib_1.__extends(ConfigValidationResponse, _super);
    function ConfigValidationResponse(status) {
        var _this = _super.call(this) || this;
        _this.status = status;
        _this.cmd = "config-resp";
        return _this;
    }
    ConfigValidationResponse.fromMsg = function (msg) {
        var status = "ok";
        if ("ERROR" in msg) {
            var err = msg.ERROR.toString();
            if (err !== "0") {
                switch (Number(msg.ERROR)) {
                    case ConfigValidationErrorCode.IncorrectKey:
                        status = {
                            code: ConfigValidationErrorCode.IncorrectKey,
                            key: msg.ERRPARAM.toString(),
                        };
                        break;
                    case ConfigValidationErrorCode.IncorrectValue:
                        status = {
                            code: ConfigValidationErrorCode.IncorrectValue,
                            key: msg.ERRPARAM.toString(),
                        };
                        break;
                    default:
                        throw new Error("unknown error code: ".concat(err));
                }
            }
        }
        return new ConfigValidationResponse(status);
    };
    ConfigValidationResponse.prototype.toMsg = function () {
        var msg = {};
        if (this.status === "ok") {
            msg.ERROR = Buffer.from("0");
        }
        else {
            msg.ERROR = Buffer.from(this.status.code.toString());
            msg.ERRPARAM = Buffer.from(this.status.key);
        }
        return msg;
    };
    return ConfigValidationResponse;
}(CmdStreamMessage));
exports.ConfigValidationResponse = ConfigValidationResponse;
var SetConfig = /** @class */ (function (_super) {
    tslib_1.__extends(SetConfig, _super);
    function SetConfig(values, validateOnly, setAsFactoryValue) {
        if (validateOnly === void 0) { validateOnly = false; }
        if (setAsFactoryValue === void 0) { setAsFactoryValue = false; }
        var _this = _super.call(this) || this;
        _this.values = values;
        _this.validateOnly = validateOnly;
        _this.setAsFactoryValue = setAsFactoryValue;
        _this.cmd = "set-config";
        return _this;
    }
    SetConfig.fromMsg = function (msg) {
        var values = Object.fromEntries(Object.entries(msg)
            .filter(function (v) {
            return !["CMD", "DST", "FCT", "SRC", "REQID", "VALIDATE"].includes(v[0]) &&
                !(v[1][0] === 255 && v[1].length === 1);
        })
            .map(function (v) { return [v[0], v[1].toString()]; }));
        var delKeys = Object.entries(msg)
            .filter(function (v) {
            return !["CMD", "DST", "FCT", "SRC", "REQID", "VALIDATE"].includes(v[0]) &&
                v[1][0] === 255 &&
                v[1].length === 1;
        })
            .map(function (v) { return v[0]; });
        return new SetConfig(tslib_1.__assign(tslib_1.__assign({}, values), Object.fromEntries(delKeys.map(function (k) { return [k, null]; }))), "VALIDATE" in msg && msg.VALIDATE.toString() === "1", "FCT" in msg && msg.FCT.toString() === "1");
    };
    SetConfig.prototype.toMsg = function () {
        var obj = Object.fromEntries(Object.entries(this.values).map(function (v) { return [
            v[0],
            v[1] === null ? Buffer.from([255]) : Buffer.from(v[1]),
        ]; }));
        var msg = tslib_1.__assign({}, obj);
        if (this.setAsFactoryValue) {
            msg.FCT = Buffer.from("1");
        }
        if (this.validateOnly) {
            msg.VALIDATE = Buffer.from("1");
        }
        return msg;
    };
    return SetConfig;
}(CmdStreamMessage));
exports.SetConfig = SetConfig;
var SyncConfig = /** @class */ (function (_super) {
    tslib_1.__extends(SyncConfig, _super);
    function SyncConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sync-config";
        return _this;
    }
    SyncConfig.fromMsg = function (_msg) {
        return new SyncConfig();
    };
    SyncConfig.prototype.toMsg = function () {
        return {};
    };
    return SyncConfig;
}(CmdStreamMessage));
exports.SyncConfig = SyncConfig;
var SyncRouting = /** @class */ (function (_super) {
    tslib_1.__extends(SyncRouting, _super);
    function SyncRouting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sync-routing";
        return _this;
    }
    SyncRouting.fromMsg = function (_msg) {
        return new SyncRouting();
    };
    SyncRouting.prototype.toMsg = function () {
        return {};
    };
    return SyncRouting;
}(CmdStreamMessage));
exports.SyncRouting = SyncRouting;
var SyncSession = /** @class */ (function (_super) {
    tslib_1.__extends(SyncSession, _super);
    function SyncSession(sessionKey) {
        var _this = _super.call(this) || this;
        _this.sessionKey = sessionKey;
        _this.cmd = "sync-session";
        return _this;
    }
    SyncSession.fromMsg = function (msg) {
        if (!msg.KEY) {
            throw new Error("missing KEY field");
        }
        return new SyncSession(msg.KEY.toString());
    };
    SyncSession.prototype.toMsg = function () {
        return {
            KEY: Buffer.from(this.sessionKey),
        };
    };
    return SyncSession;
}(CmdStreamMessage));
exports.SyncSession = SyncSession;
var ModbusResponse = /** @class */ (function (_super) {
    tslib_1.__extends(ModbusResponse, _super);
    function ModbusResponse(data, type, errorCode) {
        var _this = _super.call(this) || this;
        _this.data = data;
        _this.type = type;
        _this.errorCode = errorCode;
        _this.cmd = "modbus-resp";
        return _this;
    }
    ModbusResponse.fromMsg = function (msg) {
        if (!msg.ERROR) {
            throw new Error("missing ERROR field");
        }
        var errStr = msg.ERROR.toString();
        return new ModbusResponse(msg.DATA, msg.TYPE.toString() === "0" ? "as-is" : "rtu-no-crc", errStr === "NONE" ? undefined : errStr);
    };
    ModbusResponse.prototype.toMsg = function () {
        var msg = { DATA: this.data };
        msg.TYPE = Buffer.from(this.type === "rtu-no-crc" ? "1" : "0");
        if (this.errorCode !== undefined) {
            msg.ERROR = Buffer.from(this.errorCode);
        }
        else {
            msg.ERROR = Buffer.from("NONE");
        }
        return msg;
    };
    return ModbusResponse;
}(CmdStreamMessage));
exports.ModbusResponse = ModbusResponse;
var ModbusRequest = /** @class */ (function (_super) {
    tslib_1.__extends(ModbusRequest, _super);
    function ModbusRequest(data, type) {
        var _this = _super.call(this) || this;
        _this.data = data;
        _this.type = type;
        _this.cmd = "modbus-req";
        return _this;
    }
    ModbusRequest.fromMsg = function (msg) {
        return new ModbusRequest(msg.DATA, msg.TYPE.toString() === "0" ? "as-is" : "rtu-no-crc");
    };
    ModbusRequest.prototype.toMsg = function () {
        return { DATA: this.data, TYPE: Buffer.from(this.type === "rtu-no-crc" ? "1" : "0") };
    };
    return ModbusRequest;
}(CmdStreamMessage));
exports.ModbusRequest = ModbusRequest;
var DropOvervisReverseConnection = /** @class */ (function (_super) {
    tslib_1.__extends(DropOvervisReverseConnection, _super);
    function DropOvervisReverseConnection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "drop-overvis-rc";
        return _this;
    }
    DropOvervisReverseConnection.fromMsg = function (_msg) {
        return new DropOvervisReverseConnection();
    };
    DropOvervisReverseConnection.prototype.toMsg = function () {
        return {};
    };
    return DropOvervisReverseConnection;
}(CmdStreamMessage));
exports.DropOvervisReverseConnection = DropOvervisReverseConnection;
var UnbindOvervisReverseConnection = /** @class */ (function (_super) {
    tslib_1.__extends(UnbindOvervisReverseConnection, _super);
    function UnbindOvervisReverseConnection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "unbind-overvis-rc";
        return _this;
    }
    UnbindOvervisReverseConnection.fromMsg = function (_msg) {
        return new UnbindOvervisReverseConnection();
    };
    UnbindOvervisReverseConnection.prototype.toMsg = function () {
        return {};
    };
    return UnbindOvervisReverseConnection;
}(CmdStreamMessage));
exports.UnbindOvervisReverseConnection = UnbindOvervisReverseConnection;
var SetOvervisActivationCode = /** @class */ (function (_super) {
    tslib_1.__extends(SetOvervisActivationCode, _super);
    function SetOvervisActivationCode(code) {
        var _this = _super.call(this) || this;
        _this.code = code;
        _this.cmd = "set-overvis-ac";
        return _this;
    }
    SetOvervisActivationCode.fromMsg = function (msg) {
        return new SetOvervisActivationCode(msg.AC.toString());
    };
    SetOvervisActivationCode.prototype.toMsg = function () {
        return {
            AC: Buffer.from(this.code),
        };
    };
    return SetOvervisActivationCode;
}(CmdStreamMessage));
exports.SetOvervisActivationCode = SetOvervisActivationCode;
var RestartRuntime = /** @class */ (function (_super) {
    tslib_1.__extends(RestartRuntime, _super);
    function RestartRuntime() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "restart-runtime";
        return _this;
    }
    RestartRuntime.fromMsg = function (_msg) {
        return new RestartRuntime();
    };
    RestartRuntime.prototype.toMsg = function () {
        return {};
    };
    return RestartRuntime;
}(CmdStreamMessage));
exports.RestartRuntime = RestartRuntime;
var RebootDevice = /** @class */ (function (_super) {
    tslib_1.__extends(RebootDevice, _super);
    function RebootDevice() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "reboot";
        return _this;
    }
    RebootDevice.fromMsg = function (_msg) {
        return new RebootDevice();
    };
    RebootDevice.prototype.toMsg = function () {
        return {};
    };
    return RebootDevice;
}(CmdStreamMessage));
exports.RebootDevice = RebootDevice;
var ResetConfig = /** @class */ (function (_super) {
    tslib_1.__extends(ResetConfig, _super);
    function ResetConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "reset-config";
        return _this;
    }
    ResetConfig.fromMsg = function (_msg) {
        return new ResetConfig();
    };
    ResetConfig.prototype.toMsg = function () {
        return {};
    };
    return ResetConfig;
}(CmdStreamMessage));
exports.ResetConfig = ResetConfig;
var UpdateList = /** @class */ (function (_super) {
    tslib_1.__extends(UpdateList, _super);
    function UpdateList(name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.cmd = "update-list";
        return _this;
    }
    UpdateList.fromMsg = function (msg) {
        var listName = msg.NAME.toString();
        if (listName !== "aps" && listName !== "netifs" && listName !== "serials") {
            throw new Error("Unknown list name: ".concat(listName));
        }
        return new UpdateList(listName);
    };
    UpdateList.prototype.toMsg = function () {
        return { NAME: Buffer.from(this.name) };
    };
    return UpdateList;
}(CmdStreamMessage));
exports.UpdateList = UpdateList;
var Done = /** @class */ (function (_super) {
    tslib_1.__extends(Done, _super);
    function Done() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "done";
        return _this;
    }
    Done.fromMsg = function (_msg) {
        return new Done();
    };
    Done.prototype.toMsg = function () {
        return {};
    };
    return Done;
}(CmdStreamMessage));
exports.Done = Done;
var EnableUserActiveMode = /** @class */ (function (_super) {
    tslib_1.__extends(EnableUserActiveMode, _super);
    function EnableUserActiveMode(timeMs) {
        var _this = _super.call(this) || this;
        _this.timeMs = timeMs;
        _this.cmd = "user-active";
        return _this;
    }
    EnableUserActiveMode.fromMsg = function (msg) {
        if (!msg.TIME) {
            throw new Error("Missing TIME");
        }
        return new EnableUserActiveMode(Number(msg.TIME.toString()));
    };
    EnableUserActiveMode.prototype.toMsg = function () {
        return { TIME: Buffer.from(this.timeMs.toString()) };
    };
    return EnableUserActiveMode;
}(CmdStreamMessage));
exports.EnableUserActiveMode = EnableUserActiveMode;
var DeviceStateEnsured = /** @class */ (function (_super) {
    tslib_1.__extends(DeviceStateEnsured, _super);
    function DeviceStateEnsured() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "dev-state";
        return _this;
    }
    DeviceStateEnsured.fromMsg = function (_msg) {
        return new DeviceStateEnsured();
    };
    DeviceStateEnsured.prototype.toMsg = function () {
        return {};
    };
    return DeviceStateEnsured;
}(CmdStreamMessage));
exports.DeviceStateEnsured = DeviceStateEnsured;
var RerenderLabelImage = /** @class */ (function (_super) {
    tslib_1.__extends(RerenderLabelImage, _super);
    function RerenderLabelImage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "rerender-label";
        return _this;
    }
    RerenderLabelImage.fromMsg = function (_msg) {
        return new RerenderLabelImage();
    };
    RerenderLabelImage.prototype.toMsg = function () {
        return {};
    };
    return RerenderLabelImage;
}(CmdStreamMessage));
exports.RerenderLabelImage = RerenderLabelImage;
var GenPubKey = /** @class */ (function (_super) {
    tslib_1.__extends(GenPubKey, _super);
    function GenPubKey(privateKey) {
        var _this = _super.call(this) || this;
        _this.privateKey = privateKey;
        _this.cmd = "gen-pub-key";
        return _this;
    }
    GenPubKey.fromMsg = function (msg) {
        if (!msg.PRIVATE_KEY) {
            throw new Error("Missing PRIVATE_KEY");
        }
        return new GenPubKey(msg.PRIVATE_KEY.toString());
    };
    GenPubKey.prototype.toMsg = function () {
        return { PRIVATE_KEY: Buffer.from(this.privateKey) };
    };
    return GenPubKey;
}(CmdStreamMessage));
exports.GenPubKey = GenPubKey;
var GenPubKeyResponse = /** @class */ (function (_super) {
    tslib_1.__extends(GenPubKeyResponse, _super);
    function GenPubKeyResponse(result) {
        var _this = _super.call(this) || this;
        _this.result = result;
        _this.cmd = "gen-pub-key-resp";
        return _this;
    }
    GenPubKeyResponse.fromMsg = function (msg) {
        if (msg.ERROR) {
            return new GenPubKeyResponse({ error: msg.ERROR.toString() });
        }
        return new GenPubKeyResponse({ publicKey: msg.PUBLIC_KEY.toString() });
    };
    GenPubKeyResponse.prototype.toMsg = function () {
        if ("error" in this.result) {
            return { ERROR: Buffer.from(this.result.error) };
        }
        return { PUBLIC_KEY: Buffer.from(this.result.publicKey) };
    };
    return GenPubKeyResponse;
}(CmdStreamMessage));
exports.GenPubKeyResponse = GenPubKeyResponse;
var FinalizeManufacturing = /** @class */ (function (_super) {
    tslib_1.__extends(FinalizeManufacturing, _super);
    function FinalizeManufacturing() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "fin-mf";
        return _this;
    }
    FinalizeManufacturing.fromMsg = function (_msg) {
        return new FinalizeManufacturing();
    };
    FinalizeManufacturing.prototype.toMsg = function () {
        return {};
    };
    return FinalizeManufacturing;
}(CmdStreamMessage));
exports.FinalizeManufacturing = FinalizeManufacturing;
var SetTime = /** @class */ (function (_super) {
    tslib_1.__extends(SetTime, _super);
    function SetTime(time) {
        var _this = _super.call(this) || this;
        _this.time = time;
        _this.cmd = "set-time";
        return _this;
    }
    SetTime.fromMsg = function (msg) {
        if (!msg.TIME) {
            throw new Error("Missing TIME");
        }
        return new SetTime(msg.TIME.toString());
    };
    SetTime.prototype.toMsg = function () {
        return {
            TIME: Buffer.from(this.time),
        };
    };
    return SetTime;
}(CmdStreamMessage));
exports.SetTime = SetTime;
var Upgrade = /** @class */ (function (_super) {
    tslib_1.__extends(Upgrade, _super);
    function Upgrade(ref) {
        var _this = _super.call(this) || this;
        _this.ref = ref;
        _this.cmd = "upgrade";
        return _this;
    }
    Upgrade.fromMsg = function (msg) {
        if (!msg.REF) {
            throw new Error("Missing REF");
        }
        return new Upgrade(msg.REF.toString());
    };
    Upgrade.prototype.toMsg = function () {
        return {
            REF: Buffer.from(this.ref),
        };
    };
    return Upgrade;
}(CmdStreamMessage));
exports.Upgrade = Upgrade;
exports.CONFIG_PREFIX = "config:";
exports.STATE_PREFIX = "state:";
function prefixKeys(dict, prefix) {
    return [
        Object.fromEntries(Object.entries(dict)
            .filter(function (v) { return v[1] !== null && v[1] !== undefined; })
            .map(function (v) { return [prefix + v[0], v[1]]; })),
        Object.entries(dict)
            .filter(function (v) { return v[1] === null || v[1] === undefined; })
            .map(function (v) { return prefix + v[0]; }),
    ];
}
function notNull(v) {
    return v === null ? undefined : v;
}
function readFromTable(redis, prefix, keys) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var prefixedKeys, newPrefixedKeys, _i, prefixedKeys_1, key, unfoldedKeys, result, values, i, _a, keys_1, key;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!!keys) return [3 /*break*/, 2];
                    return [4 /*yield*/, redis.keys(prefix + "*")];
                case 1:
                    prefixedKeys = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    prefixedKeys = keys.map(function (v) { return prefix + v; });
                    _b.label = 3;
                case 3:
                    newPrefixedKeys = [];
                    _i = 0, prefixedKeys_1 = prefixedKeys;
                    _b.label = 4;
                case 4:
                    if (!(_i < prefixedKeys_1.length)) return [3 /*break*/, 8];
                    key = prefixedKeys_1[_i];
                    if (!key.includes("*")) return [3 /*break*/, 6];
                    return [4 /*yield*/, redis.keys(key)];
                case 5:
                    unfoldedKeys = _b.sent();
                    newPrefixedKeys.push.apply(newPrefixedKeys, unfoldedKeys);
                    return [3 /*break*/, 7];
                case 6:
                    newPrefixedKeys.push(key);
                    _b.label = 7;
                case 7:
                    _i++;
                    return [3 /*break*/, 4];
                case 8:
                    prefixedKeys = newPrefixedKeys;
                    result = {};
                    if (prefixedKeys.length < 1) {
                        return [2 /*return*/, result];
                    }
                    return [4 /*yield*/, redis.mget(prefixedKeys)];
                case 9:
                    values = _b.sent();
                    for (i = 0; i < prefixedKeys.length; i++) {
                        result[prefixedKeys[i].slice(prefix.length)] = notNull(values[i]);
                    }
                    if (keys) {
                        for (_a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
                            key = keys_1[_a];
                            if (!(key in result) && !key.includes("*")) {
                                result[key] = undefined;
                            }
                        }
                    }
                    return [2 /*return*/, result];
            }
        });
    });
}
function getMsgFromFields(fields) {
    var msg = {};
    for (var i = 0; i < fields.length; i += 2) {
        var key = fields[i].toString();
        msg[key] = fields[i + 1];
    }
    if (!("CMD" in msg)) {
        throw new Error("No CMD in command stream message: " + JSON.stringify(msg));
    }
    if (!("SRC" in msg)) {
        throw new Error("No SRC in command stream message: " + JSON.stringify(msg));
    }
    var res = {
        CMD: msg.CMD.toString(),
        SRC: msg.SRC.toString(),
        msg: msg,
    };
    if (msg.DST) {
        res.DST = msg.DST.toString();
    }
    if (msg.REQID) {
        res.REQID = msg.REQID.toString();
    }
    return res;
}
function deserializeObjFromMsg(msg) {
    var cmd = msg.CMD;
    var cleanMsg = msg.msg;
    switch (cmd) {
        case "set-config":
            return SetConfig.fromMsg(cleanMsg);
        case "config-resp":
            return ConfigValidationResponse.fromMsg(cleanMsg);
        case "reset-config":
            return ResetConfig.fromMsg(cleanMsg);
        case "sync-config":
            return SyncConfig.fromMsg(cleanMsg);
        case "sync-routing":
            return SyncRouting.fromMsg(cleanMsg);
        case "modbus-resp":
            return ModbusResponse.fromMsg(cleanMsg);
        case "modbus-req":
            return ModbusRequest.fromMsg(cleanMsg);
        case "drop-overvis-rc":
            return DropOvervisReverseConnection.fromMsg(cleanMsg);
        case "unbind-overvis-rc":
            return UnbindOvervisReverseConnection.fromMsg(cleanMsg);
        case "set-overvis-ac":
            return SetOvervisActivationCode.fromMsg(cleanMsg);
        case "restart-runtime":
            return RestartRuntime.fromMsg(cleanMsg);
        case "reboot":
            return RebootDevice.fromMsg(cleanMsg);
        case "update-list":
            return UpdateList.fromMsg(cleanMsg);
        case "done":
            return Done.fromMsg(cleanMsg);
        case "user-active":
            return EnableUserActiveMode.fromMsg(cleanMsg);
        case "dev-state":
            return DeviceStateEnsured.fromMsg(cleanMsg);
        case "rerender-label":
            return RerenderLabelImage.fromMsg(cleanMsg);
        case "gen-pub-key":
            return GenPubKey.fromMsg(cleanMsg);
        case "gen-pub-key-resp":
            return GenPubKeyResponse.fromMsg(cleanMsg);
        case "fin-mf":
            return FinalizeManufacturing.fromMsg(cleanMsg);
        case "set-time":
            return SetTime.fromMsg(cleanMsg);
        case "upgrade":
            return Upgrade.fromMsg(cleanMsg);
        default:
            throw new Error("Unknown command ".concat(cmd));
    }
}
function serializeObjToMsg(obj, src, dst, reqId) {
    var msg = obj.toMsg();
    var res = {
        CMD: obj.cmd,
        SRC: src,
        msg: msg,
    };
    if (dst) {
        res.DST = dst;
    }
    if (reqId) {
        res.REQID = reqId.toString();
    }
    return res;
}
var CMD_STREAM_NAME = Buffer.from("bus");
function defaultProcessAsyncError(logger, cmdName, err) {
    // TODO_FUTURE: sentry
    logger.fatal(err, "Error in bus message handler for command ".concat(cmdName, ": ").concat(err.message));
    setTimeout(function () { return process.exit(1); }, 3000);
}
var RedisBus = /** @class */ (function () {
    function RedisBus(connectString, name, logger, processAsyncError) {
        if (processAsyncError === void 0) { processAsyncError = function (cmdName, err) {
            defaultProcessAsyncError(logger, cmdName, err);
        }; }
        this.name = name;
        this.logger = logger;
        this.processAsyncError = processAsyncError;
        this.requestHandlers = {};
        this.responseHandlers = {};
        this.awaitedCmds = {};
        this.shouldAbortListen = false;
        this.redis = new ioredis_1.default(connectString, { enableAutoPipelining: true, lazyConnect: true });
    }
    RedisBus.prototype.clearCmdStream = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.del(CMD_STREAM_NAME)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.setConfs = function (setValues) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, prefixed, delKeys, _i, delKeys_1, key, keys;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.name !== "CFG") {
                            throw new Error("Module other than config manager (".concat(this.name, ") tried to set config."));
                        }
                        _a = prefixKeys(setValues, exports.CONFIG_PREFIX), prefixed = _a[0], delKeys = _a[1];
                        if (!(delKeys.length > 0)) return [3 /*break*/, 6];
                        _i = 0, delKeys_1 = delKeys;
                        _b.label = 1;
                    case 1:
                        if (!(_i < delKeys_1.length)) return [3 /*break*/, 4];
                        key = delKeys_1[_i];
                        if (!key.endsWith("*")) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, this.redis.keys(key)];
                    case 2:
                        keys = _b.sent();
                        delKeys.push.apply(delKeys, keys);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, this.redis.del(delKeys)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(Object.keys(prefixed).length > 0)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.redis.mset(prefixed)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    // TODO_FUTURE: set type Keys as flatten config
    RedisBus.prototype.getConfs = function (keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, readFromTable(this.redis, exports.CONFIG_PREFIX, keys)];
            });
        });
    };
    RedisBus.prototype.setState = function (dict) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, values, delKeys, _i, delKeys_2, key, keys;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = prefixKeys(dict, exports.STATE_PREFIX), values = _a[0], delKeys = _a[1];
                        if (!(delKeys.length > 0)) return [3 /*break*/, 6];
                        _i = 0, delKeys_2 = delKeys;
                        _b.label = 1;
                    case 1:
                        if (!(_i < delKeys_2.length)) return [3 /*break*/, 4];
                        key = delKeys_2[_i];
                        if (!key.endsWith("*")) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, this.redis.keys(key)];
                    case 2:
                        keys = _b.sent();
                        delKeys.push.apply(delKeys, keys);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, this.redis.del(delKeys)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(Object.keys(values).length > 0)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.redis.mset(values)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.getState = function (keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, readFromTable(this.redis, exports.STATE_PREFIX, keys)];
            });
        });
    };
    /*
    session:<id>:access:configuration = rw
    session:<id>:access:modbusDevices = r
    session:<id>:username = admin
    session:<id>:initOn = 1234567890
    */
    RedisBus.prototype.createSession = function (key) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.set("session:".concat(key, ":initOn"), Date.now())];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.deleteSession = function (key) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keys, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.watch("session:".concat(key, ":initOn"))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.redis.keys("session:".concat(key, ":*"))];
                    case 2:
                        keys = _a.sent();
                        return [4 /*yield*/, this.redis.multi().del(keys).exec()];
                    case 3:
                        res = _a.sent();
                        return [4 /*yield*/, this.redis.unwatch()];
                    case 4:
                        _a.sent();
                        if (res === null) {
                            return [2 /*return*/, false];
                        }
                        // await this.sendMsg(new SyncSession(key));
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisBus.prototype.upgradeSession = function (key, username, access) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keys, res;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.redis.watch("session:".concat(key, ":initOn"))];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.redis.keys("session:".concat(key, ":initOn"))];
                    case 2:
                        keys = _b.sent();
                        res = null;
                        if (!(keys.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.redis
                                .multi()
                                .mset((_a = {},
                                _a["session:".concat(key, ":username")] = username,
                                _a["session:".concat(key, ":access:configuration")] = access.configuration,
                                _a["session:".concat(key, ":access:modbusDevices")] = access.modbusDevices,
                                _a))
                                .exec()];
                    case 3:
                        res = _b.sent();
                        _b.label = 4;
                    case 4: return [4 /*yield*/, this.redis.unwatch()];
                    case 5:
                        _b.sent();
                        if (res === null) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.sendMsg(new SyncSession(key))];
                    case 6:
                        _b.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisBus.prototype.listenCmdStreamForever = function (testMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var redis, lastId, msg, messages, _loop_1, this_1, _i, messages_1, message;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        redis = this.redis.duplicate();
                        lastId = Buffer.from("0");
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [4 /*yield*/, redis.xreadBuffer("BLOCK", testMode ? 10 : 0, "STREAMS", CMD_STREAM_NAME, lastId)];
                    case 2:
                        msg = _a.sent();
                        if (this.shouldAbortListen) {
                            return [2 /*return*/];
                        }
                        if (msg === null) {
                            return [3 /*break*/, 1];
                        }
                        messages = msg[0][1];
                        _loop_1 = function (message) {
                            var id = message[0], fields = message[1];
                            lastId = id;
                            var msg_1 = getMsgFromFields(fields);
                            if (msg_1.REQID && this_1.responseHandlers[msg_1.REQID]) {
                                var handler_1 = this_1.responseHandlers[msg_1.REQID];
                                delete this_1.responseHandlers[msg_1.REQID];
                                handler_1(deserializeObjFromMsg(msg_1));
                            }
                            if (msg_1.CMD && this_1.awaitedCmds[msg_1.CMD]) {
                                var handlers = this_1.awaitedCmds[msg_1.CMD];
                                var obj = deserializeObjFromMsg(msg_1);
                                for (var _b = 0, handlers_1 = handlers; _b < handlers_1.length; _b++) {
                                    var handler_2 = handlers_1[_b];
                                    handler_2(obj);
                                }
                                delete this_1.awaitedCmds[msg_1.CMD];
                            }
                            if (!(msg_1.CMD in this_1.requestHandlers)) {
                                return "continue";
                            }
                            if ("DST" in msg_1 && msg_1.DST !== "any" && msg_1.DST !== this_1.name) {
                                return "continue";
                            }
                            var handler = this_1.requestHandlers[msg_1.CMD];
                            handler(deserializeObjFromMsg(msg_1))
                                .then(function (result) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var respMsg;
                                return tslib_1.__generator(this, function (_a) {
                                    if (result !== undefined) {
                                        respMsg = serializeObjToMsg(result, this.name, msg_1.SRC, id);
                                        return [2 /*return*/, this.sendRawMsg(respMsg)];
                                    }
                                    return [2 /*return*/, undefined];
                                });
                            }); })
                                .catch(function (err) { return _this.processAsyncError(msg_1.CMD, err); });
                        };
                        this_1 = this;
                        for (_i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
                            message = messages_1[_i];
                            _loop_1(message);
                        }
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.abortListen = function () {
        this.shouldAbortListen = true;
    };
    RedisBus.prototype.sendRawMsg = function (msg) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawMsg, res;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        rawMsg = tslib_1.__assign({ CMD: msg.CMD, SRC: msg.SRC }, msg.msg);
                        if (msg.DST) {
                            rawMsg.DST = msg.DST;
                        }
                        if (msg.REQID) {
                            rawMsg.REQID = msg.REQID;
                        }
                        return [4 /*yield*/, (_a = this.redis).xadd.apply(_a, tslib_1.__spreadArray([CMD_STREAM_NAME, "*"], Object.entries(rawMsg).flat(), false))];
                    case 1:
                        res = _b.sent();
                        if (res === null) {
                            throw new Error("Received null on xadd: " + JSON.stringify(msg));
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    RedisBus.prototype.sendMsg = function (cmd) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        msg = serializeObjToMsg(cmd, this.name);
                        return [4 /*yield*/, this.sendRawMsg(msg)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.sendRequest = function (req, dst) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg, msgId;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        msg = serializeObjToMsg(req, this.name, dst);
                        return [4 /*yield*/, this.sendRawMsg(msg)];
                    case 1:
                        msgId = _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, _reject) {
                                _this.responseHandlers[msgId] = function (resp) {
                                    resolve(resp);
                                };
                            })];
                }
            });
        });
    };
    RedisBus.prototype.registerRequestHandler = function (cmd, handler) {
        if (this.requestHandlers[cmd]) {
            throw new Error("Request handler for ".concat(cmd, " already registered."));
        }
        this.requestHandlers[cmd] = handler;
    };
    RedisBus.prototype.setList = function (name, list) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.redis.del(name)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, (_a = this.redis).rpush.apply(_a, tslib_1.__spreadArray([name], list, false))];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.getList = function (name) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.redis.lrange(name, 0, -1)];
            });
        });
    };
    RedisBus.prototype.waitForMsg = function (cmdName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, _reject) {
                        if (!_this.awaitedCmds[cmdName]) {
                            _this.awaitedCmds[cmdName] = [];
                        }
                        _this.awaitedCmds[cmdName].push(function (cmd) {
                            resolve(cmd);
                        });
                    })];
            });
        });
    };
    RedisBus.prototype.waitForNextMsg = function (lastId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg, _a, _id, fields;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.redis.xreadBuffer("BLOCK", 0, "STREAMS", CMD_STREAM_NAME, Buffer.from(lastId))];
                    case 1:
                        msg = _b.sent();
                        if (msg === null) {
                            throw new Error("Received null on xreadBuffer");
                        }
                        _a = msg[0][1][0], _id = _a[0], fields = _a[1];
                        return [2 /*return*/, deserializeObjFromMsg(getMsgFromFields(fields))];
                }
            });
        });
    };
    RedisBus.prototype.logStream = function (name, msgCallback, onError) {
        var state = { interrupt: false };
        var interrupter = function () {
            state.interrupt = true;
        };
        logStream(this.redis.duplicate(), name, msgCallback, state).catch(onError);
        return interrupter;
    };
    RedisBus.prototype.writeLogStream = function (name, kind, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.xadd(name, "*", "DATE", Date.now(), "KIND", kind, "PAYLOAD", payload)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisBus.prototype.getLastMsgId = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var info;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.xinfo("STREAM", CMD_STREAM_NAME)];
                    case 1:
                        info = (_a.sent());
                        return [2 /*return*/, info[info.indexOf("last-entry") + 1][0]];
                }
            });
        });
    };
    return RedisBus;
}());
exports.RedisBus = RedisBus;
function logStream(redis, name, msgCallback, state) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var oldMsgs, lastId, _i, oldMsgs_1, msg, msgs, _a, _b, msg;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, redis.xrevrangeBuffer(name, "+", "-", "COUNT", 20)];
                case 1:
                    oldMsgs = _c.sent();
                    oldMsgs.reverse();
                    lastId = "$";
                    for (_i = 0, oldMsgs_1 = oldMsgs; _i < oldMsgs_1.length; _i++) {
                        msg = oldMsgs_1[_i];
                        msgCallback(msg[1]);
                        lastId = msg[0].toString();
                    }
                    _c.label = 2;
                case 2:
                    if (!!state.interrupt) return [3 /*break*/, 4];
                    return [4 /*yield*/, redis.xreadBuffer("COUNT", 100, "BLOCK", 1000, "STREAMS", name, lastId)];
                case 3:
                    msgs = _c.sent();
                    if (msgs !== null) {
                        for (_a = 0, _b = msgs[0][1]; _a < _b.length; _a++) {
                            msg = _b[_a];
                            msgCallback(msg[1]);
                            lastId = msg[0].toString();
                        }
                    }
                    return [3 /*break*/, 2];
                case 4:
                    redis.disconnect();
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=redis-bus.js.map