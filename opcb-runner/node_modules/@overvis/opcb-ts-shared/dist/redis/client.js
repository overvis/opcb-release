"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClient = void 0;
var tslib_1 = require("tslib");
var ioredis_1 = tslib_1.__importDefault(require("ioredis"));
var index_1 = require("./index");
var cmd_1 = require("./cmd");
var log_1 = require("./log");
var msg_1 = require("./msg");
var deserialize_1 = require("./deserialize");
var table_1 = require("./table");
var actor_1 = require("./actor");
var RedisClient = /** @class */ (function () {
    function RedisClient(connectString, logger) {
        this.logger = logger;
        this.requestHandlers = {};
        this.responseHandlers = {};
        this.awaitedCmds = {};
        this.shouldAbortListen = false;
        this.redis = new ioredis_1.default(connectString, {
            enableAutoPipelining: true,
            lazyConnect: true,
            connectTimeout: 1000,
            // commandTimeout: 1000,
        });
    }
    RedisClient.prototype.clear = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.flushall()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.clearCmdStream = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.del(index_1.CMD_STREAM_NAME)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.setConfs = function (setValues) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, prefixed, delKeys, _i, delKeys_1, key, keys;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = (0, table_1.prefixKeys)(setValues, index_1.CONFIG_PREFIX), prefixed = _a[0], delKeys = _a[1];
                        if (!(delKeys.length > 0)) return [3 /*break*/, 6];
                        _i = 0, delKeys_1 = delKeys;
                        _b.label = 1;
                    case 1:
                        if (!(_i < delKeys_1.length)) return [3 /*break*/, 4];
                        key = delKeys_1[_i];
                        if (!key.endsWith("*")) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, this.redis.keys(key)];
                    case 2:
                        keys = _b.sent();
                        delKeys.push.apply(delKeys, keys);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, this.redis.del(delKeys)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(Object.keys(prefixed).length > 0)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.redis.mset(prefixed)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    // TODO_FUTURE: set type Keys as flatten config
    RedisClient.prototype.getConfs = function (keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, (0, table_1.readFromTable)(this.redis, index_1.CONFIG_PREFIX, keys)];
            });
        });
    };
    RedisClient.prototype.setState = function (dict) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, values, delKeys, _i, delKeys_2, key, keys;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = (0, table_1.prefixKeys)(dict, index_1.STATE_PREFIX), values = _a[0], delKeys = _a[1];
                        if (!(delKeys.length > 0)) return [3 /*break*/, 6];
                        _i = 0, delKeys_2 = delKeys;
                        _b.label = 1;
                    case 1:
                        if (!(_i < delKeys_2.length)) return [3 /*break*/, 4];
                        key = delKeys_2[_i];
                        if (!key.endsWith("*")) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, this.redis.keys(key)];
                    case 2:
                        keys = _b.sent();
                        delKeys.push.apply(delKeys, keys);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, this.redis.del(delKeys)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(Object.keys(values).length > 0)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.redis.mset(values)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.getState = function (keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, (0, table_1.readFromTable)(this.redis, index_1.STATE_PREFIX, keys)];
            });
        });
    };
    /*
    session:<id>:access:configuration = rw
    session:<id>:access:modbusDevices = r
    session:<id>:username = admin
    session:<id>:initOn = 1234567890
    */
    RedisClient.prototype.createSession = function (key) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.set("session:".concat(key, ":initOn"), Date.now())];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.deleteSession = function (key) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keys, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.watch("session:".concat(key, ":initOn"))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.redis.keys("session:".concat(key, ":*"))];
                    case 2:
                        keys = _a.sent();
                        return [4 /*yield*/, this.redis.multi().del(keys).exec()];
                    case 3:
                        res = _a.sent();
                        return [4 /*yield*/, this.redis.unwatch()];
                    case 4:
                        _a.sent();
                        if (res === null) {
                            return [2 /*return*/, false];
                        }
                        // await this.sendMsg(new SyncSession(key));
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisClient.prototype.upgradeSession = function (src, key, username, access) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keys, res;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.redis.watch("session:".concat(key, ":initOn"))];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.redis.keys("session:".concat(key, ":initOn"))];
                    case 2:
                        keys = _b.sent();
                        res = null;
                        if (!(keys.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.redis
                                .multi()
                                .mset((_a = {},
                                _a["session:".concat(key, ":username")] = username,
                                _a["session:".concat(key, ":access:configuration")] = access.configuration,
                                _a["session:".concat(key, ":access:modbusDevices")] = access.modbusDevices,
                                _a))
                                .exec()];
                    case 3:
                        res = _b.sent();
                        _b.label = 4;
                    case 4: return [4 /*yield*/, this.redis.unwatch()];
                    case 5:
                        _b.sent();
                        if (res === null) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.sendMsg(src, new cmd_1.SyncSession(key))];
                    case 6:
                        _b.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisClient.prototype.listenCmdStreamForever = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.listenCmdStream()];
            });
        });
    };
    RedisClient.prototype.listenCmdStream = function (testMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var redis, lastId, error, msg, messages, _loop_1, this_1, _i, messages_1, message;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        redis = this.redis.duplicate();
                        lastId = Buffer.from("0");
                        _a.label = 1;
                    case 1:
                        if (!!error) return [3 /*break*/, 3];
                        return [4 /*yield*/, redis.xreadBuffer("BLOCK", testMode ? 10 : 0, "STREAMS", index_1.CMD_STREAM_NAME, lastId)];
                    case 2:
                        msg = _a.sent();
                        if (this.shouldAbortListen) {
                            return [2 /*return*/];
                        }
                        if (msg === null) {
                            return [3 /*break*/, 1];
                        }
                        messages = msg[0][1];
                        _loop_1 = function (message) {
                            var id = message[0], fields = message[1];
                            lastId = id;
                            var msg_2 = (0, msg_1.getMsgFromFields)(fields);
                            if (msg_2.REQID && this_1.responseHandlers[msg_2.REQID]) {
                                var handler = this_1.responseHandlers[msg_2.REQID];
                                handler((0, deserialize_1.deserializeObjFromMsg)(msg_2));
                                delete this_1.responseHandlers[msg_2.REQID];
                            }
                            if (this_1.awaitedCmds[msg_2.CMD]) {
                                var handlers = this_1.awaitedCmds[msg_2.CMD];
                                var obj_1 = (0, deserialize_1.deserializeObjFromMsg)(msg_2);
                                for (var _b = 0, handlers_1 = handlers; _b < handlers_1.length; _b++) {
                                    var handler = handlers_1[_b];
                                    handler(obj_1);
                                }
                                delete this_1.awaitedCmds[msg_2.CMD];
                            }
                            if (!(msg_2.CMD in this_1.requestHandlers)) {
                                return "continue";
                            }
                            var allHandlers = this_1.requestHandlers[msg_2.CMD];
                            var msgDst = "DST" in msg_2 && msg_2.DST !== "any" ? msg_2.DST : undefined;
                            if (msgDst && !(msgDst in allHandlers)) {
                                return "continue";
                            }
                            var obj = (0, deserialize_1.deserializeObjFromMsg)(msg_2);
                            var _loop_2 = function (dst) {
                                if (msgDst && msgDst !== dst) {
                                    return "continue";
                                }
                                var handler = allHandlers[dst];
                                handler(obj)
                                    .then(function (result) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var respMsg;
                                    return tslib_1.__generator(this, function (_a) {
                                        if (result !== undefined) {
                                            respMsg = (0, msg_1.serializeObjToMsg)(result, dst, msg_2.SRC, id);
                                            return [2 /*return*/, this.sendRawMsg(respMsg)];
                                        }
                                        return [2 /*return*/, undefined];
                                    });
                                }); })
                                    // eslint-disable-next-line no-loop-func
                                    .catch(function (err) {
                                    _this.logger.fatal(err, "Error in bus message handler for command ".concat(msg_2.CMD));
                                    error = err;
                                });
                            };
                            for (var dst in allHandlers) {
                                _loop_2(dst);
                            }
                        };
                        this_1 = this;
                        for (_i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
                            message = messages_1[_i];
                            _loop_1(message);
                        }
                        return [3 /*break*/, 1];
                    case 3: throw error;
                }
            });
        });
    };
    RedisClient.prototype.abortListen = function () {
        this.shouldAbortListen = true;
    };
    RedisClient.prototype.sendRawMsg = function (msg) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawMsg, res;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        rawMsg = tslib_1.__assign({ CMD: msg.CMD, SRC: msg.SRC }, msg.msg);
                        if (msg.DST) {
                            rawMsg.DST = msg.DST;
                        }
                        if (msg.REQID) {
                            rawMsg.REQID = msg.REQID;
                        }
                        return [4 /*yield*/, (_a = this.redis).xadd.apply(_a, tslib_1.__spreadArray([index_1.CMD_STREAM_NAME, "*"], Object.entries(rawMsg).flat(), false))];
                    case 1:
                        res = _b.sent();
                        if (res === null) {
                            throw new Error("Received null on xadd: " + JSON.stringify(msg));
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    RedisClient.prototype.sendMsg = function (src, cmd) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        msg = (0, msg_1.serializeObjToMsg)(cmd, src);
                        return [4 /*yield*/, this.sendRawMsg(msg)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.sendRequest = function (req, src, dst) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg, msgId;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        msg = (0, msg_1.serializeObjToMsg)(req, src, dst);
                        return [4 /*yield*/, this.sendRawMsg(msg)];
                    case 1:
                        msgId = _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, _reject) {
                                // TODO_FUTURE: abort / timeout / clean handlers
                                _this.responseHandlers[msgId] = function (resp) {
                                    resolve(resp);
                                };
                            })];
                }
            });
        });
    };
    RedisClient.prototype.registerRequestHandler = function (dst, cmd, handler) {
        if (!this.requestHandlers[cmd]) {
            this.requestHandlers[cmd] = {};
        }
        var allHandlers = this.requestHandlers[cmd];
        if (allHandlers[dst]) {
            throw new Error("Request handler for ".concat(cmd, " on dst ").concat(dst, " is already registered."));
        }
        allHandlers[dst] = handler;
    };
    RedisClient.prototype.setList = function (name, list) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.redis.del(name)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, (_a = this.redis).rpush.apply(_a, tslib_1.__spreadArray([name], list, false))];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.getList = function (name) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.redis.lrange(name, 0, -1)];
            });
        });
    };
    RedisClient.prototype.waitForMsg = function (cmdName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, _reject) {
                        if (!_this.awaitedCmds[cmdName]) {
                            _this.awaitedCmds[cmdName] = [];
                        }
                        _this.awaitedCmds[cmdName].push(function (cmd) {
                            resolve(cmd);
                        });
                    })];
            });
        });
    };
    RedisClient.prototype.waitForNextMsg = function (lastId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var redis, msg, _a, _id, fields;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        redis = this.redis.duplicate();
                        return [4 /*yield*/, redis.xreadBuffer("BLOCK", 0, "STREAMS", index_1.CMD_STREAM_NAME, Buffer.from(lastId))];
                    case 1:
                        msg = _b.sent();
                        if (msg === null) {
                            throw new Error("Received null on xreadBuffer");
                        }
                        _a = msg[0][1][0], _id = _a[0], fields = _a[1];
                        return [2 /*return*/, (0, deserialize_1.deserializeObjFromMsg)((0, msg_1.getMsgFromFields)(fields))];
                }
            });
        });
    };
    RedisClient.prototype.listenLogStream = function (name, msgCallback, onError) {
        var state = { interrupt: false };
        var interrupter = function () {
            state.interrupt = true;
        };
        (0, log_1.logStream)(this.redis.duplicate(), name, msgCallback, state).catch(onError);
        return interrupter;
    };
    RedisClient.prototype.writeLogStream = function (name, kind, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.xadd(name, "*", "DATE", Date.now(), "KIND", kind, "PAYLOAD", payload)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RedisClient.prototype.getLastMsgId = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var info;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redis.xinfo("STREAM", index_1.CMD_STREAM_NAME)];
                    case 1:
                        info = (_a.sent());
                        return [2 /*return*/, info[info.indexOf("last-entry") + 1][0]];
                }
            });
        });
    };
    RedisClient.prototype.getStreamInfo = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.redis.xinfo("STREAM", index_1.CMD_STREAM_NAME)];
            });
        });
    };
    RedisClient.prototype.getActorClient = function (actor) {
        if (actor === "CFG") {
            return new actor_1.CfgRedisClient(this, actor);
        }
        else if (actor === "LIN") {
            return new actor_1.LinRedisClient(this, actor);
        }
        else if (actor === "API") {
            return new actor_1.ApiRedisClient(this, actor);
        }
        else if (actor === "VIR") {
            return new actor_1.VirRedisClient(this, actor);
        }
        else if (actor === "TST") {
            return new actor_1.TestRedisClient(this, actor);
        }
        else {
            return new actor_1.ActorRedisClient(this, actor);
        }
    };
    return RedisClient;
}());
exports.RedisClient = RedisClient;
//# sourceMappingURL=client.js.map