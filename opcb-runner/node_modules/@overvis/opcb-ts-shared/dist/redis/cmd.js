"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CmdStreamMessage = exports.StartSdCardSpeedTest = exports.SetSshAuthKeys = exports.InitTasksProject = exports.LoraSensAdvertise = exports.LoraSensLog = exports.RecompileTasks = exports.SyncDevices = exports.BlacklistLoraSensDevice = exports.Upgrade = exports.SetTime = exports.FinalizeManufacturing = exports.GenPubKeyResponse = exports.GenPubKey = exports.RerenderLabelImage = exports.DeviceStateEnsured = exports.EnableUserActiveMode = exports.Done = exports.TaskStop = exports.TaskRun = exports.UpdateList = exports.ResetConfig = exports.RebootDevice = exports.RestartRuntime = exports.SetOvervisActivationCode = exports.UnbindOvervisReverseConnection = exports.DropOvervisReverseConnection = exports.ModbusRequest = exports.ModbusResponse = exports.SyncSession = exports.SyncTasks = exports.SyncRouting = exports.SyncConfig = exports.SetConfig = exports.ConfigValidationResponse = exports.ConfigValidationErrorCode = void 0;
var tslib_1 = require("tslib");
var msg_1 = require("./msg");
Object.defineProperty(exports, "CmdStreamMessage", { enumerable: true, get: function () { return msg_1.CmdStreamMessage; } });
var ConfigValidationErrorCode;
(function (ConfigValidationErrorCode) {
    ConfigValidationErrorCode[ConfigValidationErrorCode["IncorrectKey"] = 1] = "IncorrectKey";
    ConfigValidationErrorCode[ConfigValidationErrorCode["IncorrectValue"] = 2] = "IncorrectValue";
})(ConfigValidationErrorCode || (exports.ConfigValidationErrorCode = ConfigValidationErrorCode = {}));
var ConfigValidationResponse = /** @class */ (function (_super) {
    tslib_1.__extends(ConfigValidationResponse, _super);
    function ConfigValidationResponse(status) {
        var _this = _super.call(this) || this;
        _this.status = status;
        _this.cmd = "config-resp";
        return _this;
    }
    ConfigValidationResponse.fromMsg = function (msg) {
        var status = "ok";
        if ("ERROR" in msg) {
            var err = msg.ERROR.toString();
            if (err !== "0") {
                switch (Number(msg.ERROR)) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison
                    case ConfigValidationErrorCode.IncorrectKey:
                        status = {
                            code: ConfigValidationErrorCode.IncorrectKey,
                            key: msg.ERRPARAM.toString(),
                        };
                        break;
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison
                    case ConfigValidationErrorCode.IncorrectValue:
                        status = {
                            code: ConfigValidationErrorCode.IncorrectValue,
                            key: msg.ERRPARAM.toString(),
                        };
                        break;
                    default:
                        throw new Error("unknown error code: ".concat(err));
                }
            }
        }
        return new ConfigValidationResponse(status);
    };
    ConfigValidationResponse.prototype.toMsg = function () {
        var msg = {};
        if (this.status === "ok") {
            msg.ERROR = Buffer.from("0");
        }
        else {
            msg.ERROR = Buffer.from(this.status.code.toString());
            msg.ERRPARAM = Buffer.from(this.status.key);
        }
        return msg;
    };
    return ConfigValidationResponse;
}(msg_1.CmdStreamMessage));
exports.ConfigValidationResponse = ConfigValidationResponse;
var SetConfig = /** @class */ (function (_super) {
    tslib_1.__extends(SetConfig, _super);
    function SetConfig(values, validateOnly, context) {
        if (validateOnly === void 0) { validateOnly = false; }
        if (context === void 0) { context = "config"; }
        var _this = _super.call(this) || this;
        _this.values = values;
        _this.validateOnly = validateOnly;
        _this.context = context;
        _this.cmd = "set-config";
        return _this;
    }
    SetConfig.fromMsg = function (msg) {
        var values = Object.fromEntries(Object.entries(msg)
            .filter(function (v) {
            return !["CMD", "DST", "CFG", "FCT", "SRC", "REQID", "VALIDATE"].includes(v[0]) &&
                !(v[1][0] === 255 && v[1].length === 1);
        })
            .map(function (v) { return [v[0], v[1].toString()]; }));
        var delKeys = Object.entries(msg)
            .filter(function (v) {
            return !["CMD", "DST", "CFG", "FCT", "SRC", "REQID", "VALIDATE"].includes(v[0]) &&
                v[1][0] === 255 &&
                v[1].length === 1;
        })
            .map(function (v) { return v[0]; });
        var context = "config";
        var fct = "FCT" in msg && msg.FCT.toString() === "1";
        var cfg = "CFG" in msg && msg.CFG.toString() === "1";
        if (fct && cfg) {
            context = "both";
        }
        else if (fct) {
            context = "factory";
        }
        else if (!fct && !cfg && !("CFG" in msg || "FCT" in msg)) {
            throw new Error("CFG=".concat(msg.CFG.toString(), " and FCT=").concat(msg.FCT.toString()));
        }
        return new SetConfig(tslib_1.__assign(tslib_1.__assign({}, values), Object.fromEntries(delKeys.map(function (k) { return [k, null]; }))), "VALIDATE" in msg && msg.VALIDATE.toString() === "1", context);
    };
    SetConfig.prototype.toMsg = function () {
        var msg = Object.fromEntries(Object.entries(this.values).map(function (v) { return [
            v[0],
            v[1] === null ? Buffer.from([255]) : Buffer.from(v[1]),
        ]; }));
        if (this.context === "both") {
            msg.CFG = Buffer.from("1");
            msg.FCT = Buffer.from("1");
        }
        else if (this.context === "factory") {
            msg.FCT = Buffer.from("1");
        }
        else {
            msg.CFG = Buffer.from("1");
        }
        if (this.validateOnly) {
            msg.VALIDATE = Buffer.from("1");
        }
        return msg;
    };
    return SetConfig;
}(msg_1.CmdStreamMessage));
exports.SetConfig = SetConfig;
var SyncConfig = /** @class */ (function (_super) {
    tslib_1.__extends(SyncConfig, _super);
    function SyncConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sync-config";
        return _this;
    }
    SyncConfig.fromMsg = function (_msg) {
        return new SyncConfig();
    };
    SyncConfig.prototype.toMsg = function () {
        return {};
    };
    return SyncConfig;
}(msg_1.CmdStreamMessage));
exports.SyncConfig = SyncConfig;
var SyncRouting = /** @class */ (function (_super) {
    tslib_1.__extends(SyncRouting, _super);
    function SyncRouting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sync-routing";
        return _this;
    }
    SyncRouting.fromMsg = function (_msg) {
        return new SyncRouting();
    };
    SyncRouting.prototype.toMsg = function () {
        return {};
    };
    return SyncRouting;
}(msg_1.CmdStreamMessage));
exports.SyncRouting = SyncRouting;
var SyncTasks = /** @class */ (function (_super) {
    tslib_1.__extends(SyncTasks, _super);
    function SyncTasks() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sync-tasks";
        return _this;
    }
    SyncTasks.fromMsg = function (_msg) {
        return new SyncTasks();
    };
    SyncTasks.prototype.toMsg = function () {
        return {};
    };
    return SyncTasks;
}(msg_1.CmdStreamMessage));
exports.SyncTasks = SyncTasks;
var SyncSession = /** @class */ (function (_super) {
    tslib_1.__extends(SyncSession, _super);
    function SyncSession(sessionKey) {
        var _this = _super.call(this) || this;
        _this.sessionKey = sessionKey;
        _this.cmd = "sync-session";
        return _this;
    }
    SyncSession.fromMsg = function (msg) {
        if (!msg.KEY) {
            throw new Error("missing KEY field");
        }
        return new SyncSession(msg.KEY.toString());
    };
    SyncSession.prototype.toMsg = function () {
        return {
            KEY: Buffer.from(this.sessionKey),
        };
    };
    return SyncSession;
}(msg_1.CmdStreamMessage));
exports.SyncSession = SyncSession;
var ModbusResponse = /** @class */ (function (_super) {
    tslib_1.__extends(ModbusResponse, _super);
    function ModbusResponse(data, type, errorCode) {
        var _this = _super.call(this) || this;
        _this.data = data;
        _this.type = type;
        _this.errorCode = errorCode;
        _this.cmd = "modbus-resp";
        return _this;
    }
    ModbusResponse.fromMsg = function (msg) {
        if (!msg.ERROR) {
            throw new Error("missing ERROR field");
        }
        var errStr = msg.ERROR.toString();
        return new ModbusResponse(msg.DATA, msg.TYPE.toString() === "0" ? "as-is" : "rtu-no-crc", errStr === "NONE" ? undefined : errStr);
    };
    ModbusResponse.prototype.toMsg = function () {
        var msg = { DATA: this.data };
        msg.TYPE = Buffer.from(this.type === "rtu-no-crc" ? "1" : "0");
        if (this.errorCode !== undefined) {
            msg.ERROR = Buffer.from(this.errorCode);
        }
        else {
            msg.ERROR = Buffer.from("NONE");
        }
        return msg;
    };
    return ModbusResponse;
}(msg_1.CmdStreamMessage));
exports.ModbusResponse = ModbusResponse;
var ModbusRequest = /** @class */ (function (_super) {
    tslib_1.__extends(ModbusRequest, _super);
    function ModbusRequest(data, type) {
        var _this = _super.call(this) || this;
        _this.data = data;
        _this.type = type;
        _this.cmd = "modbus-req";
        return _this;
    }
    ModbusRequest.fromMsg = function (msg) {
        return new ModbusRequest(msg.DATA, msg.TYPE.toString() === "0" ? "as-is" : "rtu-no-crc");
    };
    ModbusRequest.prototype.toMsg = function () {
        return { DATA: this.data, TYPE: Buffer.from(this.type === "rtu-no-crc" ? "1" : "0") };
    };
    return ModbusRequest;
}(msg_1.CmdStreamMessage));
exports.ModbusRequest = ModbusRequest;
var DropOvervisReverseConnection = /** @class */ (function (_super) {
    tslib_1.__extends(DropOvervisReverseConnection, _super);
    function DropOvervisReverseConnection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "drop-overvis-rc";
        return _this;
    }
    DropOvervisReverseConnection.fromMsg = function (_msg) {
        return new DropOvervisReverseConnection();
    };
    DropOvervisReverseConnection.prototype.toMsg = function () {
        return {};
    };
    return DropOvervisReverseConnection;
}(msg_1.CmdStreamMessage));
exports.DropOvervisReverseConnection = DropOvervisReverseConnection;
var UnbindOvervisReverseConnection = /** @class */ (function (_super) {
    tslib_1.__extends(UnbindOvervisReverseConnection, _super);
    function UnbindOvervisReverseConnection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "unbind-overvis-rc";
        return _this;
    }
    UnbindOvervisReverseConnection.fromMsg = function (_msg) {
        return new UnbindOvervisReverseConnection();
    };
    UnbindOvervisReverseConnection.prototype.toMsg = function () {
        return {};
    };
    return UnbindOvervisReverseConnection;
}(msg_1.CmdStreamMessage));
exports.UnbindOvervisReverseConnection = UnbindOvervisReverseConnection;
var SetOvervisActivationCode = /** @class */ (function (_super) {
    tslib_1.__extends(SetOvervisActivationCode, _super);
    function SetOvervisActivationCode(code) {
        var _this = _super.call(this) || this;
        _this.code = code;
        _this.cmd = "set-overvis-ac";
        return _this;
    }
    SetOvervisActivationCode.fromMsg = function (msg) {
        return new SetOvervisActivationCode(msg.AC.toString());
    };
    SetOvervisActivationCode.prototype.toMsg = function () {
        return {
            AC: Buffer.from(this.code),
        };
    };
    return SetOvervisActivationCode;
}(msg_1.CmdStreamMessage));
exports.SetOvervisActivationCode = SetOvervisActivationCode;
var RestartRuntime = /** @class */ (function (_super) {
    tslib_1.__extends(RestartRuntime, _super);
    function RestartRuntime() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "restart-runtime";
        return _this;
    }
    RestartRuntime.fromMsg = function (_msg) {
        return new RestartRuntime();
    };
    RestartRuntime.prototype.toMsg = function () {
        return {};
    };
    return RestartRuntime;
}(msg_1.CmdStreamMessage));
exports.RestartRuntime = RestartRuntime;
var RebootDevice = /** @class */ (function (_super) {
    tslib_1.__extends(RebootDevice, _super);
    function RebootDevice() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "reboot";
        return _this;
    }
    RebootDevice.fromMsg = function (_msg) {
        return new RebootDevice();
    };
    RebootDevice.prototype.toMsg = function () {
        return {};
    };
    return RebootDevice;
}(msg_1.CmdStreamMessage));
exports.RebootDevice = RebootDevice;
var ResetConfig = /** @class */ (function (_super) {
    tslib_1.__extends(ResetConfig, _super);
    function ResetConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "reset-config";
        return _this;
    }
    ResetConfig.fromMsg = function (_msg) {
        return new ResetConfig();
    };
    ResetConfig.prototype.toMsg = function () {
        return {};
    };
    return ResetConfig;
}(msg_1.CmdStreamMessage));
exports.ResetConfig = ResetConfig;
var UpdateList = /** @class */ (function (_super) {
    tslib_1.__extends(UpdateList, _super);
    function UpdateList(name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.cmd = "update-list";
        return _this;
    }
    UpdateList.fromMsg = function (msg) {
        var listName = msg.NAME.toString();
        if (listName !== "aps" &&
            listName !== "netifs" &&
            listName !== "serials" &&
            listName !== "sshkeys") {
            throw new Error("Unknown list name: ".concat(listName));
        }
        return new UpdateList(listName);
    };
    UpdateList.prototype.toMsg = function () {
        return { NAME: Buffer.from(this.name) };
    };
    return UpdateList;
}(msg_1.CmdStreamMessage));
exports.UpdateList = UpdateList;
var TaskRun = /** @class */ (function (_super) {
    tslib_1.__extends(TaskRun, _super);
    function TaskRun(taskId) {
        var _this = _super.call(this) || this;
        _this.taskId = taskId;
        _this.cmd = "task-run";
        return _this;
    }
    TaskRun.fromMsg = function (msg) {
        if (!msg.TASK) {
            throw new Error("Missing TASK");
        }
        return new TaskRun(msg.TASK.toString());
    };
    TaskRun.prototype.toMsg = function () {
        return { TASK: Buffer.from(this.taskId) };
    };
    return TaskRun;
}(msg_1.CmdStreamMessage));
exports.TaskRun = TaskRun;
var TaskStop = /** @class */ (function (_super) {
    tslib_1.__extends(TaskStop, _super);
    function TaskStop(taskId) {
        var _this = _super.call(this) || this;
        _this.taskId = taskId;
        _this.cmd = "task-stop";
        return _this;
    }
    TaskStop.fromMsg = function (msg) {
        if (!msg.TASK) {
            throw new Error("Missing TASK");
        }
        return new TaskStop(msg.TASK.toString());
    };
    TaskStop.prototype.toMsg = function () {
        return { TASK: Buffer.from(this.taskId) };
    };
    return TaskStop;
}(msg_1.CmdStreamMessage));
exports.TaskStop = TaskStop;
var Done = /** @class */ (function (_super) {
    tslib_1.__extends(Done, _super);
    // eslint-disable-next-line n/handle-callback-err
    function Done(error) {
        var _this = _super.call(this) || this;
        _this.error = error;
        _this.cmd = "done";
        return _this;
    }
    Done.fromMsg = function (msg) {
        if (msg.ERROR) {
            return new Done(msg.ERROR.toString());
        }
        return new Done();
    };
    Done.prototype.toMsg = function () {
        if (!this.error) {
            return {};
        }
        return {
            ERROR: Buffer.from(this.error),
        };
    };
    return Done;
}(msg_1.CmdStreamMessage));
exports.Done = Done;
var EnableUserActiveMode = /** @class */ (function (_super) {
    tslib_1.__extends(EnableUserActiveMode, _super);
    function EnableUserActiveMode(timeMs) {
        var _this = _super.call(this) || this;
        _this.timeMs = timeMs;
        _this.cmd = "user-active";
        return _this;
    }
    EnableUserActiveMode.fromMsg = function (msg) {
        if (!msg.TIME) {
            throw new Error("Missing TIME");
        }
        return new EnableUserActiveMode(Number(msg.TIME.toString()));
    };
    EnableUserActiveMode.prototype.toMsg = function () {
        return { TIME: Buffer.from(this.timeMs.toString()) };
    };
    return EnableUserActiveMode;
}(msg_1.CmdStreamMessage));
exports.EnableUserActiveMode = EnableUserActiveMode;
var DeviceStateEnsured = /** @class */ (function (_super) {
    tslib_1.__extends(DeviceStateEnsured, _super);
    function DeviceStateEnsured() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "dev-state";
        return _this;
    }
    DeviceStateEnsured.fromMsg = function (_msg) {
        return new DeviceStateEnsured();
    };
    DeviceStateEnsured.prototype.toMsg = function () {
        return {};
    };
    return DeviceStateEnsured;
}(msg_1.CmdStreamMessage));
exports.DeviceStateEnsured = DeviceStateEnsured;
var RerenderLabelImage = /** @class */ (function (_super) {
    tslib_1.__extends(RerenderLabelImage, _super);
    function RerenderLabelImage(userName, userPass) {
        var _this = _super.call(this) || this;
        _this.userName = userName;
        _this.userPass = userPass;
        _this.cmd = "rerender-label";
        return _this;
    }
    RerenderLabelImage.fromMsg = function (msg) {
        if (!msg.USERNAME || !msg.USERPASS) {
            throw new Error("Missing USERNAME or USERPASS");
        }
        return new RerenderLabelImage(msg.USERNAME.toString(), msg.USERPASS.toString());
    };
    RerenderLabelImage.prototype.toMsg = function () {
        return { USERNAME: Buffer.from(this.userName), USERPASS: Buffer.from(this.userPass) };
    };
    return RerenderLabelImage;
}(msg_1.CmdStreamMessage));
exports.RerenderLabelImage = RerenderLabelImage;
var GenPubKey = /** @class */ (function (_super) {
    tslib_1.__extends(GenPubKey, _super);
    function GenPubKey(privateKey) {
        var _this = _super.call(this) || this;
        _this.privateKey = privateKey;
        _this.cmd = "gen-pub-key";
        return _this;
    }
    GenPubKey.fromMsg = function (msg) {
        if (!msg.PRIVATE_KEY) {
            throw new Error("Missing PRIVATE_KEY");
        }
        return new GenPubKey(msg.PRIVATE_KEY.toString());
    };
    GenPubKey.prototype.toMsg = function () {
        return { PRIVATE_KEY: Buffer.from(this.privateKey) };
    };
    return GenPubKey;
}(msg_1.CmdStreamMessage));
exports.GenPubKey = GenPubKey;
var GenPubKeyResponse = /** @class */ (function (_super) {
    tslib_1.__extends(GenPubKeyResponse, _super);
    function GenPubKeyResponse(result) {
        var _this = _super.call(this) || this;
        _this.result = result;
        _this.cmd = "gen-pub-key-resp";
        return _this;
    }
    GenPubKeyResponse.fromMsg = function (msg) {
        if (msg.ERROR) {
            return new GenPubKeyResponse({ error: msg.ERROR.toString() });
        }
        return new GenPubKeyResponse({ publicKey: msg.PUBLIC_KEY.toString() });
    };
    GenPubKeyResponse.prototype.toMsg = function () {
        if ("error" in this.result) {
            return { ERROR: Buffer.from(this.result.error) };
        }
        return { PUBLIC_KEY: Buffer.from(this.result.publicKey) };
    };
    return GenPubKeyResponse;
}(msg_1.CmdStreamMessage));
exports.GenPubKeyResponse = GenPubKeyResponse;
var FinalizeManufacturing = /** @class */ (function (_super) {
    tslib_1.__extends(FinalizeManufacturing, _super);
    function FinalizeManufacturing() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "fin-mf";
        return _this;
    }
    FinalizeManufacturing.fromMsg = function (_msg) {
        return new FinalizeManufacturing();
    };
    FinalizeManufacturing.prototype.toMsg = function () {
        return {};
    };
    return FinalizeManufacturing;
}(msg_1.CmdStreamMessage));
exports.FinalizeManufacturing = FinalizeManufacturing;
var SetTime = /** @class */ (function (_super) {
    tslib_1.__extends(SetTime, _super);
    function SetTime(time) {
        var _this = _super.call(this) || this;
        _this.time = time;
        _this.cmd = "set-time";
        return _this;
    }
    SetTime.fromMsg = function (msg) {
        if (!msg.TIME) {
            throw new Error("Missing TIME");
        }
        return new SetTime(msg.TIME.toString());
    };
    SetTime.prototype.toMsg = function () {
        return {
            TIME: Buffer.from(this.time),
        };
    };
    return SetTime;
}(msg_1.CmdStreamMessage));
exports.SetTime = SetTime;
var Upgrade = /** @class */ (function (_super) {
    tslib_1.__extends(Upgrade, _super);
    function Upgrade(ref) {
        var _this = _super.call(this) || this;
        _this.ref = ref;
        _this.cmd = "upgrade";
        return _this;
    }
    Upgrade.fromMsg = function (msg) {
        if (!msg.REF) {
            throw new Error("Missing REF");
        }
        return new Upgrade(msg.REF.toString());
    };
    Upgrade.prototype.toMsg = function () {
        return {
            REF: Buffer.from(this.ref),
        };
    };
    return Upgrade;
}(msg_1.CmdStreamMessage));
exports.Upgrade = Upgrade;
var BlacklistLoraSensDevice = /** @class */ (function (_super) {
    tslib_1.__extends(BlacklistLoraSensDevice, _super);
    function BlacklistLoraSensDevice(did) {
        var _this = _super.call(this) || this;
        _this.did = did;
        _this.cmd = "ls-blacklist";
        return _this;
    }
    BlacklistLoraSensDevice.fromMsg = function (msg) {
        if (!msg.DID) {
            throw new Error("Missing DID");
        }
        return new BlacklistLoraSensDevice(msg.DID.toString());
    };
    BlacklistLoraSensDevice.prototype.toMsg = function () {
        return {
            DID: Buffer.from(this.did),
        };
    };
    return BlacklistLoraSensDevice;
}(msg_1.CmdStreamMessage));
exports.BlacklistLoraSensDevice = BlacklistLoraSensDevice;
var SyncDevices = /** @class */ (function (_super) {
    tslib_1.__extends(SyncDevices, _super);
    function SyncDevices() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sync-devices";
        return _this;
    }
    SyncDevices.fromMsg = function (_msg) {
        return new SyncDevices();
    };
    SyncDevices.prototype.toMsg = function () {
        return {};
    };
    return SyncDevices;
}(msg_1.CmdStreamMessage));
exports.SyncDevices = SyncDevices;
var RecompileTasks = /** @class */ (function (_super) {
    tslib_1.__extends(RecompileTasks, _super);
    function RecompileTasks() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "recompile-tasks";
        return _this;
    }
    RecompileTasks.fromMsg = function (_msg) {
        return new RecompileTasks();
    };
    RecompileTasks.prototype.toMsg = function () {
        return {};
    };
    return RecompileTasks;
}(msg_1.CmdStreamMessage));
exports.RecompileTasks = RecompileTasks;
var LoraSensLog = /** @class */ (function (_super) {
    tslib_1.__extends(LoraSensLog, _super);
    function LoraSensLog(records, packetReceivedOn, did) {
        var _this = _super.call(this) || this;
        _this.records = records;
        _this.packetReceivedOn = packetReceivedOn;
        _this.did = did;
        _this.cmd = "ls-log";
        return _this;
    }
    LoraSensLog.fromMsg = function (msg) {
        if (!msg.DID) {
            throw new Error("missing DID field");
        }
        var did = parseInt(msg.DID.toString());
        if (Number.isNaN(did)) {
            throw new Error("DID field is NaN");
        }
        if (!msg.TIMESTAMP) {
            throw new Error("missing TIMESTAMP field");
        }
        var timestampEpoch = parseInt(msg.TIMESTAMP.toString());
        if (Number.isNaN(timestampEpoch)) {
            throw new Error("TIMESTAMP field should be in epoch format");
        }
        var timestamp = new Date(timestampEpoch * 1000);
        if (!msg.RECORDS) {
            throw new Error("missing RECORDS field");
        }
        var records = msg.RECORDS.toString()
            .split(";")
            .map(function (e) {
            var pair = e.split(",");
            if (pair.length !== 2) {
                throw new Error("RECORDS field should be a semicolon-separated list of coma-separated timestamp and HEX data");
            }
            var timestampEpoch = parseInt(pair[0]);
            if (Number.isNaN(timestampEpoch)) {
                throw new Error("RECORDS timestamp should be in epoch format");
            }
            var timestamp = new Date(timestampEpoch * 1000);
            var data = Buffer.from(pair[1], "hex");
            return { timestamp: timestamp, data: data };
        });
        return new LoraSensLog(records, timestamp, did);
    };
    LoraSensLog.prototype.toMsg = function () {
        var records = Buffer.from(this.records
            .map(function (e) { return (e.timestamp.getTime() / 1000).toFixed() + "," + e.data.toString("hex"); })
            .join(";"));
        var msg = { RECORDS: records };
        msg.TIMESTAMP = Buffer.from(Math.floor(this.packetReceivedOn.getTime() / 1000).toString());
        if (this.did < 0 || this.did > 0xffffffffffff) {
            throw new Error("DID field out of range");
        }
        msg.DID = Buffer.from(Math.floor(this.did).toString());
        return msg;
    };
    return LoraSensLog;
}(msg_1.CmdStreamMessage));
exports.LoraSensLog = LoraSensLog;
var LoraSensAdvertise = /** @class */ (function (_super) {
    tslib_1.__extends(LoraSensAdvertise, _super);
    function LoraSensAdvertise(data, flags, secondsSincePowerUp, signalDbm, batteryPercentage, packetReceivedOn, did) {
        var _this = _super.call(this) || this;
        _this.data = data;
        _this.flags = flags;
        _this.secondsSincePowerUp = secondsSincePowerUp;
        _this.signalDbm = signalDbm;
        _this.batteryPercentage = batteryPercentage;
        _this.packetReceivedOn = packetReceivedOn;
        _this.did = did;
        _this.cmd = "ls-adv";
        return _this;
    }
    LoraSensAdvertise.fromMsg = function (msg) {
        if (!msg.DID) {
            throw new Error("missing DID field");
        }
        var did = parseInt(msg.DID.toString());
        if (Number.isNaN(did)) {
            throw new Error("DID field is NaN");
        }
        if (!msg.TIMESTAMP) {
            throw new Error("missing TIMESTAMP field");
        }
        var timestampEpoch = parseInt(msg.TIMESTAMP.toString());
        if (Number.isNaN(timestampEpoch)) {
            throw new Error("TIMESTAMP field should be in epoch format");
        }
        var timestamp = new Date(timestampEpoch * 1000);
        if (!msg.BAT) {
            throw new Error("missing BAT field");
        }
        var powerLeft = parseInt(msg.BAT.toString());
        if (Number.isNaN(powerLeft)) {
            throw new Error("BAT field is NaN");
        }
        if (!msg.DBM) {
            throw new Error("missing DBM field");
        }
        var signalDbm = parseInt(msg.DBM.toString());
        if (Number.isNaN(signalDbm)) {
            throw new Error("DBM field is NaN");
        }
        if (!msg.TIME) {
            throw new Error("missing TIME field");
        }
        var powerTime = parseInt(msg.TIME.toString());
        if (Number.isNaN(powerTime)) {
            throw new Error("TIME field is NaN");
        }
        if (!msg.FLAGS) {
            throw new Error("missing FLAGS field");
        }
        if (msg.FLAGS.length < 1) {
            throw new Error("FLAGS field too short");
        }
        var flags = msg.FLAGS.readUInt8();
        var unreadStreamRecordsAvailable = !!(flags & 1);
        return new LoraSensAdvertise(msg.DATA, { unreadStreamRecordsAvailable: unreadStreamRecordsAvailable }, powerTime, signalDbm, powerLeft, timestamp, did);
    };
    LoraSensAdvertise.prototype.toMsg = function () {
        var flags = Buffer.from([this.flags.unreadStreamRecordsAvailable ? 1 : 0]);
        var msg = { DATA: this.data, FLAGS: flags };
        if (this.secondsSincePowerUp < 0 || this.secondsSincePowerUp > 0xffffffff) {
            throw new Error("TIME field out of range");
        }
        msg.TIME = Buffer.from(Math.floor(this.secondsSincePowerUp).toString());
        if (this.signalDbm < -255 || this.signalDbm > 0) {
            throw new Error("DBM field out of range");
        }
        msg.DBM = Buffer.from(Math.floor(this.signalDbm).toString());
        if (this.batteryPercentage < 0 || this.batteryPercentage > 100) {
            throw new Error("BAT field out of range");
        }
        msg.BAT = Buffer.from(Math.floor(this.batteryPercentage).toString());
        msg.TIMESTAMP = Buffer.from(Math.floor(this.packetReceivedOn.getTime() / 1000).toString());
        if (this.did < 0 || this.did > 0xffffffffffff) {
            throw new Error("DID field out of range");
        }
        msg.DID = Buffer.from(Math.floor(this.did).toString());
        return msg;
    };
    return LoraSensAdvertise;
}(msg_1.CmdStreamMessage));
exports.LoraSensAdvertise = LoraSensAdvertise;
var InitTasksProject = /** @class */ (function (_super) {
    tslib_1.__extends(InitTasksProject, _super);
    function InitTasksProject(mode) {
        var _this = _super.call(this) || this;
        _this.mode = mode;
        _this.cmd = "init-tasks-project";
        return _this;
    }
    InitTasksProject.fromMsg = function (msg) {
        if (!msg.MODE || msg.MODE.toString() === "init-only") {
            return new InitTasksProject("init-only");
        }
        else if (msg.MODE.toString() === "update") {
            return new InitTasksProject("update");
        }
        else if (msg.MODE.toString() === "full-overwrite") {
            return new InitTasksProject("full-overwrite");
        }
        else if (msg.MODE.toString() === "npm-install") {
            return new InitTasksProject("npm-install");
        }
        else if (msg.MODE.toString() === "npm-rebuild") {
            return new InitTasksProject("npm-rebuild");
        }
        throw new Error("unknown MODE: ".concat(msg.MODE.toString()));
    };
    InitTasksProject.prototype.toMsg = function () {
        return {
            MODE: Buffer.from(this.mode),
        };
    };
    return InitTasksProject;
}(msg_1.CmdStreamMessage));
exports.InitTasksProject = InitTasksProject;
var SetSshAuthKeys = /** @class */ (function (_super) {
    tslib_1.__extends(SetSshAuthKeys, _super);
    function SetSshAuthKeys(keys) {
        var _this = _super.call(this) || this;
        _this.keys = keys;
        _this.cmd = "set-ssh-authkeys";
        return _this;
    }
    SetSshAuthKeys.fromMsg = function (msg) {
        if (!msg.KEYS) {
            throw new Error("Missing KEYS");
        }
        return new SetSshAuthKeys(msg.KEYS.toString().split("\n"));
    };
    SetSshAuthKeys.prototype.toMsg = function () {
        return {
            KEYS: Buffer.from(this.keys.join("\n")),
        };
    };
    return SetSshAuthKeys;
}(msg_1.CmdStreamMessage));
exports.SetSshAuthKeys = SetSshAuthKeys;
var StartSdCardSpeedTest = /** @class */ (function (_super) {
    tslib_1.__extends(StartSdCardSpeedTest, _super);
    function StartSdCardSpeedTest() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cmd = "sd-test-start";
        return _this;
    }
    StartSdCardSpeedTest.fromMsg = function (_msg) {
        return new StartSdCardSpeedTest();
    };
    StartSdCardSpeedTest.prototype.toMsg = function () {
        return {};
    };
    return StartSdCardSpeedTest;
}(msg_1.CmdStreamMessage));
exports.StartSdCardSpeedTest = StartSdCardSpeedTest;
//# sourceMappingURL=cmd.js.map