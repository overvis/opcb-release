"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AUTH_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("../modbus-mappers");
exports.AUTH_SCHEMA = typebox_1.Type.Object({
    users: typebox_1.Type.Array(typebox_1.Type.Object({
        username: typebox_1.Type.String({
            default: "admin",
            maxLength: 30,
            description: "Username.",
        }),
        password: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 30 }), typebox_1.Type.Null()], {
            default: null,
            description: "Password. Use only latin letters and digits if you need to provide authentication through Modbus.",
        }),
        encryptedPassword: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 100 }), typebox_1.Type.Null()], {
            default: null,
            description: "Encrypted password. Plain password is automatically encrypted and removed from the configuration file. Authentication only uses encrypted password.",
        }),
        allowAuthThroughModbus: typebox_1.Type.Boolean({
            default: false,
            description: "Allow authenticating through Modbus by writing password into OPCB virtual device's registers.",
        }),
        allowAuthThroughApi: typebox_1.Type.Boolean({
            default: true,
            description: "Allow authenticating through API. If disabled, this user can't login into device's web-interface.",
        }),
        configurationAccess: typebox_1.Type.Union([typebox_1.Type.Literal("none"), typebox_1.Type.Literal("read"), typebox_1.Type.Literal("readWrite")], {
            default: "none",
            description: "Access level to OPCB configuration settings.",
        }),
        modbusDevicesAccess: typebox_1.Type.Union([typebox_1.Type.Literal("none"), typebox_1.Type.Literal("read"), typebox_1.Type.Literal("readWrite")], {
            default: "none",
            description: "Access level to Modbus devices connected to OPCB.",
        }),
    }), {
        description: "List of users. Default user: admin, password: admin.",
        default: [
            {
                username: "admin",
                password: "admin",
                encryptedPassword: null,
                allowAuthThroughModbus: true,
                allowAuthThroughApi: true,
                configurationAccess: "readWrite",
                modbusDevicesAccess: "readWrite",
            },
        ],
    }),
    defaultModbusAccess: typebox_1.Type.Object({
        configurationAccess: typebox_1.Type.Union([typebox_1.Type.Literal("none"), typebox_1.Type.Literal("read"), typebox_1.Type.Literal("readWrite")], {
            description: "Default access level to OPCB configuration settings.",
            default: "read",
        }),
        modbusDevicesAccess: typebox_1.Type.Union([typebox_1.Type.Literal("none"), typebox_1.Type.Literal("read"), typebox_1.Type.Literal("readWrite")], {
            description: "Default access level to Modbus devices connected to OPCB.",
            default: "readWrite",
        }),
    }, {
        additionalProperties: false,
        description: "Default access level to OPCB configuration settings and Modbus devices connected to OPCB.",
        default: {},
    }),
    modbusAuthErrorCode: typebox_1.Type.Integer({
        minimum: 1,
        maximum: 255,
        description: "Modbus error code to return if access to some function is not allowed.",
        default: 10,
    }),
    sessionTtl: typebox_1.Type.Integer({
        name: "Session TTL",
        mapper: new modbus_mappers_1.MAPPERS.U32(1003),
        minimum: 0,
        maximum: 525600,
        description: "Session time-to-live in seconds. Updates on each request.",
        default: 300,
        group: "Session",
        unit: "s",
    }),
    freeAccessRequests: typebox_1.Type.Array(typebox_1.Type.Object({
        device: typebox_1.Type.Union([typebox_1.Type.Integer({ minimum: 0, maximum: 255 }), typebox_1.Type.Null()], {
            description: "Modbus device ID. Null - OPCB virtual device ID.",
            default: null,
        }),
        function: typebox_1.Type.Integer({
            minimum: 0,
            maximum: 128,
            description: "Modbus function code.",
            default: 0,
        }),
        registersRange: typebox_1.Type.String({
            pattern: "^(\\d+-\\d+,)*\\d+-\\d+$",
            description: 'Modbus registers range. Format: "startAddress-endAddress,startAddress-endAddress,...". Example: "0-10,20-30".',
            default: "0-65535",
        }),
    }, { additionalProperties: false }), {
        description: "List of Modbus requests that are allowed without authentication.",
        default: [],
    }),
}, {
    additionalProperties: false,
    description: "Authentication configuration.",
    default: {},
});
//# sourceMappingURL=auth.schema.js.map