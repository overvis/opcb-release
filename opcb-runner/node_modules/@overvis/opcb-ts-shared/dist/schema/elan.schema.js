"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ELAN_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("../modbus-mappers");
exports.ELAN_SCHEMA = typebox_1.Type.Object({
    networkInterfaceName: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 20 }), typebox_1.Type.Null()], {
        name: "Network interface name",
        mapper: new modbus_mappers_1.MAPPERS.Text(1100, 20),
        description: "Ethernet network interface name. Null disables Ethernet connection completely.",
        default: "eth0",
        group: "Ethernet",
    }),
    dhcpIsEnabled: typebox_1.Type.Boolean({
        name: "DHCP is enabled",
        mapper: new modbus_mappers_1.MAPPERS.Bool(1120),
        description: "Automatic (DHCP) address acquiring is enabled.",
        default: true,
        group: "Ethernet",
    }),
    fixMacAddress: typebox_1.Type.Boolean({
        name: "Fix MAC address",
        mapper: new modbus_mappers_1.MAPPERS.Bool(1121),
        description: "If enabled, OPCB runtime will manage device's MAC address. This is needed for some boards, that have incorrect MAC address set by default (e.g. Banana Pi 4). If the board has incorrect or empty MAC address, OPCB will generate replacement MAC and store it in the `mac` setting. This option allows OPCB runtime to change the board's MAC to the generated one on startup.",
        default: false,
        group: "Ethernet",
    }),
    mac: typebox_1.Type.Union([typebox_1.Type.String({ pattern: "^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$" }), typebox_1.Type.Null()], {
        name: "MAC address",
        mapper: new modbus_mappers_1.MAPPERS.Mac(1122),
        description: "MAC address of the device. Used as an identifier for Overvis reverse connection and hostname.",
        default: null,
        group: "Ethernet",
    }),
    staticIpSettings: typebox_1.Type.Object({
        ipAddress: typebox_1.Type.String({
            format: "ipv4",
            description: "IP address.",
            default: "192.168.0.111",
        }),
        subnetMask: typebox_1.Type.String({
            format: "ipv4",
            description: "Subnet mask.",
            default: "255.255.255.0",
        }),
        gateway: typebox_1.Type.String({
            format: "ipv4",
            description: "Gateway IP.",
            default: "192.168.0.1",
        }),
        primaryDns: typebox_1.Type.String({
            format: "ipv4",
            description: "Primary DNS.",
            default: "192.168.0.1",
        }),
        secondaryDns: typebox_1.Type.String({
            format: "ipv4",
            description: "Secondary DNS.",
            default: "8.8.8.8",
        }),
    }, {
        description: "Static IP configuration.",
        additionalProperties: false,
        default: {},
    }),
}, {
    description: "Ethernet connection configuration.",
    additionalProperties: false,
    default: {},
});
//# sourceMappingURL=elan.schema.js.map