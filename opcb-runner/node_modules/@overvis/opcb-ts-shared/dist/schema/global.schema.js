"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLOBAL_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("../modbus-mappers");
exports.GLOBAL_SCHEMA = typebox_1.Type.Object({
    model: typebox_1.Type.Union([typebox_1.Type.Literal("opcb"), typebox_1.Type.Literal("opcb221"), typebox_1.Type.Literal("opcb221b")], {
        default: "opcb",
        description: "The code of the model of the device. Affects UI, registers map and periphery operation.",
    }),
    modelName: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 30 }), typebox_1.Type.Null()], {
        default: null,
        description: "The name of the model of the device as displayed to the user. Only used in UI.",
    }),
    manufacturerName: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 30 }), typebox_1.Type.Null()], {
        default: null,
        description: "The name of the manufacturer of the device. Only used in UI.",
    }),
    lastRunVersion: typebox_1.Type.String({
        default: "",
        maxLength: 100,
        description: "The version of the software that was running on the device when it was last powered off. Affects data and configuration migrations.",
    }),
    userProvidedDeviceName: typebox_1.Type.String({
        name: "User device name",
        mapper: new modbus_mappers_1.MAPPERS.Text(1000, 30),
        default: "",
        maxLength: 30,
        description: "The name of the device provided by user. Used in the UI.",
        group: "Global configuration",
    }),
    setHostName: typebox_1.Type.Boolean({
        default: true,
        description: "If enabled, the runtime will set the hostname of the device to the name of the model and the first 3 bytes of the MAC address.",
    }),
    manageAptDependencies: typebox_1.Type.Boolean({
        default: true,
        description: "If enabled, the runtime will install required dependencies through the apt package manager. If disabled, the user is responsible for installing the dependencies.",
    }),
    manageNetworking: typebox_1.Type.Boolean({
        default: true,
        description: "If enabled, the runtime will manage networking through the NetworkManager.\n\nWARNING: if disabled, all network configuration settings will never be applied, in that case user is responsible to configure the Linux networking manually.",
    }),
    labelLink: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()], {
        default: null,
        description: "Overvis connection link to be printed on the label.",
    }),
    time: typebox_1.Type.Object({
        manageSettings: typebox_1.Type.Boolean({
            default: true,
            description: "If disabled, OPCB will not change any time settings on the device.",
        }),
        timezone: typebox_1.Type.String({
            name: "Timezone",
            mapper: new modbus_mappers_1.MAPPERS.Text(1030, 50),
            default: "Etc/UTC",
            maxLength: 50,
            description: "The timezone of the device. Used to set the timezone of the OPCB Linux system.",
            group: "Global configuration",
        }),
        useNtp: typebox_1.Type.Boolean({
            name: "Use NTP",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1080),
            default: true,
            description: "If true, OPCB will enable Linux system time syncronization using NTP.",
            group: "Global configuration",
        }),
    }, { additionalProperties: false, default: {} }),
    updateMode: typebox_1.Type.Union([
        typebox_1.Type.Literal("auto-only-patch"),
        typebox_1.Type.Literal("auto-only-minor"),
        typebox_1.Type.Literal("auto-all"),
        typebox_1.Type.Literal("manual"),
        typebox_1.Type.Literal("disabled"),
    ], {
        default: "auto-only-minor",
        description: "The mode that determines how the OPCB auto-update process works. `auto-only-patch` - only patch versions (security updates) will be automatically installed. `auto-only-minor` - only patch and minor versions will be installed. `auto-all` - all updates, including major, will be automatically installed, also this will install unreleased versions (latest untagged commits). `manual` - system will check for available updates, but no updates will be installed automatically, and must be installed by the user request. `disabled` - the system will not check for available updates at all. If the OPCB runtime is not installed as a checkout from a git repository, the updates are disabled irregarding of this setting.",
    }),
    allowForcedUpdates: typebox_1.Type.Boolean({
        default: false,
        description: "If enabled, allows updates on dirty repository.",
    }),
    autoUpdateTimeRange: typebox_1.Type.Object({
        from: typebox_1.Type.String({
            default: "01:00",
            pattern: "^\\d\\d:\\d\\d$",
            description: "From this time of day.",
        }),
        till: typebox_1.Type.String({
            default: "03:00",
            pattern: "^\\d\\d:\\d\\d$",
            description: "Till this time of day. If the time is less than `from` - the update window is considered to be `till` - `from` hours long, and ending on the next day.",
        }),
    }, {
        additionalProperties: false,
        default: { from: "01:00", till: "03:00" },
        description: "The period of day during which automatic updates can be applied. Update process may take up to several minutes of downtime. Only applies to auto update modes.",
    }),
    quickSetupIsDone: typebox_1.Type.Boolean({
        default: false,
        description: "Indicates if the quick setup has been completed by user.",
    }),
}, {
    description: "Global configuration.",
    additionalProperties: false,
    default: {},
});
//# sourceMappingURL=global.schema.js.map