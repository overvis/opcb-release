"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MODBUS_RS485_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("../modbus-mappers");
exports.MODBUS_RS485_SCHEMA = typebox_1.Type.Array(typebox_1.Type.Object({
    isEnabled: typebox_1.Type.Boolean({
        name: "Enable Modbus RS-485",
        mapper: new modbus_mappers_1.MAPPERS.Bool(1900),
        description: "Enable or disable the Modbus RS485 interface.",
        default: true,
        group: "Modbus RS-485",
    }),
    deviceName: typebox_1.Type.String({
        name: "Device name",
        mapper: new modbus_mappers_1.MAPPERS.Text(1901, 20),
        pattern: "^[a-zA-Z0-9_-]{2,20}$",
        maxLength: 20,
        description: "Linux device file name. Will be looked up in /dev/",
        default: "ttyUSB0",
        group: "Modbus RS-485",
    }),
    mode: typebox_1.Type.Union([
        typebox_1.Type.Literal("rtu-master"),
        typebox_1.Type.Literal("ascii-master"),
        typebox_1.Type.Literal("rtu-slave"),
        typebox_1.Type.Literal("ascii-slave"),
        typebox_1.Type.Literal("ipka-master"),
    ], {
        name: "Operation mode",
        mapper: new modbus_mappers_1.MAPPERS.Enum(1922, {
            "rtu-master": 1,
            "ascii-master": 2,
            "rtu-slave": 3,
            "ascii-slave": 4,
            "ipka-master": 5,
        }),
        description: "Modbus operation mode.",
        default: "rtu-master",
        group: "Modbus RS-485",
    }),
    uidRange: typebox_1.Type.String({
        name: "Modbus slave addresses ranges",
        mapper: new modbus_mappers_1.MAPPERS.Text(1923, 30),
        pattern: "^(\\d+-\\d+,)*\\d+-\\d+$",
        maxLength: 1000,
        description: "Comma separated list of Modbus slave addresses ranges. For example: 1-10,20-30,40-50. Only applied if mode is rtu-master or ascii-master.",
        default: "1-255",
        group: "Modbus RS-485",
    }),
    responseTimeoutMs: typebox_1.Type.Integer({
        name: "Response timeout",
        mapper: new modbus_mappers_1.MAPPERS.U16(1953),
        minimum: 1,
        maximum: 60000,
        description: "Response timeout in milliseconds.",
        default: 300,
        group: "Modbus RS-485",
        unit: "ms",
    }),
    baudRate: typebox_1.Type.Union([
        typebox_1.Type.Literal(50),
        typebox_1.Type.Literal(75),
        typebox_1.Type.Literal(110),
        typebox_1.Type.Literal(134),
        typebox_1.Type.Literal(150),
        typebox_1.Type.Literal(200),
        typebox_1.Type.Literal(300),
        typebox_1.Type.Literal(600),
        typebox_1.Type.Literal(1200),
        typebox_1.Type.Literal(1800),
        typebox_1.Type.Literal(2400),
        typebox_1.Type.Literal(4800),
        typebox_1.Type.Literal(9600),
        typebox_1.Type.Literal(19200),
        typebox_1.Type.Literal(38400),
        typebox_1.Type.Literal(57600),
        typebox_1.Type.Literal(115200),
        typebox_1.Type.Literal(230400),
        typebox_1.Type.Literal(460800),
        typebox_1.Type.Literal(500000),
        typebox_1.Type.Literal(576000),
        typebox_1.Type.Literal(921600),
        typebox_1.Type.Literal(1000000),
        typebox_1.Type.Literal(1152000),
        typebox_1.Type.Literal(1500000),
        typebox_1.Type.Literal(2000000),
        typebox_1.Type.Literal(2500000),
        typebox_1.Type.Literal(3000000),
        typebox_1.Type.Literal(3500000),
        typebox_1.Type.Literal(4000000),
    ], {
        name: "Baud rate",
        mapper: new modbus_mappers_1.MAPPERS.U32(1954),
        description: "Port speed in bits per second.",
        default: 9600,
        group: "Modbus RS-485",
        unit: "bit/s",
    }),
    stopAndParityBits: typebox_1.Type.Union([typebox_1.Type.Literal("1N"), typebox_1.Type.Literal("1E"), typebox_1.Type.Literal("1O"), typebox_1.Type.Literal("2N")], {
        name: "Stop and parity bits",
        mapper: new modbus_mappers_1.MAPPERS.Enum(1956, { "1N": 0, "1E": 1, "1O": 2, "2N": 3 }),
        description: "Port stop and parity bits:\n1N - 1 stop bit, no parity;\n1E - 1 stop bit, even parity;\n1O - 1 stop bit, odd parity;\n2N - 2 stop bits, no parity.",
        default: "2N",
        group: "Modbus RS-485",
    }),
    broadcastIsEnabled: typebox_1.Type.Boolean({
        name: "Enable broadcast requests",
        mapper: new modbus_mappers_1.MAPPERS.Bool(1957),
        description: "Enable broadcast Modbus RTU requests.",
        default: false,
        group: "Modbus RS-485",
    }),
    gatewayGeneratedExceptions: typebox_1.Type.Object({
        pathUnavalableCode: typebox_1.Type.Union([typebox_1.Type.Integer({ minimum: 1, maximum: 255 }), typebox_1.Type.Null()], {
            description: "Exception code to return when no route to the requested address exists (Path Unavailable error). If null, no exception will be generated.",
            default: 10,
        }),
        targetDeviceFailedToRespondCode: typebox_1.Type.Union([typebox_1.Type.Integer({ minimum: 1, maximum: 255 }), typebox_1.Type.Null()], {
            description: "Exception code to return when no response from the requested address was received after the delay specified in the `responseTimeoutMs` parameter (Target Device Failed To Respond error). If null, no exception will be generated.",
            default: 11,
        }),
    }, {
        additionalProperties: false,
        description: "Gateway-generated exceptions.",
        default: {},
    }),
    portOpenRetryPeriod: typebox_1.Type.Integer({
        name: "Port open retry period",
        mapper: new modbus_mappers_1.MAPPERS.U16(1958),
        minimum: 1,
        maximum: 600,
        description: "Period in seconds to retry opening the port if it is not available.",
        default: 5,
        group: "Modbus RS-485",
        unit: "s",
    }),
}), {
    name: "Modbus RS-485 port",
    description: "RS-485 Modbus ports configurations.",
    maxItems: 4,
    modbusArrayAddressSpacing: 100,
    default: [],
});
//# sourceMappingURL=modbus-rs-485.schema.js.map