"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MODBUS_TCP_CLIENTS_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("../modbus-mappers");
exports.MODBUS_TCP_CLIENTS_SCHEMA = typebox_1.Type.Array(typebox_1.Type.Object({
    isEnabled: typebox_1.Type.Boolean({
        name: "Enable Modbus TCP client",
        mapper: new modbus_mappers_1.MAPPERS.Bool(1700),
        description: "Enable or disable the Modbus TCP client.",
        default: true,
        group: "TCP clients",
    }),
    interface: typebox_1.Type.Union([
        typebox_1.Type.Literal("any"),
        typebox_1.Type.Literal("lo"),
        typebox_1.Type.Literal("elan"),
        typebox_1.Type.Literal("wlan"),
    ], {
        name: "Network interface",
        mapper: new modbus_mappers_1.MAPPERS.Enum(1701, { any: 1, lo: 2, elan: 3, wlan: 4 }),
        description: "Network interface to use for Modbus TCP connection.\nany - Modbus TCP server is listening on all interfaces.\nlo - Modbus TCP server is listening on loopback interface.\nelan - Modbus TCP server is listening on Ethernet LAN interface.\nwlan - Modbus TCP server is listening on Wi-Fi LAN interface.",
        default: "any",
        group: "TCP clients",
    }),
    remoteServer: typebox_1.Type.Object({
        ip: typebox_1.Type.String({
            name: "Remote Modbus TCP server IP",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1702),
            format: "ipv4",
            description: "Remote Modbus TCP server IP address.",
            default: "192.168.1.122",
            group: "TCP clients",
        }),
        port: typebox_1.Type.Integer({
            name: "Remote Modbus TCP server port",
            mapper: new modbus_mappers_1.MAPPERS.U16(1706),
            minimum: 1,
            maximum: 65535,
            description: "Remote Modbus TCP server port.",
            default: 502,
            group: "TCP clients",
        }),
    }, {
        additionalProperties: false,
        description: "Address of the remote Modbus TCP server to connect to.",
        default: {},
    }),
    uidRange: typebox_1.Type.String({
        name: "Modbus slave addresses ranges",
        mapper: new modbus_mappers_1.MAPPERS.Text(1707, 30),
        pattern: "^(\\d+-\\d+,)*\\d+-\\d+$",
        maxLength: 1000,
        description: "Comma separated list of Modbus slave addresses ranges. For example: 1-10,20-30,40-50. Only applied if mode is rtu-master or ascii-master.",
        default: "1-255",
        group: "TCP clients",
    }),
    reconnectionPeriodSec: typebox_1.Type.Integer({
        name: "Reconnection period",
        mapper: new modbus_mappers_1.MAPPERS.U16(1737),
        minimum: 1,
        maximum: 600,
        description: "Reconnection period in seconds in case of connection failure.",
        default: 5,
        group: "TCP clients",
        unit: "s",
    }),
    responseTimeoutMs: typebox_1.Type.Integer({
        name: "Response timeout",
        mapper: new modbus_mappers_1.MAPPERS.U16(1738),
        minimum: 1,
        maximum: 60000,
        description: "Response timeout in milliseconds.",
        default: 1000,
        group: "TCP clients",
        unit: "ms",
    }),
    parallelRequestsNum: typebox_1.Type.Integer({
        name: "Parallel requests",
        mapper: new modbus_mappers_1.MAPPERS.U8(1739),
        minimum: 1,
        maximum: 20,
        description: "Maximum number of simultaneously sent requests.\n1 - each request waits until the previous one is finished.\nOther values allow for requests to be sent in groups.",
        default: 1,
        group: "TCP clients",
    }),
    broadcastIsEnabled: typebox_1.Type.Boolean({
        name: "Enable broadcast",
        mapper: new modbus_mappers_1.MAPPERS.Bool(1740),
        description: "Enable broadcast Modbus TCP requests.",
        default: false,
        group: "TCP clients",
    }),
}, {
    additionalProperties: false,
    description: "Modbus TCP client configuration.",
}), {
    maxItems: 4,
    modbusArrayAddressSpacing: 50,
    description: "Modbus TCP clients configurations.",
    default: [],
});
//# sourceMappingURL=modbus-tcp-clients.schema.js.map