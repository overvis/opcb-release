"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OVERVIS_REVERSE_CONNECTION_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
exports.OVERVIS_REVERSE_CONNECTION_SCHEMA = typebox_1.Type.Object({
    interface: typebox_1.Type.Union([
        typebox_1.Type.Literal("disabled"),
        typebox_1.Type.Literal("any"),
        typebox_1.Type.Literal("lo"),
        typebox_1.Type.Literal("elan"),
        typebox_1.Type.Literal("wlan"),
    ], {
        description: "Network interface to use for automatice Overvis reverse-connection.\ndisabled - Overvis reverse connection is disabled completely.\nany - Connect using any available interface with Internet access.\nlo - Connect using loopback interface.\nelan - Connect using Ethernet LAN interface.\nwlan - Connect using Wi-Fi LAN interface.",
        default: "disabled",
    }),
    baseConnectUrl: typebox_1.Type.String({
        description: "Base Overvis server URL (no trailing slash).",
        default: "https://ocp.overvis.com",
    }),
    hostname: typebox_1.Type.String({
        format: "hostname",
        description: "Hostname or IP address of the Overvis server.",
        default: "modbus.overvis.com",
    }),
    port: typebox_1.Type.Integer({
        minimum: 1,
        maximum: 65535,
        description: "Overvis server port.",
        default: 20502,
    }),
    sendSelfIdentificationOnConnect: typebox_1.Type.Boolean({
        description: "Sends self identification Modbus TCP message on connect. The message is a response to a function 0x3 request with registers 1000-1009 of the OPCB virtual device.",
        default: true,
    }),
    responseTimeoutMs: typebox_1.Type.Integer({
        minimum: 1,
        maximum: 60000,
        description: "Response timeout in milliseconds.",
        default: 1500,
    }),
    parallelRequestsNum: typebox_1.Type.Integer({
        minimum: 1,
        maximum: 20,
        description: "Maximum number of simultaneously processed requests from Overvis.\n1 - each request waits until the previous one is finished.\nOther values allows for responses to be sent in groups.",
        default: 10,
    }),
    connectionAliveTimeoutSec: typebox_1.Type.Integer({
        minimum: 15,
        maximum: 3600,
        description: "Time (in seconds) without data transfer, after which the connection is considered closed.",
        default: 60,
    }),
    reconnectionPeriodSec: typebox_1.Type.Integer({
        minimum: 1,
        maximum: 600,
        description: "Reconnection period (in seconds) in case of connection failure.",
        default: 5,
    }),
    broadcastIsEnabled: typebox_1.Type.Boolean({
        description: "Enable broadcast Modbus TCP requests.",
        default: false,
    }),
}, {
    additionalProperties: false,
    description: "Overvis reverse connection configuration.",
    default: {},
});
//# sourceMappingURL=overvis-reverse-connection.schema.js.map