"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OVERVIS_VPN_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
exports.OVERVIS_VPN_SCHEMA = typebox_1.Type.Object({
    isEnabled: typebox_1.Type.Boolean({
        description: "If enabled, OPCB will connect to Overvis servers. If disabled, other settings are ignored, and OPCB will work in stand-alone mode.",
        default: true,
    }),
    wireguard: typebox_1.Type.Object({
        isManaged: typebox_1.Type.Boolean({
            description: "If enabled, OPCB will manage Wireguard configuration on the device. If disabled, other settings are ignored, the user will have to manually configure Wireguard on the device in order to access Overvis VPN functionality.",
            default: true,
        }),
        endpointHost: typebox_1.Type.String({
            format: "hostname",
            maxLength: 100,
            description: "Overvis Wireguard VPN server hostname or IP.",
            default: "motherland.overvis.com",
        }),
        endpointPort: typebox_1.Type.Integer({
            minimum: 1,
            maximum: 65535,
            description: "Overvis Wireguard VPN server port.",
            default: 51820,
        }),
        endpointPublicKey: typebox_1.Type.Union([typebox_1.Type.String({ contentEncoding: "8bit", maxLength: 44 }), typebox_1.Type.Null()], {
            description: "Overvis Wireguard VPN server public key. If set to null, Overvis VPN connection will be disabled completely, this will also disable some of the Overvis services for the device.",
            default: null,
        }),
        endpointAllowedIpsCidr: typebox_1.Type.String({
            pattern: "((^|\\.)((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]?\\d))){4}\\/(?:\\d|[12]\\d|3[01])$",
            description: "Overvis Wireguard VPN server allowed IPs range.",
            default: "10.42.0.0/16",
        }),
        privateKey: typebox_1.Type.Union([typebox_1.Type.String({ contentEncoding: "8bit", maxLength: 44 }), typebox_1.Type.Null()], {
            description: "Overvis Wireguard VPN private key. If set to null, Overvis VPN connection will be disabled completely, this will also disable some of the Overvis services for the device.",
            default: null,
        }),
        ipAddressCidr: typebox_1.Type.Union([
            typebox_1.Type.String({
                pattern: "((^|\\.)((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]?\\d))){4}\\/(?:\\d|[12]\\d|3[01])$",
            }),
            typebox_1.Type.Null(),
        ], {
            description: "IP address with CIDR (range) of this device in Overvis Wireguard VPN. If set to null, Overvis VPN connection will be disabled completely, this will also disable some of the Overvis services for the device.",
            default: null,
        }),
        persistentKeepalive: typebox_1.Type.Integer({
            minimum: 10,
            maximum: 3600,
            description: "Wireguard persistent keepalive setting (in seconds).",
            default: 60,
        }),
        setUpWgCheckCronJob: typebox_1.Type.Boolean({
            description: "If enabled, OPCB will install the cron job that periodically checks and reloads the Wireguard if it loses the connection.",
            default: true,
        }),
        vpnMotherlandServerIp: typebox_1.Type.String({
            format: "ipv4",
            description: "IP address of main VPN server. Used for pings, to determine if the VPN connection is active.",
            default: "10.42.0.1",
        }),
    }, {
        additionalProperties: false,
        description: "Overvis Wireguard VPN configuration.",
        default: {},
    }),
    pinCode: typebox_1.Type.Union([typebox_1.Type.String({ pattern: "^[A-Z0-9]{8}$" }), typebox_1.Type.Null()], {
        description: "PIN code for Overvis cloud connection. Stored here to display in the web-interface. Changing this setting doesn't affect Overvis operation.",
        default: null,
    }),
    boundToOcpServer: typebox_1.Type.String({
        maxLength: 100,
        description: "The OCP server to which this device is bound. Set by the server when the Overvis network is connected to this device. Empty string means no binding. This value is used only for the cross-server leak prevention and is not affecting the device's functionality in any way.",
        default: "",
    }),
    boundToOcpAccountEmail: typebox_1.Type.String({
        maxLength: 250,
        description: "The OCP account to which this device is bound. Set by the server when the Overvis network is connected to this device. Empty string means no binding. This value is used only for the UI (quick access button) and is not affecting the device's functionality in any way.",
        default: "",
    }),
    addRootSshKey: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 10000 }), typebox_1.Type.Null()], {
        description: "OPCB will install this SSH key to authorized_keys of the root user. This key is retrieved once during the registration on the VPN servers. This is needed for remote support access and maintenance. Several keys can be specified separated by newlines.",
        default: null,
    }),
    testServerApiUrl: typebox_1.Type.String({
        format: "uri",
        maxLength: 500,
        description: "The API URL of the test server that is used for manufacturing testing. The test server sends a range of test commands to the device during the manufacturing testing process.",
        default: "http://10.42.0.1/api",
    }),
}, {
    additionalProperties: false,
    description: "Overvis VPN configuration.",
    default: {},
});
//# sourceMappingURL=overvis-vpn.schema.js.map