"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WLAN_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("../modbus-mappers");
exports.WLAN_SCHEMA = typebox_1.Type.Object({
    networkInterfaceName: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 20 }), typebox_1.Type.Null()], {
        name: "Network interface name",
        mapper: new modbus_mappers_1.MAPPERS.Text(1200, 20),
        description: "Wi-Fi network interface name. Null disables Wi-Fi connection completely.",
        default: "wlan0",
        group: "Wi-Fi",
    }),
    mode: typebox_1.Type.Union([typebox_1.Type.Literal("ap"), typebox_1.Type.Literal("station")], {
        name: "Wi-Fi mode",
        mapper: new modbus_mappers_1.MAPPERS.Enum(1220, { ap: 0, station: 1 }),
        description: "The mode of the WLAN interface: ap - Access Point, station - connect to station.",
        default: "ap",
        group: "Wi-Fi",
    }),
    country: typebox_1.Type.String({
        name: "Wi-Fi country code",
        mapper: new modbus_mappers_1.MAPPERS.Text(1222, 2),
        maxLength: 2,
        description: "Wi-Fi country code as defined by ISO 3166-1.",
        default: "PL",
        group: "Wi-Fi",
    }),
    apSettings: typebox_1.Type.Object({
        ssid: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 32 }), typebox_1.Type.Null()], {
            name: "Wi-Fi Access Point SSID (name)",
            mapper: new modbus_mappers_1.MAPPERS.Text(1224, 32),
            description: "Wi-Fi Access Point SSID (name).\nAllowed chars: (a-z), (A-Z), (0-9), (space) and ( !#%&'()*,-./:;<=>@^_{}| )\nFirst char can't be: space, !, # and ; (ASCII 0x20, 0x21, 0x23, 0x3B).\nLast char can't be: space (ASCII 0x20).\nTo use the default name (OPCB_XXXXXX), set to null.",
            default: null,
            group: "Wi-Fi",
        }),
        password: typebox_1.Type.Union([
            typebox_1.Type.String({ maxLength: 63, pattern: "^[\u0020-\u007e]{8,63}$" }),
            typebox_1.Type.Null(),
        ], {
            name: "Wi-Fi password",
            mapper: new modbus_mappers_1.MAPPERS.Text(1256, 63),
            description: "Wi-Fi Access Point password. Allowed chars: (a-z), (A-Z), (0-9), (space) and ( !\"#$%&'()*+,-./\\:;<=>?@[]^_{}| )",
            default: null,
            group: "Wi-Fi",
        }),
        ipAddress: typebox_1.Type.String({
            name: "Wi-Fi Access Point IP address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1319),
            format: "ipv4",
            description: "Wi-Fi Access Point IP address.",
            default: "192.168.4.1",
            group: "Wi-Fi",
        }),
        subnetMask: typebox_1.Type.String({
            name: "Wi-Fi Access Point subnet mask",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1323),
            format: "ipv4",
            description: "Wi-Fi Access Point subnet mask.",
            default: "255.255.255.0",
            group: "Wi-Fi",
        }),
    }, {
        additionalProperties: false,
        description: "Wi-Fi Access Point settings. Only applied when mode = ap.",
        default: {},
    }),
    stationSettings: typebox_1.Type.Object({
        ssid: typebox_1.Type.Union([typebox_1.Type.String({ maxLength: 32 }), typebox_1.Type.Null()], {
            name: "Wi-Fi station SSID (name)",
            mapper: new modbus_mappers_1.MAPPERS.Text(1327, 32),
            description: "Wi-Fi station SSID (name).\nAllowed chars: (a-z), (A-Z), (0-9), (space) and ( !#%&'()*,-./:;<=>@^_{}| )\nFirst char can't be: space, !, # and ; (ASCII 0x20, 0x21, 0x23, 0x3B).\nLast char can't be: space (ASCII 0x20).\nNull value disables the Wi-Fi station connection.",
            default: null,
            group: "Wi-Fi",
        }),
        password: typebox_1.Type.Union([
            typebox_1.Type.String({ maxLength: 63, pattern: "^[\u0020-\u007e]{8,63}$" }),
            typebox_1.Type.Null(),
        ], {
            name: "Wi-Fi station password",
            mapper: new modbus_mappers_1.MAPPERS.Text(1359, 63),
            description: "Wi-Fi station password. Allowed chars: (a-z), (A-Z), (0-9), (space) and ( !\"#$%&'()*+,-./\\:;<=>?@[]^_{}| )",
            default: null,
            group: "Wi-Fi",
        }),
        dhcpIsEnabled: typebox_1.Type.Boolean({
            name: "DHCP is enabled",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1422),
            description: "Automatic (DHCP) address acquiring is enabled.",
            default: true,
            group: "Wi-Fi",
        }),
        staticIpSettings: typebox_1.Type.Object({
            ipAddress: typebox_1.Type.String({
                format: "ipv4",
                description: "IP address.",
                default: "192.168.0.111",
            }),
            subnetMask: typebox_1.Type.String({
                format: "ipv4",
                description: "Subnet mask.",
                default: "255.255.255.0",
            }),
            gateway: typebox_1.Type.String({
                format: "ipv4",
                description: "Gateway IP.",
                default: "192.168.0.1",
            }),
            primaryDns: typebox_1.Type.String({
                format: "ipv4",
                description: "Primary DNS.",
                default: "192.168.0.1",
            }),
            secondaryDns: typebox_1.Type.String({
                format: "ipv4",
                description: "Secondary DNS.",
                default: "8.8.8.8",
            }),
        }, {
            description: "Static IP configuration.",
            additionalProperties: false,
            default: {},
        }),
    }, {
        additionalProperties: false,
        description: "Wi-Fi station settings. Only applied when mode = station.",
        default: {},
    }),
}, {
    description: "Wi-Fi connection configuration.",
    additionalProperties: false,
    default: {},
});
//# sourceMappingURL=wlan.schema.js.map