"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATE_SCHEMA = void 0;
var typebox_1 = require("@sinclair/typebox");
var modbus_mappers_1 = require("./modbus-mappers");
exports.STATE_SCHEMA = typebox_1.Type.Object({
    inet: typebox_1.Type.Object({
        externalIp: typebox_1.Type.String({
            name: "External IP",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1000),
            description: "External IP of the device.",
            group: "Internet connection state",
        }),
        ping: typebox_1.Type.Union([typebox_1.Type.Number(), typebox_1.Type.Literal("unreachable")], {
            name: "Internet test ping",
            mapper: new modbus_mappers_1.MAPPERS.U16WithLiteral(1004, "unreachable", 1000),
            multiplier: 1000,
            description: "Internet test ping (ms).",
            group: "Internet connection state",
        }),
    }),
    elan: typebox_1.Type.Object({
        available: typebox_1.Type.Boolean({
            name: "Interface is available",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1005),
            description: "Whether the elan interface is available.",
            group: "Ethernet connection state",
        }),
        iface: typebox_1.Type.String({
            name: "Ethernet interface name",
            mapper: new modbus_mappers_1.MAPPERS.Text(1006, 30),
            description: "Currently used elan interface.",
            group: "Ethernet connection state",
        }),
        dhcpEnabled: typebox_1.Type.Boolean({
            name: "DHCP is enabled",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1036),
            description: "Is DHCP enabled on the elan interface.",
            group: "Ethernet connection state",
        }),
        ip: typebox_1.Type.String({
            name: "IP address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1037),
            description: "The IP address of the elan interface.",
            group: "Ethernet connection state",
        }),
        mask: typebox_1.Type.String({
            name: "Subnet mask",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1041),
            description: "The subnet mask of the elan interface.",
            group: "Ethernet connection state",
        }),
        gatewayIp: typebox_1.Type.String({
            name: "Gateway IP",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1045),
            description: "The IP address of the elan gateway.",
            group: "Ethernet connection state",
        }),
        gatewayPing: typebox_1.Type.Union([typebox_1.Type.Number(), typebox_1.Type.Literal("unreachable")], {
            name: "Gateway ping",
            mapper: new modbus_mappers_1.MAPPERS.U16WithLiteral(1049, "unreachable", 1000),
            multiplier: 1000,
            description: "The ping time to the elan gateway (ms).",
            group: "Ethernet connection state",
            units: "ms",
        }),
    }),
    wlan: typebox_1.Type.Object({
        available: typebox_1.Type.Boolean({
            name: "Wi-Fi is available",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1050),
            description: "Whether the wlan interface is available.",
            group: "Wi-Fi connection state",
        }),
        iface: typebox_1.Type.String({
            name: "Wi-Fi interface name",
            mapper: new modbus_mappers_1.MAPPERS.Text(1051, 30),
            description: "Currently used wlan interface.",
            group: "Wi-Fi connection state",
        }),
        isAp: typebox_1.Type.Boolean({
            name: "Wi-Fi is in AP mode",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1081),
            description: "Is the wlan interface in AP mode.",
            group: "Wi-Fi connection state",
        }),
        ssid: typebox_1.Type.String({
            name: "SSID",
            mapper: new modbus_mappers_1.MAPPERS.Text(1082, 100),
            description: "The SSID of the wlan interface.",
            group: "Wi-Fi connection state",
        }),
        channel: typebox_1.Type.Number({
            name: "Channel",
            mapper: new modbus_mappers_1.MAPPERS.U16(1182),
            description: "The channel of the wlan interface.",
            group: "Wi-Fi connection state",
        }),
        ip: typebox_1.Type.String({
            name: "IP address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1183),
            description: "The IP address of the wlan interface.",
            group: "Wi-Fi connection state",
        }),
        mask: typebox_1.Type.String({
            name: "Subnet mask",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1187),
            description: "The subnet mask of the wlan interface.",
            group: "Wi-Fi connection state",
        }),
        gatewayIp: typebox_1.Type.String({
            name: "Gateway IP",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1191),
            description: "The IP address of the wlan gateway.",
            group: "Wi-Fi connection state",
        }),
        gatewayPing: typebox_1.Type.Union([typebox_1.Type.Number(), typebox_1.Type.Literal("unreachable")], {
            name: "Gateway ping",
            mapper: new modbus_mappers_1.MAPPERS.U16WithLiteral(1195, "unreachable", 1000),
            multiplier: 1000,
            description: "The ping time to the wlan gateway (ms).",
            group: "Wi-Fi connection state",
            units: "ms",
        }),
        band: typebox_1.Type.String({
            name: "Band",
            mapper: new modbus_mappers_1.MAPPERS.Enum(1196, {
                a: 0,
                bg: 1,
            }),
            description: "The band of the wlan interface.",
            group: "Wi-Fi connection state",
        }),
        // strengthDbm: Type.String({
        //     description: "The signal strength of the wlan interface (dBm).",
        // }),
    }),
    wg: typebox_1.Type.Object({
        available: typebox_1.Type.Boolean({
            name: "WireGuard is available",
            mapper: new modbus_mappers_1.MAPPERS.Bool(1199),
            description: "Whether the WireGuard interface is available.",
            group: "WireGuard connection state",
        }),
        pubkey: typebox_1.Type.String({ description: "The public key of the WireGuard interface." }),
        ip: typebox_1.Type.String({
            name: "IP address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1200),
            description: "The IP address of the WireGuard interface.",
            group: "WireGuard connection state",
        }),
        mask: typebox_1.Type.String({
            name: "Subnet mask",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1204),
            description: "The subnet mask of the WireGuard interface.",
            group: "WireGuard connection state",
        }),
        endpointAddress: typebox_1.Type.String({
            name: "Endpoint address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4WithPort(2550),
            description: "The external IP address and port of the WireGuard endpoint.",
            group: "WireGuard connection state",
        }),
        endpointPubkey: typebox_1.Type.String({
            name: "Endpoint public key",
            description: "The public key of the WireGuard endpoint.",
            group: "WireGuard connection state",
        }),
        ping: typebox_1.Type.Union([typebox_1.Type.Number(), typebox_1.Type.Literal("unreachable")], {
            name: "Endpoint ping",
            mapper: new modbus_mappers_1.MAPPERS.U16WithLiteral(1212, "unreachable", 1000),
            multiplier: 1000,
            description: "The ping time to the WireGuard endpoint (ms).",
            group: "WireGuard connection state",
            units: "ms",
        }),
        rx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "The number of bytes received since system start",
                mapper: new modbus_mappers_1.MAPPERS.U32(1213),
                description: "The number of bytes received since system start.",
                group: "WireGuard connection state",
                units: "bytes",
            }),
        }),
        tx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "The number of bytes transmitted since system start",
                mapper: new modbus_mappers_1.MAPPERS.U32(1215),
                description: "The number of bytes transmitted since system start.",
                group: "WireGuard connection state",
                units: "bytes",
            }),
        }),
    }),
    voltage: typebox_1.Type.Number({
        name: "Voltage",
        mapper: new modbus_mappers_1.MAPPERS.U16(1217),
        description: "The voltage of the device (V).",
        group: "General state",
        units: "V",
    }),
    temperature: typebox_1.Type.Number({
        name: "Temperature",
        mapper: new modbus_mappers_1.MAPPERS.U16(1218, 10),
        multiplier: 10,
        description: "The temperature of the core (C).",
        group: "General state",
        units: "Â°C",
    }),
    ram: typebox_1.Type.Object({
        used: typebox_1.Type.Integer({
            name: "Used memory",
            mapper: new modbus_mappers_1.MAPPERS.U32(1220, 1 / 1048576),
            multiplier: 1 / 1048576,
            decimalPlaces: 6,
            description: "The amount of memory used (megabytes).",
            group: "General state",
            units: "megabytes",
        }),
        total: typebox_1.Type.Integer({
            name: "Total memory",
            mapper: new modbus_mappers_1.MAPPERS.U32(1222, 1 / 1048576),
            multiplier: 1 / 1048576,
            decimalPlaces: 6,
            description: "The total amount of memory (megabytes).",
            group: "General state",
            units: "megabytes",
        }),
    }),
    sys: typebox_1.Type.Object({
        arch: typebox_1.Type.String({ description: "The system architecture." }),
        platform: typebox_1.Type.String({ description: "The system platform." }),
        osRelease: typebox_1.Type.String({ description: "The system OS release." }),
        cpus: typebox_1.Type.Array(typebox_1.Type.Number(), { description: "Load average for each CPU core." }),
        loadAvg: typebox_1.Type.String({
            description: "1, 5, and 15 minute load averages separated by spaces.",
        }),
        cmdFiles: typebox_1.Type.String({
            description: "List of names of command files currently processed, separated by comma.",
        }),
    }),
    storage: typebox_1.Type.Object({
        used: typebox_1.Type.Integer({
            name: "Used disk space",
            mapper: new modbus_mappers_1.MAPPERS.U16(1224, 1 / 1048576),
            multiplier: 1 / 1048576,
            decimalPlaces: 6,
            description: "The amount of disk space used (bytes).",
            group: "General state",
            units: "bytes",
        }),
        total: typebox_1.Type.Integer({
            name: "Total disk space",
            mapper: new modbus_mappers_1.MAPPERS.U32(1225, 1 / 1048576),
            multiplier: 1 / 1048576,
            decimalPlaces: 6,
            description: "The total amount of disk space (bytes).",
            group: "General state",
            units: "bytes",
        }),
    }),
    time: typebox_1.Type.Object({
        os: typebox_1.Type.Integer({
            name: "OS uptime",
            mapper: new modbus_mappers_1.MAPPERS.U32(1227),
            description: "The time the OS has been running (seconds).",
            group: "Device time state",
            units: "s",
        }),
        process: typebox_1.Type.Integer({
            name: "OPCB runtime process uptime",
            mapper: new modbus_mappers_1.MAPPERS.U32(1229),
            description: "The time the OPCB runtime process has been running (seconds).",
            group: "Device time state",
            units: "s",
        }),
        now: typebox_1.Type.Integer({
            name: "Local time",
            mapper: new modbus_mappers_1.MAPPERS.U32(1231, 0.001),
            multiplier: 0.001,
            decimalPlaces: 3,
            description: "The current time in seconds seconds since 1970-01-01 00:00:00 in local timezone.",
            group: "Device time state",
            units: "s",
        }),
        nowUtc: typebox_1.Type.Integer({
            name: "UTC time",
            mapper: new modbus_mappers_1.MAPPERS.U32(1233, 0.001),
            multiplier: 0.001,
            decimalPlaces: 3,
            description: "The current time in seconds seconds since 1970-01-01 00:00:00 UTC.",
            group: "Device time state",
            units: "s",
        }),
        timezones: typebox_1.Type.String(),
    }),
    rs485: typebox_1.Type.Array(typebox_1.Type.Object({
        dev: typebox_1.Type.String({
            name: "RS-485 device name",
            mapper: new modbus_mappers_1.MAPPERS.Text(1235, 20),
            description: "The name of the device.",
            group: "RS-485 state",
        }),
        mode: typebox_1.Type.Union([
            typebox_1.Type.Literal("rtu-master"),
            typebox_1.Type.Literal("rtu-slave"),
            typebox_1.Type.Literal("ascii-master"),
            typebox_1.Type.Literal("ascii-slave"),
        ], {
            name: "RS-485 mode",
            mapper: new modbus_mappers_1.MAPPERS.Enum(1255, {
                "rtu-master": 0,
                "rtu-slave": 1,
                "ascii-master": 2,
                "ascii-slave": 3,
            }),
            description: "The Modbus role of the connection.",
            group: "RS-485 state",
        }),
        status: typebox_1.Type.Union([typebox_1.Type.Literal("disabled"), typebox_1.Type.Literal("attempting"), typebox_1.Type.Literal("success")], {
            name: "RS-485 status",
            mapper: new modbus_mappers_1.MAPPERS.Enum(1256, {
                disabled: 0,
                attempting: 1,
                success: 2,
            }),
            description: "The status of the connection.",
            group: "RS-485 state",
        }),
        lastError: typebox_1.Type.String({ description: "The last error code." }),
        attemptsNum: typebox_1.Type.Integer({
            name: "Connection attempts",
            mapper: new modbus_mappers_1.MAPPERS.U16(1257),
            description: "The number of connection attempts since runtime start.",
            group: "RS-485 state",
        }),
        connectedOn: typebox_1.Type.Integer({
            name: "Connection date",
            mapper: new modbus_mappers_1.MAPPERS.U32(1258),
            description: "The connection date (timestamp).",
            group: "RS-485 state",
            units: "s",
        }),
        rx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "Total bytes received",
                mapper: new modbus_mappers_1.MAPPERS.U32(1260),
                description: "The number of bytes received since runtime start.",
                group: "RS-485 state",
                units: "bytes",
            }),
            speed: typebox_1.Type.Integer({
                name: "Bytes received per second",
                mapper: new modbus_mappers_1.MAPPERS.U32(1262),
                description: "The number of bytes received per second since last minute.",
                group: "RS-485 state",
                units: "bytes/s",
            }),
            lastTransferOn: typebox_1.Type.Integer({
                name: "Last time of any data received",
                mapper: new modbus_mappers_1.MAPPERS.U32(1264),
                description: "The last time of any data received (timestamp).",
                group: "RS-485 state",
                units: "s",
            }),
        }),
        tx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "Total bytes transmitted",
                mapper: new modbus_mappers_1.MAPPERS.U32(1266),
                description: "The number of bytes transmitted since runtime start.",
                group: "RS-485 state",
                units: "bytes",
            }),
            speed: typebox_1.Type.Integer({
                name: "Bytes transmitted per second",
                mapper: new modbus_mappers_1.MAPPERS.U32(1268),
                description: "The number of bytes transmitted per second since last minute.",
                group: "RS-485 state",
                units: "bytes/s",
            }),
            lastTransferOn: typebox_1.Type.Integer({
                name: "Last time of any data sent",
                mapper: new modbus_mappers_1.MAPPERS.U32(1270),
                description: "The last time of any data sent (timestamp).",
                group: "RS-485 state",
                units: "s",
            }),
        }),
    }), {
        name: "Modbus RS-485 port state",
        modbusArrayAddressSpacing: 100,
        maxItems: 4,
    }),
    mbtcpClient: typebox_1.Type.Array(typebox_1.Type.Object({
        status: typebox_1.Type.Union([
            typebox_1.Type.Literal("disabled"),
            typebox_1.Type.Literal("waiting"),
            typebox_1.Type.Literal("connecting"),
            typebox_1.Type.Literal("connected"),
        ], {
            name: "Modbus TCP client status",
            mapper: new modbus_mappers_1.MAPPERS.Enum(1635, {
                disabled: 0,
                waiting: 1,
                connecting: 2,
                connected: 3,
            }),
            description: "The status of the connection.",
            group: "Modbus TCP client state",
        }),
        iface: typebox_1.Type.String({
            name: "Modbus TCP client interface",
            mapper: new modbus_mappers_1.MAPPERS.Text(1636, 30),
            description: "The name of the interface used for this client.",
            group: "Modbus TCP client state",
        }),
        address: typebox_1.Type.String({
            name: "Modbus TCP client address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(1666),
            description: "The IP address and port of the client.",
            group: "Modbus TCP client state",
        }),
        lastConnectionOn: typebox_1.Type.Integer({
            name: "Last connection date",
            mapper: new modbus_mappers_1.MAPPERS.U32(1670),
            description: "The last connection date (timestamp).",
            group: "Modbus TCP client state",
        }),
        connectedOn: typebox_1.Type.Integer({
            name: "Connected on",
            mapper: new modbus_mappers_1.MAPPERS.U32(1672),
            description: "The connection date (timestamp).",
            group: "Modbus TCP client state",
        }),
        lastError: typebox_1.Type.String({ description: "The last error code." }),
        connectionAttemptsNum: typebox_1.Type.Integer({
            name: "Connection attempts",
            mapper: new modbus_mappers_1.MAPPERS.U16(1674),
            description: "The number of connection attempts since runtime start.",
            group: "Modbus TCP client state",
        }),
        rx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "Total bytes received",
                mapper: new modbus_mappers_1.MAPPERS.U32(1675),
                description: "The number of bytes received since runtime start.",
                group: "Modbus TCP client state",
            }),
            connection: typebox_1.Type.Integer({
                name: "Bytes received since last connection",
                mapper: new modbus_mappers_1.MAPPERS.U32(1677),
                description: "The number of bytes received since last connection.",
                group: "Modbus TCP client state",
            }),
            speed: typebox_1.Type.Integer({
                name: "Bytes received per second",
                mapper: new modbus_mappers_1.MAPPERS.U32(1679),
                description: "The number of bytes received per second since last minute.",
                group: "Modbus TCP client state",
            }),
            lastTransferOn: typebox_1.Type.Integer({
                name: "Last time of any data received",
                mapper: new modbus_mappers_1.MAPPERS.U32(1681),
                description: "The last time of any data received (timestamp).",
                group: "Modbus TCP client state",
            }),
        }),
        tx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "Total bytes transmitted",
                mapper: new modbus_mappers_1.MAPPERS.U32(1683),
                description: "The number of bytes transmitted since runtime start.",
                group: "Modbus TCP client state",
            }),
            connection: typebox_1.Type.Integer({
                name: "Bytes transmitted since last connection",
                mapper: new modbus_mappers_1.MAPPERS.U32(1685),
                description: "The number of bytes transmitted since last connection.",
                group: "Modbus TCP client state",
            }),
            speed: typebox_1.Type.Integer({
                name: "Bytes transmitted per second",
                mapper: new modbus_mappers_1.MAPPERS.U32(1687),
                description: "The number of bytes transmitted per second since last minute.",
                group: "Modbus TCP client state",
            }),
            lastTransferOn: typebox_1.Type.Integer({
                name: "Last time of any data sent",
                mapper: new modbus_mappers_1.MAPPERS.U32(1689),
                description: "The last time of any data sent (timestamp).",
                group: "Modbus TCP client state",
            }),
        }),
    }), {
        name: "Modbus TCP client state",
        modbusArrayAddressSpacing: 100,
        maxItems: 4,
    }),
    mbtcpServer: typebox_1.Type.Object({
        enabled: typebox_1.Type.Boolean({
            name: "Modbus TCP server is enabled",
            mapper: new modbus_mappers_1.MAPPERS.Bool(2035),
            description: "Whether the server is enabled.",
            group: "Modbus TCP server state",
        }),
        iface: typebox_1.Type.String({
            name: "Modbus TCP server interface",
            mapper: new modbus_mappers_1.MAPPERS.Text(2036, 30),
            description: "The name of the interface server listens to.",
            group: "Modbus TCP server state",
        }),
        listenIp: typebox_1.Type.String({
            name: "Modbus TCP server address",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(2066),
            description: "The IP address server listens to.",
            group: "Modbus TCP server state",
        }),
        listenPort: typebox_1.Type.Integer({
            name: "Modbus TCP server port",
            mapper: new modbus_mappers_1.MAPPERS.U16(2070),
            description: "The port server listens to.",
            group: "Modbus TCP server state",
        }),
        client: typebox_1.Type.Array(typebox_1.Type.Object({
            address: typebox_1.Type.String({
                name: "Modbus TCP client address",
                mapper: new modbus_mappers_1.MAPPERS.IPv4(2071),
                description: "The IP address and port of the incoming connection.",
                group: "Modbus TCP server state",
            }),
            iface: typebox_1.Type.String({
                name: "Modbus TCP client interface",
                mapper: new modbus_mappers_1.MAPPERS.Text(2075, 30),
                description: "The interface that received the incoming connection.",
                group: "Modbus TCP server state",
            }),
            connectedOn: typebox_1.Type.Integer({
                name: "Connection date",
                mapper: new modbus_mappers_1.MAPPERS.U32(2095),
                description: "The connection date (timestamp).",
                group: "Modbus TCP server state",
            }),
            rx: typebox_1.Type.Object({
                total: typebox_1.Type.Integer({
                    name: "Total bytes received",
                    mapper: new modbus_mappers_1.MAPPERS.U32(2097),
                    description: "The number of bytes received since runtime start.",
                    group: "Modbus TCP server state",
                }),
                speed: typebox_1.Type.Integer({
                    name: "Bytes received per second",
                    mapper: new modbus_mappers_1.MAPPERS.U32(2099),
                    description: "The number of bytes received per second since last minute.",
                    group: "Modbus TCP server state",
                }),
                lastTransferOn: typebox_1.Type.Integer({
                    name: "Last time of any data received",
                    mapper: new modbus_mappers_1.MAPPERS.U32(2101),
                    description: "The last time of any data received (timestamp).",
                    group: "Modbus TCP server state",
                }),
            }),
            tx: typebox_1.Type.Object({
                total: typebox_1.Type.Integer({
                    name: "Total bytes transmitted",
                    mapper: new modbus_mappers_1.MAPPERS.U32(2103),
                    description: "The number of bytes transmitted since runtime start.",
                    group: "Modbus TCP server state",
                }),
                speed: typebox_1.Type.Integer({
                    name: "Bytes transmitted per second",
                    mapper: new modbus_mappers_1.MAPPERS.U32(2105),
                    description: "The number of bytes transmitted per second since last minute.",
                    group: "Modbus TCP server state",
                }),
                lastTransferOn: typebox_1.Type.Integer({
                    name: "Last time of any data sent",
                    mapper: new modbus_mappers_1.MAPPERS.U32(2107),
                    description: "The last time of any data sent (timestamp).",
                    group: "Modbus TCP server state",
                }),
            }),
        }), {
            name: "Modbus TCP server client",
            maxItems: 4,
            modbusArrayAddressSpacing: 100,
            description: "The list of connected clients.",
        }),
    }),
    overvisRc: typebox_1.Type.Object({
        status: typebox_1.Type.Union([
            typebox_1.Type.Literal("disabled"),
            typebox_1.Type.Literal("waiting"),
            typebox_1.Type.Literal("connecting"),
            typebox_1.Type.Literal("connected"),
        ], {
            name: "Overvis RC status",
            mapper: new modbus_mappers_1.MAPPERS.Enum(2471, {
                disabled: 0,
                waiting: 1,
                connecting: 2,
                connected: 3,
            }),
            description: "The status of the connection.",
            group: "Overvis RC state",
        }),
        iface: typebox_1.Type.String({
            name: "Overvis RC interface",
            mapper: new modbus_mappers_1.MAPPERS.Text(2472, 30),
            description: "The name of the interface used for this client.",
            group: "Overvis RC state",
        }),
        address: typebox_1.Type.String({
            description: "The hostname and port of the Overvis server.",
        }),
        resolvedIp: typebox_1.Type.String({
            name: "Overvis RC resolved IP",
            mapper: new modbus_mappers_1.MAPPERS.IPv4(2502),
            description: "The resolved IP of the Overvis server.",
            group: "Overvis RC state",
        }),
        lastError: typebox_1.Type.String({ description: "The last error code." }),
        lastConnectionOn: typebox_1.Type.Integer({
            name: "Last connection date",
            mapper: new modbus_mappers_1.MAPPERS.U32(2506),
            description: "The last connection date (timestamp).",
            group: "Overvis RC state",
        }),
        connectionAttemptsNum: typebox_1.Type.Integer({
            name: "Connection attempts",
            mapper: new modbus_mappers_1.MAPPERS.U16(2508),
            description: "The number of connection attempts since runtime start.",
            group: "Overvis RC state",
        }),
        activationCode: typebox_1.Type.Integer({
            name: "Activation code",
            mapper: new modbus_mappers_1.MAPPERS.U32(2510),
            description: "The activation code received from Overvis.",
            group: "Overvis RC state",
        }),
        mac: typebox_1.Type.String({
            name: "MAC address",
            mapper: new modbus_mappers_1.MAPPERS.Mac(2512),
            description: "The MAC address of this device that was used for Overvis connection authentication.",
            group: "Overvis RC state",
        }),
        boundAccountEmail: typebox_1.Type.String({
            description: "The email address of the Overvis account that this device is bound to. Set instead of activation code during Modbus handshake from Overvis server.",
        }),
        rx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "Total bytes received",
                mapper: new modbus_mappers_1.MAPPERS.U32(2518),
                description: "The number of bytes received since runtime start.",
                group: "Overvis RC state",
            }),
            connection: typebox_1.Type.Integer({
                name: "Bytes received since last connection",
                mapper: new modbus_mappers_1.MAPPERS.U32(2520),
                description: "The number of bytes received since last connection.",
                group: "Overvis RC state",
            }),
            speed: typebox_1.Type.Integer({
                name: "Bytes received per second",
                mapper: new modbus_mappers_1.MAPPERS.U32(2522),
                description: "The number of bytes received per second since last minute.",
                group: "Overvis RC state",
            }),
            lastTransferOn: typebox_1.Type.Integer({
                name: "Last time of any data received",
                mapper: new modbus_mappers_1.MAPPERS.U32(2524),
                description: "The last time of receiving any data from server (timestamp).",
                group: "Overvis RC state",
            }),
        }),
        tx: typebox_1.Type.Object({
            total: typebox_1.Type.Integer({
                name: "Total bytes transmitted",
                mapper: new modbus_mappers_1.MAPPERS.U32(2526),
                description: "The number of bytes transmitted since runtime start.",
                group: "Overvis RC state",
            }),
            connection: typebox_1.Type.Integer({
                name: "Bytes transmitted since last connection",
                mapper: new modbus_mappers_1.MAPPERS.U32(2528),
                description: "The number of bytes transmitted since last connection.",
                group: "Overvis RC state",
            }),
            speed: typebox_1.Type.Integer({
                name: "Bytes transmitted per second",
                mapper: new modbus_mappers_1.MAPPERS.U32(2530),
                description: "The number of bytes transmitted per second since last minute.",
                group: "Overvis RC state",
            }),
            lastTransferOn: typebox_1.Type.Integer({
                name: "Last time of any data sent",
                mapper: new modbus_mappers_1.MAPPERS.U32(2532),
                description: "The last time of sending any data to server (timestamp).",
                group: "Overvis RC state",
            }),
        }),
    }),
    boundToOcpServer: typebox_1.Type.String({
        description: "The name of the OCP server this device is bound to. Empty string - no binding.",
    }),
    route: typebox_1.Type.Object({
        self: typebox_1.Type.String({ description: "Modbus addresses range for virtual OPCB device." }),
        rs485: typebox_1.Type.Array(typebox_1.Type.String({ description: "Modbus addresses range for RS485 port." })),
        mbtcpClient: typebox_1.Type.Array(typebox_1.Type.String({ description: "Modbus addresses range for Modbus TCP client." })),
    }),
    release: typebox_1.Type.Object({
        tag: typebox_1.Type.String({ description: "The full tag of the OPCB runtime checkout." }),
        version: typebox_1.Type.String({ description: "The version of the OPCB runtime." }),
        sha: typebox_1.Type.String({ description: "The SHA hash of the OPCB runtime commit." }),
        date: typebox_1.Type.String({ description: "The date of the OPCB runtime release." }),
        versionNum: typebox_1.Type.Integer({
            name: "OPCB runtime version",
            mapper: new modbus_mappers_1.MAPPERS.U16(2534),
            description: "The version of the OPCB runtime as a number.",
            group: "General state",
        }),
        model: typebox_1.Type.Union([typebox_1.Type.Literal("opcb"), typebox_1.Type.Literal("opcb221"), typebox_1.Type.Literal("opcb221b")], {
            name: "OPCB model",
            mapper: new modbus_mappers_1.MAPPERS.Enum(2535, {
                opcb: 0,
                opcb221: 1,
                opcb221b: 2,
            }),
            description: "The code of the model of the device. Affects UI, registers map and periphery operation.",
            group: "General state",
        }),
        modelName: typebox_1.Type.String({
            description: "The name of the model of the device as displayed to the user. Only used in UI.",
        }),
        updateState: typebox_1.Type.Union([
            typebox_1.Type.Literal("disabled"),
            typebox_1.Type.Literal("no-repo"),
            typebox_1.Type.Literal("dirty-repo"),
            typebox_1.Type.Literal("broken-repo"),
            typebox_1.Type.Literal("no-update"),
            typebox_1.Type.Literal("available-update-patch"),
            typebox_1.Type.Literal("available-update-minor"),
            typebox_1.Type.Literal("available-update-major"),
            typebox_1.Type.Literal("imminent-upgrade"),
        ]),
        scheduledUpgradeToTag: typebox_1.Type.String({
            description: "The tag of the update to be installed when the schedule allows.",
        }),
        lastUpgradeError: typebox_1.Type.Optional(typebox_1.Type.String({
            description: "The error that occurred during the last upgrade. undefined - no error.",
        })),
        lastFailedUpgradeRef: typebox_1.Type.Optional(typebox_1.Type.String({
            description: "The tag/ref of the last upgrade attempt. Can be not undefined only in case of failed upgrade.",
        })),
        lastSuccessfulUpgradeRef: typebox_1.Type.Optional(typebox_1.Type.String({
            description: "The tag/ref of the last successful upgrade. Can be not undefined only in case of successful upgrade.",
        })),
        latestPatch: typebox_1.Type.Object({
            tag: typebox_1.Type.String({
                description: "The tag of the latest available patch.",
            }),
            version: typebox_1.Type.String({
                description: "The version of the latest available patch.",
            }),
            date: typebox_1.Type.String({
                description: "The release date of the latest available patch.",
            }),
            changelog: typebox_1.Type.String({
                description: "The changelog of the latest available patch.",
            }),
            sha: typebox_1.Type.String({
                description: "The SHA hash of the latest available patch commit.",
            }),
        }, { description: "The information about the latest available patch." }),
        latestMinor: typebox_1.Type.Object({
            tag: typebox_1.Type.String({
                description: "The tag of the latest available minor update.",
            }),
            version: typebox_1.Type.String({
                description: "The version of the latest available minor update.",
            }),
            date: typebox_1.Type.String({
                description: "The release date of the latest available minor update.",
            }),
            changelog: typebox_1.Type.String({
                description: "The changelog of the latest available minor update.",
            }),
            sha: typebox_1.Type.String({
                description: "The SHA hash of the latest available minor update commit.",
            }),
        }, { description: "The information about the latest available minor update." }),
        latestMajor: typebox_1.Type.Object({
            tag: typebox_1.Type.String({
                description: "The tag of the latest available major update.",
            }),
            version: typebox_1.Type.String({
                description: "The version of the latest available major update.",
            }),
            date: typebox_1.Type.String({
                description: "The release date of the latest available major update.",
            }),
            changelog: typebox_1.Type.String({
                description: "The changelog of the latest available major update.",
            }),
            sha: typebox_1.Type.String({
                description: "The SHA hash of the latest available major update commit.",
            }),
        }, { description: "The information about the latest available major update." }),
    }),
    manufacturer: typebox_1.Type.Object({
        modeEnabled: typebox_1.Type.Boolean({ description: "Whether the manufacturer mode is enabled." }),
        licenseUuid: typebox_1.Type.String({ description: "The UUID of the manufacturer license." }),
        licensePassword: typebox_1.Type.String({ description: "The password of the manufacturer license." }),
        batchDescription: typebox_1.Type.String({
            description: "The description that will be sent on server during device registration.",
        }),
    }),
    virtualDevice: typebox_1.Type.Object({
        isEnabled: typebox_1.Type.Boolean({
            name: "Virtual device is enabled",
            mapper: new modbus_mappers_1.MAPPERS.Bool(2536),
            description: "Enable the virtual Modbus device that provides OPCB settings and status variables through the registers.",
            default: true,
            group: "General state",
        }),
        uid: typebox_1.Type.Integer({
            name: "Virtual device UID",
            mapper: new modbus_mappers_1.MAPPERS.U8(2537),
            minimum: 0,
            maximum: 255,
            description: "The Modbus UID (device address) of the virtual device.",
            default: 111,
            group: "General state",
        }),
        modbusParameters: typebox_1.Type.String({
            description: "The JSON string with the virtual device Modbus parameters.",
        }),
    }),
});
//# sourceMappingURL=state.js.map