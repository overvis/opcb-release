"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.logger = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const handlers_1 = require("./handlers");
const parameter_1 = require("./parameter");
const virtual_params_1 = require("./virtual-params");
const better_sqlite3_1 = tslib_1.__importDefault(require("better-sqlite3"));
// eslint-disable-next-line @typescript-eslint/require-await
async function run(setLogger, runConf) {
    exports.logger = setLogger;
    exports.logger.info("Starting...");
    const db = (0, better_sqlite3_1.default)(runConf.sqliteDbPath, {
        nativeBinding: runConf.sqliteLibDir + "/better_sqlite3.node",
    });
    db.loadExtension(runConf.sqliteLibDir + "/uuid.so");
    const configData = {
        isEnabled: false,
        uid: 111,
    };
    // initializing bus
    const bus = new opcb_ts_shared_1.redisBus.RedisBus(runConf.redisSocket, "VIR", exports.logger);
    const configMap = (0, parameter_1.createAddressParamMap)(opcb_ts_shared_1.CONFIG_SCHEMA, new Map(), "config");
    const stateMap = (0, parameter_1.createAddressParamMap)(opcb_ts_shared_1.STATE_SCHEMA, new Map(), "state");
    const virtParamsMap = (0, parameter_1.createAddressParamMap)(virtual_params_1.VIRTUAL_PARMAS_SCHEMA, new Map(), "state");
    await bus.setState({
        "virtualDevice:modbusParameters": JSON.stringify([
            ...(0, parameter_1.createModbusParameters)(opcb_ts_shared_1.CONFIG_SCHEMA, "config", []),
            ...(0, parameter_1.createModbusParameters)(opcb_ts_shared_1.STATE_SCHEMA, "state", []),
            ...(0, parameter_1.createModbusParameters)(virtual_params_1.VIRTUAL_PARMAS_SCHEMA, "state", []),
            ...(0, parameter_1.createModbusUserParameters)(),
        ]),
    });
    bus.registerRequestHandler("sync-config", (0, handlers_1.createSyncConfigHandler)({
        bus,
        configData,
        db,
    }));
    bus.registerRequestHandler("modbus-req", (0, handlers_1.createModbusRequestHandler)({
        bus,
        configData,
        db,
    }, configMap, stateMap, virtParamsMap));
    // wait for config changes from redis stream
    exports.logger.info("Started. Listening to the stream...");
    return [
        bus.listenCmdStreamForever(runConf.testMode),
        () => bus.abortListen(),
        () => {
            db.prepare("DELETE FROM stored_registers").run();
        },
    ];
}
exports.run = run;
//# sourceMappingURL=index.js.map