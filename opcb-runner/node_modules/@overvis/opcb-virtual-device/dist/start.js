"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const pino_1 = tslib_1.__importDefault(require("pino"));
const _1 = require(".");
let logger;
async function start() {
    logger = (0, pino_1.default)({
        level: "debug",
        transport: {
            target: "pino-pretty",
        },
    });
    const redisClient = new opcb_ts_shared_1.RedisClient("redis://127.0.0.1:6379/0", logger.child({ module: "RDC" }));
    logger.info("Start virtual device in watch mode.");
    await (0, _1.run)(logger, {
        redisClient: redisClient.getActorClient("VIR"),
        sqliteDbPath: "../localdev/opcb/user/opcb.sqlite3",
    });
    return redisClient.listenCmdStreamForever();
}
start().catch((e) => {
    if (logger) {
        logger.fatal(e);
    }
    else {
        // eslint-disable-next-line no-console
        console.error(e);
    }
    setTimeout(() => process.exit(1), 1000);
});
//# sourceMappingURL=start.js.map