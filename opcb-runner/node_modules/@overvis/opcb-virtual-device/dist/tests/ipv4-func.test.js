"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const utils_1 = require("./utils");
describe("virtual device", function () {
    it("should correctly read ipv4 parameter", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setConfs({
            "wlan:apSettings:ipAddress": "192.168.4.1",
        });
        // IPv4 - id: 1319
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeReadRequest)(111, 1319, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3)).toBe(192);
        stop();
    });
    it("should correctly write single ipv4 parameter", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        // IPv4 - id: 1319
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 1319, 195), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "set-config",
            values: { "wlan:apSettings:ipAddress": "195.168.4.1" },
        });
        // incorrect value
        // IPv4 - id: 1319
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 1319, 256), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "modbus-resp",
            data: Buffer.from("6f8603", "hex"),
        });
        stop();
    });
});
//# sourceMappingURL=ipv4-func.test.js.map