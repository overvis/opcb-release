"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const utils_1 = require("./utils");
describe("virtual device", function () {
    it("should correctly read number parameters", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setConfs({
            "virtualDevice:uid": "111",
            "http:externalPort": "222",
            "auth:sessionTtl": "333",
        });
        // U8 - id: 1500
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeReadRequest)(111, 1500, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3)).toBe(111);
        // U16 - id: 1001
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeReadRequest)(111, 1001, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3)).toBe(222);
        // U32 - id: 1003
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeReadRequest)(111, 1003, 2, 0x03), "rtu-no-crc"))).data.readUInt32BE(3)).toBe(333);
        stop();
    });
    it("should correctly write single number parameters", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        // U8 - id: 1500
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 1500, 112), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "set-config",
            values: { "virtualDevice:uid": "112" },
        });
        // U16 - id: 1001
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 1001, 223), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "set-config",
            values: { "http:externalPort": "223" },
        });
        // incorrect value
        // U8 - id: 1500
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 1500, 256), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "modbus-resp",
            data: Buffer.from("6f8603", "hex"),
        });
        stop();
    });
    it("should correctly write multiple number parameters", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        // U32 - id: 1003
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteMultipleRequest)(111, 1003, [7, 46948]), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "set-config",
            values: { "auth:sessionTtl": "505700" },
        });
        // incorrect values
        // U32 - id: 1003
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.ModbusRequest((0, utils_1.makeWriteMultipleRequest)(111, 1003, [65535, 46948]), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "modbus-resp",
            data: Buffer.from("6f9003", "hex"),
        });
        stop();
    });
});
//# sourceMappingURL=number-func.test.js.map