"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const utils_1 = require("./utils");
describe("virtual device", function () {
    it("should correctly read texts parameters", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setConfs({
            "elan:networkInterfaceName": "eth0",
        });
        // Text - id: 1100
        expect(String.fromCharCode((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 1100, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3))).toBe("e");
        const multipleRes = await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 1100, 4, 0x03), "rtu-no-crc"));
        let text = "";
        for (let i = 0; i < multipleRes.data.length - 3; i += 2) {
            text += String.fromCharCode(multipleRes.data.readUint16BE(3 + i));
        }
        expect(text).toBe("eth0");
        stop();
    });
    it("should correctly write single text parameter", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setConfs({ "elan:networkInterfaceName": "eth0" });
        // Text - id: 1100
        await bus.sendMsg(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 1100, "s".charCodeAt(0)), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "set-config",
            values: { "elan:networkInterfaceName": "sth0" },
        });
        stop();
    });
    it("should correctly write multiple text parameters", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setConfs({ "elan:networkInterfaceName": "eth0" });
        // Text - id: 1100
        await bus.sendMsg(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeWriteMultipleRequest)(111, 1100, [
            "a".charCodeAt(0),
            "b".charCodeAt(0),
            "c".charCodeAt(0),
        ]), "rtu-no-crc"));
        expect(await bus.waitForNextMsg(await bus.getLastMsgId())).toMatchObject({
            cmd: "set-config",
            values: { "elan:networkInterfaceName": "abc0" },
        });
        stop();
    });
});
//# sourceMappingURL=text-func.test.js.map