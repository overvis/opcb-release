"use strict";
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-empty-function */
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWriteMultipleRequest = exports.makeWriteSingleRequest = exports.makeReadRequest = exports.runVirtDevice = void 0;
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const fs = tslib_1.__importStar(require("fs"));
const virtualDevice = tslib_1.__importStar(require(".."));
async function runVirtDevice(silent = false) {
    let logger = {
        level: "silent",
        fatal: () => { },
        warn: () => { },
        debug: () => { },
        trace: () => { },
        info: () => { },
        error: () => { },
        silent: () => { },
    };
    if (!silent) {
        logger = {
            level: "warn",
            fatal: console.error,
            warn: console.warn,
            debug: () => { },
            trace: () => { },
            info: () => { },
            error: console.error,
            silent: () => { },
        };
    }
    fs.copyFileSync("./src/tests/dev.sqlite", "/tmp/virtual-device-test-db.sqlite");
    const redisClient = new opcb_ts_shared_1.RedisClient("redis://127.0.0.1:6379/0", logger);
    await redisClient.clear();
    await redisClient.setConfs({
        "virtualDevice:isEnabled": "true",
        "virtualDevice:uid": "111",
    });
    await redisClient.sendMsg("CFG", new opcb_ts_shared_1.redisCmd.SyncConfig());
    await virtualDevice.run(logger, {
        redisClient: redisClient.getActorClient("VIR"),
        sqliteDbPath: "/tmp/virtual-device-test-db.sqlite",
    });
    redisClient.listenCmdStream(true).catch(console.error);
    await (0, opcb_ts_shared_1.timeout)(5000, redisClient.waitForMsg("done"));
    return [
        // as unknown as TestRedisClient <- Jest TS compiler fix
        redisClient.getActorClient("TST"),
        () => {
            redisClient.abortListen();
            const db = (0, opcb_ts_shared_1.connectSqlite)("/tmp/virtual-device-test-db.sqlite");
            db.prepare("DELETE FROM stored_registers").run();
        },
    ];
}
exports.runVirtDevice = runVirtDevice;
function makeReadRequest(modbusId, address, length, func) {
    const buffer = Buffer.alloc(6);
    buffer.writeUInt8(modbusId, 0);
    buffer.writeUInt8(func, 1);
    buffer.writeUInt16BE(address, 2);
    buffer.writeUInt16BE(length, 4);
    return buffer;
}
exports.makeReadRequest = makeReadRequest;
function makeWriteSingleRequest(modbusId, address, value) {
    const buffer = Buffer.alloc(6);
    buffer.writeUInt8(modbusId, 0);
    buffer.writeUInt8(0x06, 1);
    buffer.writeUInt16BE(address, 2);
    buffer.writeUInt16BE(value, 4);
    return buffer;
}
exports.makeWriteSingleRequest = makeWriteSingleRequest;
function makeWriteMultipleRequest(modbusId, address, values) {
    const buffer = Buffer.alloc(7 + values.length * 2);
    buffer.writeUInt8(modbusId, 0);
    // write func
    buffer.writeUInt8(0x10, 1);
    // write address
    buffer.writeUInt16BE(address, 2);
    // write quantity
    buffer.writeUInt16BE(values.length, 4);
    // write byte count
    buffer.writeUInt8(values.length * 2, 6);
    for (let i = 0; i < values.length; i++) {
        buffer.writeUInt16BE(values[i], 7 + i * 2);
    }
    return buffer;
}
exports.makeWriteMultipleRequest = makeWriteMultipleRequest;
//# sourceMappingURL=utils.js.map