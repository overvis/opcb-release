"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const pino_1 = tslib_1.__importDefault(require("pino"));
const __1 = require("..");
let logger, bus;
describe("test virtual device", function () {
    beforeAll(async () => {
        logger = (0, pino_1.default)({
            level: "info",
            transport: {
                target: "pino-pretty",
            },
        });
        logger.info("Start virtual device in test mode.");
        const res = await (0, __1.run)(logger, {
            redisSocket: "/tmp/opcb-redis.sock",
        });
        // eslint-disable-next-line no-console
        res[0].catch(console.error);
        // init bus, set CFG, reason is need set config
        bus = new opcb_ts_shared_1.redisBus.RedisBus("/tmp/opcb-redis.sock", "CFG", logger);
        await bus.setConfs({
            "virtualDevice:isEnabled": "true",
            "virtualDevice:uid": "111",
            "http:externalPort": "20",
            "http:internalApiPort": "35",
            "http:internalApiListenTo": "192.168.111.112",
            "auth:sessionTtl": "505600",
            "modbusRs485:1:responseTimeoutMs": "100",
            "global:modelName": "test",
            "global:model": "opcb221b",
        });
        await bus.setState({
            "wlan:available": "true",
        });
        await bus.sendMsg(new opcb_ts_shared_1.redisBus.SyncConfig());
        // eslint-disable-next-line @typescript-eslint/require-await
        bus.registerRequestHandler("set-config", async (cmd) => {
            await bus.setConfs(cmd.values);
            return new opcb_ts_shared_1.redisBus.ConfigValidationResponse("ok");
        });
        await new Promise((resolve) => setTimeout(resolve, 1000));
        // eslint-disable-next-line no-console
        bus.listenCmdStreamForever().catch(console.error);
    });
    it("should read U8 parameter", async () => {
        const request = makeReadRequest(111, 1000, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint16BE(2)).toBe(111);
    });
    it("should read U16 parameter", async () => {
        const request = makeReadRequest(111, 1001, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint16BE(2)).toBe(20);
    });
    it("should read U32 parameter", async () => {
        const request = makeReadRequest(111, 1003, 2, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint32BE(2)).toBe(505600);
    });
    it("should read Boolean parameter", async () => {
        const request = makeReadRequest(111, 1007, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint16BE(2)).toBe(1);
    });
    it("should read one symbol from Text parameter", async () => {
        const request = makeReadRequest(111, 1010, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const symbol = String.fromCharCode(res.data.readUint16BE(2));
        expect(symbol).toBe("t");
    });
    it("should read text parameter", async () => {
        const request = makeReadRequest(111, 1010, 4, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        let text = "";
        for (let i = 0; i < res.data.length - 2; i += 2) {
            text += String.fromCharCode(res.data.readUint16BE(2 + i));
        }
        expect(text).toBe("test");
    });
    it("should read Enum parameter", async () => {
        const request = makeReadRequest(111, 1050, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint16BE(2)).toBe(2);
    });
    it("should read IPv4 parameter", async () => {
        const request = makeReadRequest(111, 1060, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint16BE(2)).toBe(192);
    });
    it("should read state input parameter", async () => {
        const request = makeReadRequest(111, 2001, 1, 0x04);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        expect(res.data.readUint16BE(2)).toBe(1);
    });
    it("should not read illigal address", async () => {
        const request = makeReadRequest(111, 10000, 1, 0x03);
        const res = await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const hex = res.data.toString("hex");
        expect(hex).toBe("8302");
    });
    it("should write U8 parameter", async () => {
        const request = makeWriteSingleRequest(111, 1000, 112);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const uid = (await bus.getConfs(["virtualDevice:uid"]))["virtualDevice:uid"];
        expect(uid).toBe("112");
    });
    it("should write U16 parameter", async () => {
        const request = makeWriteSingleRequest(111, 1001, 21);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const externalPort = (await bus.getConfs(["http:externalPort"]))["http:externalPort"];
        expect(externalPort).toBe("21");
    });
    it("should write Boolean parameter", async () => {
        const request = makeWriteSingleRequest(111, 1007, 0);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const isEnabled = (await bus.getConfs(["virtualDevice:isEnabled"]))["virtualDevice:isEnabled"];
        expect(isEnabled).toBe("false");
    });
    it("should write one symbol to Text parameter", async () => {
        const request = makeWriteSingleRequest(111, 1011, 97);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const modelName = (await bus.getConfs(["global:modelName"]))["global:modelName"];
        expect(modelName).toBe("tast");
    });
    it("should write Enum parameter", async () => {
        const request = makeWriteSingleRequest(111, 1050, 1);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const model = (await bus.getConfs(["global:model"]))["global:model"];
        expect(model).toBe("opcb221");
    });
    it("should write multiple U32", async () => {
        const request = makeWriteMultipleRequest(111, 1003, [7, 46948]);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const sessionTtl = (await bus.getConfs(["auth:sessionTtl"]))["auth:sessionTtl"];
        expect(sessionTtl).toBe("505700");
    });
    it("should write full string to Text parameter", async () => {
        const request = makeWriteMultipleRequest(111, 1010, [113, 119, 101, 114, 116]);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "rtu-no-crc"));
        const modelName = (await bus.getConfs(["global:modelName"]))["global:modelName"];
        expect(modelName).toBe("qwert");
    });
    it.failing("should not read a virtual device with incorrect type", async () => {
        const request = makeReadRequest(111, 1000, 1, 0x03);
        await bus.sendRequest(new opcb_ts_shared_1.redisBus.ModbusRequest(request, "as-is"));
    }, 500);
});
function makeReadRequest(modbusId, address, length, func) {
    const buffer = Buffer.alloc(6);
    buffer.writeUInt8(modbusId, 0);
    buffer.writeUInt8(func, 1);
    buffer.writeUInt16BE(address, 2);
    buffer.writeUInt16BE(length, 4);
    return buffer;
}
function makeWriteSingleRequest(modbusId, address, value) {
    const buffer = Buffer.alloc(6);
    buffer.writeUInt8(modbusId, 0);
    buffer.writeUInt8(0x06, 1);
    buffer.writeUInt16BE(address, 2);
    buffer.writeUInt16BE(value, 4);
    return buffer;
}
function makeWriteMultipleRequest(modbusId, address, values) {
    const buffer = Buffer.alloc(7 + values.length * 2);
    buffer.writeUInt8(modbusId, 0);
    // write func
    buffer.writeUInt8(0x10, 1);
    // write address
    buffer.writeUInt16BE(address, 2);
    // write quantity
    buffer.writeUInt16BE(values.length, 4);
    // write byte count
    buffer.writeUInt8(values.length * 2, 6);
    for (let i = 0; i < values.length; i++) {
        buffer.writeUInt16BE(values[i], 7 + i * 2);
    }
    return buffer;
}
//# sourceMappingURL=virtual-device.test.js.map