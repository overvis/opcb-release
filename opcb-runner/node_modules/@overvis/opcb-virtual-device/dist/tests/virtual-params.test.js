"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const opcb_ts_shared_1 = require("@overvis/opcb-ts-shared");
const utils_1 = require("./utils");
describe("virtual device", function () {
    it("should correctly read virtual params", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setState({
            "release:versionNum": "11",
        });
        // deviceType: id: 0, static: 42
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 0, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3)).toBe(42);
        // firmwareVersion: id: 1, from state: versionNum
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 1, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3)).toBe(11);
        stop();
    });
    it("should correctly write activation code", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        await bus.setState({
            "release:versionNum": "11",
        });
        // write activation code
        await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeWriteMultipleRequest)(111, 109, [188, 24910]), "rtu-no-crc"));
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 109, 2, 0x03), "rtu-no-crc"))).data.readUInt32BE(3)).toBe(12345678);
        stop();
    });
    it("should correctly read sqlite virtual params", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 10000, 1, 0x03), "rtu-no-crc"))).data.readUint16BE(3)).toBe(0);
        stop();
    });
    it("should correctly write sqlite virtual params", async () => {
        const [bus, stop] = await (0, utils_1.runVirtDevice)(true);
        // write single
        await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeWriteSingleRequest)(111, 10000, 123), "rtu-no-crc"));
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 10000, 1, 0x03), "rtu-no-crc"))).data.readUInt16BE(3)).toBe(123);
        // write multiple
        await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeWriteMultipleRequest)(111, 10000, [188, 24910]), "rtu-no-crc"));
        expect((await bus.sendRequest(new opcb_ts_shared_1.redisCmd.ModbusRequest((0, utils_1.makeReadRequest)(111, 10000, 2, 0x03), "rtu-no-crc"))).data.readUInt32BE(3)).toBe(12345678);
        stop();
    });
});
//# sourceMappingURL=virtual-params.test.js.map