"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiErrorHandler = exports.ApiUserError = void 0;
const sentry_1 = require("./sentry");
class ApiUserError extends Error {
    constructor(ocpApiHttpStatus, code, msg) {
        super(msg);
        this.ocpApiHttpStatus = ocpApiHttpStatus;
        this.code = code;
    }
}
exports.ApiUserError = ApiUserError;
async function apiErrorHandler(err, req, repl) {
    // TODO_FUTURE: send 400 errs to sentry?
    if (err instanceof ApiUserError || err.hasOwnProperty("ocpApiHttpStatus")) {
        await repl.code(err.ocpApiHttpStatus).send({
            errorCode: err.code,
            errorMessage: err.message,
        });
        return;
    }
    else if (err.hasOwnProperty("validation")) {
        await repl.code(400).send({
            errorCode: "IncorrectRequest",
            errorMessage: err.message,
        });
        return;
    }
    else if ("code" in err && err.code.startsWith("FST_")) {
        const cerr = err;
        if (cerr.code === "FST_ERR_CTP_EMPTY_JSON_BODY") {
            await repl.code(400).send({
                errorCode: "IncorrectRequest",
                errorMessage: 'Empty JSON body on POST (send "null" instead of empty payload).',
            });
            return;
        }
        else if (cerr.code === "FST_ERR_CTP_BODY_TOO_LARGE") {
            await repl.code(400).send({
                errorCode: "PayloadIsTooLarge",
                errorMessage: "POST body is too large.",
            });
            return;
        }
        else if (cerr.code === "FST_ERR_CTP_INVALID_CONTENT_LENGTH") {
            await repl.code(400).send({
                errorCode: "IncorrectRequest",
                errorMessage: "Invalid Content-Length header.",
            });
            return;
        }
    }
    else if ("name" in err && err.name === "SyntaxError" && err.statusCode === 400) {
        await repl.code(400).send({
            errorCode: "CantDecodePayloadJSON",
            errorMessage: `Can't decode JSON in POST body: ${err.message}`,
        });
        return;
    }
    req.log.error(`Internal Server Error (500):`);
    req.log.error(err);
    req.log.info("Sending to Sentry...");
    (0, sentry_1.reportErrorToSentry)(err);
    await repl.code(500).send({
        errorCode: "InternalServerError",
        errorMessage: "Internal server error",
    });
}
exports.apiErrorHandler = apiErrorHandler;
//# sourceMappingURL=api-error.js.map