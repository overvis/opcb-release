"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initApiFastifyServer = exports.getApiServerConfigs = void 0;
const tslib_1 = require("tslib");
const helmet_1 = tslib_1.__importDefault(require("@fastify/helmet"));
const sensible_1 = tslib_1.__importDefault(require("@fastify/sensible"));
const fastify_1 = tslib_1.__importDefault(require("fastify"));
const yargs_1 = tslib_1.__importDefault(require("yargs"));
const api_content_type_1 = require("./api-content-type");
const api_error_1 = require("./api-error");
const config_1 = require("./config");
function getApiServerCmdArgs() {
    return yargs_1.default
        .strict()
        .locale("en")
        .options({
        publicConfigPath: {
            type: "string",
            desc: "Public configuration file path.",
            default: "./config-public.json",
        },
        secretConfigPath: {
            type: "string",
            desc: "Secret configuration file path.",
            default: "./config-secret.json",
        },
    })
        .parseSync();
}
function getApiServerConfigs(publicConfigSchema, secretConfigSchema) {
    const { publicConfigPath, secretConfigPath } = getApiServerCmdArgs();
    const publicConfig = (0, config_1.loadConfig)(publicConfigPath, publicConfigSchema);
    const secretConfig = (0, config_1.loadConfig)(secretConfigPath, secretConfigSchema);
    return { publicConfig, secretConfig };
}
exports.getApiServerConfigs = getApiServerConfigs;
async function initApiFastifyServer(name, logger, decorations, enforceContentType = true) {
    const server = (0, fastify_1.default)({ logger });
    await server.register(helmet_1.default);
    await server.register(sensible_1.default);
    // applying decorations
    for (const decorationKey in decorations) {
        server.decorate(decorationKey, decorations[decorationKey]);
    }
    server.addHook("onReady", (done) => {
        logger.warn(`${name} started.`);
        done();
    });
    if (enforceContentType) {
        server.addHook("onRequest", api_content_type_1.checkApiRequestContentType);
        server.addHook("onSend", async (_req, rep, payload) => {
            // This is not a promise, rep.header() returns FastifyReply. Typings are confusing.
            // If you try to await here, reply will never be sent.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            rep.header("Content-Type", "application/json");
            return payload;
        });
    }
    server.addHook("onClose", (_ins, done) => {
        logger.warn(`Stopping ${name}...`);
        done();
    });
    server.setErrorHandler(api_error_1.apiErrorHandler);
    return server;
}
exports.initApiFastifyServer = initApiFastifyServer;
//# sourceMappingURL=api-server.js.map