"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWithReporting = exports.initSentry = exports.initApiServerSentry = exports.getSentryContext = exports.setSentryContext = exports.reportErrorToSentry = void 0;
const tslib_1 = require("tslib");
const Sentry = tslib_1.__importStar(require("@sentry/node"));
require("@sentry/tracing");
// export function initSentry(dsn?: string): void {
//     if (!dsn) return;
//     Sentry.init({
//         dsn,
//         tracesSampleRate: 1.0,
//     });
// }
let sentryContext;
function reportErrorToSentry(error) {
    if (sentryContext) {
        Sentry.setTags(sentryContext);
    }
    Sentry.captureException(error);
}
exports.reportErrorToSentry = reportErrorToSentry;
function setSentryContext(context) {
    sentryContext = { ...sentryContext, ...context };
}
exports.setSentryContext = setSentryContext;
function getSentryContext() {
    return sentryContext;
}
exports.getSentryContext = getSentryContext;
function initApiServerSentry(dsn, packageName, environment) {
    if (!dsn)
        return;
    Sentry.init({
        dsn,
        tracesSampleRate: 1.0,
        release: `${packageName}@${process.env.npm_package_version || "0.0.0"}`,
        environment,
    });
}
exports.initApiServerSentry = initApiServerSentry;
// TODO_FUTURE: remove
function initSentry(dsn) {
    if (!dsn)
        return;
    Sentry.init({
        dsn,
        tracesSampleRate: 1.0,
    });
}
exports.initSentry = initSentry;
function runWithReporting(fun) {
    fun().catch((e) => {
        // eslint-disable-next-line no-console
        console.error(e);
        Sentry.captureException(e);
        process.exit(1);
    });
}
exports.runWithReporting = runWithReporting;
//# sourceMappingURL=sentry.js.map