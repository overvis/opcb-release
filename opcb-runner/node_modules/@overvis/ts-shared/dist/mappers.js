"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAPPERS = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
exports.MAPPERS = {
    u16: {
        bool: (v) => v !== 0,
        u8: (v) => v & 0xff,
        i8: (v) => {
            const u = v & 0xff;
            return u > 0x7f ? u - 0x100 : u;
        },
        u16: (v) => v & 0xffff,
        i16: (v) => (v > 0x7fff ? v - 0x10000 : v),
    },
    i16: {
        u16: (v) => v & 0xffff,
    },
    u16s: {
        i32: (v) => {
            const view = new DataView(new ArrayBuffer(4));
            view.setUint16(0, v[0]);
            view.setUint16(2, v[1]);
            return view.getInt32(0);
        },
        u32: (v) => {
            const view = new DataView(new ArrayBuffer(4));
            view.setUint16(0, v[0]);
            view.setUint16(2, v[1]);
            return view.getUint32(0);
        },
        f32: (v) => {
            const view = new DataView(new ArrayBuffer(4));
            view.setUint16(0, v[0]);
            view.setUint16(2, v[1]);
            return view.getFloat32(0);
        },
        f64: (v) => {
            const view = new DataView(new ArrayBuffer(8));
            view.setUint16(0, v[0]);
            view.setUint16(2, v[1]);
            view.setUint16(4, v[2]);
            view.setUint16(6, v[3]);
            return view.getFloat64(0);
        },
        utf8str: (v) => String.fromCharCode(...v.filter((d) => d !== 0)),
        ipv4: (v) => v.join("."),
        mac: (v) => v.map((d) => d.toString(16).padStart(2, "0")).join(":"),
        hexWordsStr: (v) => v.map((d) => d.toString(16).padStart(4, "0")).join(" "),
        hexBytesStr: (v) => v.map((d) => (d & 0xff).toString(16).padStart(2, "0")).join(" "),
    },
    u32: {
        u16s: (v) => {
            const view = new DataView(new ArrayBuffer(4));
            view.setUint32(0, v);
            return [view.getUint16(0), view.getUint16(2)];
        },
    },
    i32: {
        u16s: (v) => {
            const view = new DataView(new ArrayBuffer(4));
            view.setInt32(0, v);
            return [view.getUint16(0), view.getUint16(2)];
        },
    },
    f32: {
        u16s: (v) => {
            const view = new DataView(new ArrayBuffer(4));
            view.setFloat32(0, v);
            return [view.getUint16(0), view.getUint16(2)];
        },
    },
    bool: {
        u16: (v) => (v ? 1 : 0),
    },
};
//# sourceMappingURL=mappers.js.map